{"version":3,"sources":["../LICENSE","header.txt","main.js","app/app.module.js","automator/automator.module.js","collab/collab.module.js","ctx-data/clb-ctx-data.module.js","env/env.module.js","error/error.module.js","lodash/lodash.module.js","rest/rest.module.js","storage/storage.module.js","stream/stream.module.js","ui-dialog/ui-dialog.module.js","ui-error/ui-error.module.js","ui-form/ui-form.module.js","ui-identity/ui-identity.module.js","ui-loading/ui-loading.module.js","ui-storage/ui-storage.module.js","ui-stream/ui-stream.module.js","identity/identity.module.js","app/app.service.js","app/auth.provider.js","app/authHttp.service.js","app/bootstrap.js","automator/automator.service.js","automator/create-collab.task.js","automator/create-nav-item.task.js","automator/overview.task.js","automator/storage.task.js","collab/clb-collab-app.service.js","collab/collab-nav.service.js","collab/collab-team-role.service.js","collab/collab-team.service.js","collab/collab.model.js","collab/collab.service.js","collab/context.model.js","collab/context.service.js","ctx-data/clb-ctx-data.service.js","env/env.provider.js","error/error.service.js","rest/pagination.service.js","storage/storage.service.js","stream/resource-locator.provider.js","stream/stream.service.js","ui-dialog/confirm.service.js","ui-error/error-dialog.factory.js","ui-error/error-message.directive.js","ui-form/form-control-focus.directive.js","ui-form/form-group-state.directive.js","ui-identity/user-avatar.directive.js","ui-identity/usercard-popover.directive.js","ui-identity/usercard-popover.service.js","ui-identity/usercard-popover.tpl.js","ui-identity/usercard.directive.js","ui-loading/loading.directive.js","ui-loading/perform-action.directive.js","ui-storage/file-browser-folder.directive.js","ui-storage/file-browser-path.directive.js","ui-storage/file-browser-tooltip.tpl.js","ui-storage/file-browser.directive.js","ui-storage/file-chooser.directive.js","ui-storage/file-upload.directive.js","ui-stream/activity.directive.js","ui-stream/feed.directive.js","identity/group.service.js","identity/user.service.js","identity/util.js","footer.txt"],"names":[],"mappings":"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","file":"../angular-hbp-collaboratory.js","sourcesContent":["// The MIT License (MIT)\n//\n// Copyright (c) 2016 EPFL, Human Brain Project\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n","(function(){\n\"use strict\"\n","/**\n * Module to load all the core modules. Try to use the sub-modules instead.\n * @module hbpCollaboratoryCore\n */\nangular.module('hbpCollaboratoryCore', [\n  'clb-app',\n  'clb-automator',\n  'clb-collab',\n  'clb-ctx-data',\n  'clb-env',\n  'clb-error',\n  'clb-identity',\n  'clb-rest',\n  'clb-storage',\n  'clb-stream'\n]);\n\n/**\n * Module to load the UI part of angular-hbp-collaboratory. Try to use the\n * sub-modules instead.\n * @module hbpCollaboratoryUI\n */\nangular.module('hbpCollaboratoryUI', [\n  'clb-ui-dialog',\n  'clb-ui-error',\n  'clb-ui-form',\n  'clb-ui-identity',\n  'clb-ui-loading',\n  'clb-ui-storage',\n  'clb-ui-stream'\n]);\n\n/**\n * @namespace hbpCollaboratory\n * @desc\n * ``hbpCollaboratory`` module is a shell around various AngularJS modules that\n *  interface with the HBP Collaboratory. It loads both the core modules and\n *  the UI modules, as well as the backward compatibility modules.\n */\nangular.module('hbpCollaboratory', [\n  'hbpCollaboratoryCore',\n  'hbpCollaboratoryUI'\n]);\n\n/**\n * @typedef {string} UUID A string formatted as a valid UUID4\n */\n","/* global hello */\n\n/**\n * @module clb-app\n * @desc\n * ``clb-app`` module provides utilities to retrieve current\n * HBP Collaboratory Context in an app and to communicate with the current\n * Collaboratory instance.\n *\n * This module must be bootstraped using ``angular.clbBootstrap`` function as\n * it needs to load the global environment loaded in CLB_ENBIRONMENT angular\n * constant.\n */\nangular.module('clb-app', ['clb-env', 'clb-error'])\n.constant('clbAppHello', hello);\n","/**\n * @module clb-automator\n * @desc\n * `clb-automator` module provides an automation library for the Collaboratory\n * using the AngularJS service :ref:`clbAutomator <module-clb-automator.clbAutomator>`.\n * It supports object describing a serie of actions that have to be run\n * either concurrently or sequentially.\n *\n * It is used for example to script the creation of new custom collab in\n * the `Create New Collab` functionality in `collaboratory-extension-core`.\n */\nangular.module('clb-automator', [\n  'clb-app',\n  'clb-env',\n  'clb-error',\n  'clb-collab',\n  'clb-storage'\n]);\n","/**\n * @module clb-collab\n * @desc\n * Contain services to interact with collabs (e.g.: retriving collab informations or\n * team members).\n */\nangular.module('clb-collab', [\n  'lodash',\n  'clb-app',\n  'clb-env',\n  'clb-error',\n  'clb-identity',\n  'clb-rest',\n  'uuid4'\n]);\n","/**\n * Provides a key value store where keys are context UUID\n * and values are string.\n *\n * @module clb-context-data\n */\nangular.module('clb-ctx-data', ['uuid4', 'clb-app', 'clb-env', 'clb-error']);\n","/**\n * @module clb-env\n * @desc\n * ``clb-env`` module provides a way to information from the global environment.\n */\n\nangular.module('clb-env', []);\n","angular.module('clb-error', []);\n","/* global _ */\n/**\n * Fix some compatibility issues with previous angular-hbp-common.\n * @module lodash\n * @private\n */\nangular.module('lodash', [])\n.constant('lodash', _)\n.run(function($log, lodash) {\n  // keep lodash compatibility with older versions\n  if (!lodash.indexBy) {\n    $log.debug('define some lodash 3 functions from lodash 3');\n    lodash.indexBy = lodash.keyBy;\n    lodash.pluck = lodash.map;\n  }\n  if (!lodash.keyBy) {\n    $log.debug('define some lodash 4 functions from lodash 3');\n    lodash.keyBy = lodash.indexBy;\n  }\n});\n","/**\n * @module clb-rest\n * @desc\n * ``clb-rest`` module contains util for simplifying access to Rest service.\n */\nangular.module('clb-rest', ['clb-app', 'clb-error']);\n","/**\n * @module clb-storage\n * @desc\n * The ``clb-storage`` module contains tools needed to access and work with the\n * HBP Document Service. It is targeted to integrate easily with the HBP\n * Collaboratory, even if the service is more generic.\n */\nangular.module('clb-storage', [\n  'uuid4',\n  'clb-error',\n  'clb-env',\n  'clb-rest',\n  'clb-identity'\n]);\n","/**\n * @module clb-stream\n * @desc\n * The `clb-stream` module contains a service and a few directives to retrieve\n * and display the HBP Collaboratory stream provided\n * by the various applications.\n */\n\nangular.module('clb-stream', [\n  'clb-app',\n  'clb-env',\n  'clb-error',\n  'clb-rest',\n  'clb-identity',\n  'angularMoment'\n]);\n","/**\n * @module clb-ui-dialog\n */\nangular.module('clb-ui-dialog', ['ui.bootstrap.modal']);\n","/**\n * @module clb-ui-error\n */\nangular.module('clb-ui-error', [\n  'clb-error',\n  'ui.bootstrap'\n]);\n","/**\n * @module clb-ui-form\n * @desc\n * clb-ui-form provides directive to ease creation of forms.\n */\nangular.module('clb-ui-form', []);\n","/**\n * Provides UI widgets around user and groups.\n * @module clb-ui-identity\n */\nangular.module('clb-ui-identity', ['lodash', 'clb-identity']);\n","/**\n * Provides a simple loading directive.\n * @module clb-ui-loading\n */\nangular.module('clb-ui-loading', []);\n","/**\n * The ``clb-ui-storage`` module provides Angular directive to work\n * with the HBP Collaboratory storage.\n *\n *\n * Featured Component\n * ------------------\n *\n * - The directive :doc:`clb-file-browser <module-clb-ui-storage.clb-file-browser>`\n *   provides an easy to use browser which let the user upload new files,\n *   create folder and act as file selector.\n * @module clb-ui-storage\n */\nangular.module('clb-ui-storage', [\n  'ui.bootstrap',\n  'clb-ui-error',\n  'clb-storage'\n]);\n","/**\n * @module clb-ui-stream\n */\nangular.module('clb-ui-stream', [\n  'angularMoment',\n  'clb-stream',\n  'clb-ui-error'\n]);\n","angular.module('clb-identity', [\n  'lodash',\n  'clb-app',\n  'clb-env',\n  'clb-error',\n  'clb-rest'\n]);\n","angular.module('clb-app')\n.factory('clbApp', clbApp);\n\n/**\n * @namespace clbApp\n * @memberof module:clb-app\n * @desc\n * An AngularJS service to interface a web application with the HBP Collaboratory.\n * This library provides a few helper to work within the Collaboratory environment.\n *\n * Usage\n * -----\n *\n * - :ref:`module-clb-app.clbApp.context` is used to set and retrieve\n *   the current context.\n * - :ref:`module-clb-app.clbApp.emit` is used to send a command\n *   to the HBP Collaboratory and wait for its answer.\n *\n * @example <caption>Retrieve the current context object</caption>\n * clbApp.context()\n * .then(function(context) {\n *   console.log(context.ctx, context.state, context.collab);\n * })\n * .catch(function(err) {\n *   // Cannot set the state\n * });\n *\n * @example <caption>Set the current state in order for a user to be able to copy-paste its current URL and reopen the same collab with your app loaded at the same place.</caption>\n * clbApp.context({state: 'lorem ipsum'})\n * .then(function(context) {\n *   console.log(context.ctx, context.state, context.collab);\n * })\n * .catch(function(err) {\n *   // Cannot set the state\n * });\n *\n * @param  {object} $log AngularJS service injection\n * @param  {object} $q AngularJS service injection\n * @param  {object} $rootScope AngularJS service injection\n * @param  {object} $timeout AngularJS service injection\n * @param  {object} $window AngularJS service injection\n * @param  {object} clbError AngularJS service injection\n * @return {object}         the service singleton\n */\nfunction clbApp(\n  $log,\n  $q,\n  $rootScope,\n  $timeout,\n  $window,\n  clbError\n) {\n  var eventId = 0;\n  var sentMessages = {};\n\n  /**\n   * Singleton class\n   */\n  function AppToolkit() { }\n  AppToolkit.prototype = {\n    emit: emit,\n    context: context,\n    open: open\n  };\n\n  $window.addEventListener('message', function(event) {\n    $rootScope.$emit('message', event.data);\n  });\n\n  $rootScope.$on('message', function(event, message) {\n    if (!message || !message.origin || !sentMessages[message.origin]) {\n      return;\n    }\n    if (message.eventName === 'resolved') {\n      sentMessages[message.origin].resolve(message.data);\n    } else if (message.eventName === 'error') {\n      sentMessages[message.origin].reject(clbError.error(message.data));\n    }\n    sentMessages[message.origin] = null;\n  });\n\n  /**\n   * Send a message to the HBP Collaboratory.\n   * @memberof module:clb-app.clbApp\n   * @param  {string} name name of the event to be propagated\n   * @param  {object} data corresponding data to be sent alongside the event\n   * @return  {Promise} resolve with the message response\n   */\n  function emit(name, data) {\n    eventId++;\n    sentMessages[eventId] = $q.defer();\n    var promise = sentMessages[eventId].promise;\n    $window.parent.postMessage({\n      apiVersion: 1,\n      eventName: name,\n      data: data,\n      ticket: eventId\n    }, '*');\n    return promise;\n  }\n\n  var currentContext;\n\n  /**\n   * @typedef HbpCollaboratoryContext\n   * @memberof module:clb-app.clbApp\n   * @type {object}\n   * @property {string} mode - the current mode, either 'run' or 'edit'\n   * @property {string} ctx - the UUID of the current context\n   * @property {string} state - an application defined state string\n   */\n\n   /**\n    * @memberof module:clb-app.clbApp\n    * @desc\n    * Asynchronously retrieve the current HBP Collaboratory Context, including\n    * the mode, the ctx UUID and the application state if any.\n    * @function context\n    * @param {object} data new values to send to HBP Collaboratory frontend\n    * @return {Promise} resolve to the context\n    * @static\n    */\n  function context(data) {\n    var d = $q.defer();\n    var kill = $timeout(function() {\n      d.reject(clbError.error({\n        type: 'TimeoutException',\n        message: 'No context can be retrieved'\n      }));\n    }, 250);\n\n    if (data) {\n      // discard context if new data should be set.\n      currentContext = null;\n    }\n\n    if (currentContext) {\n      // directly return context when cached.\n      return d.resolve(currentContext);\n    }\n    emit('workspace.context', data)\n    .then(function(context) {\n      $timeout.cancel(kill);\n      currentContext = context;\n      d.resolve(context);\n    })\n    .catch(function(err) {\n      d.reject(clbError.error(err));\n    });\n    return d.promise;\n  }\n  return new AppToolkit();\n\n  /**\n   * @desc\n   * Open a resource described by the given ObjectReference.\n   *\n   * The promise will fulfill only if the navigation is possible. Otherwise,\n   * an error will be returned.\n   * @function open\n   * @memberof module:clb-app.clbApp\n   * @param {ObjectReference} ref  The object reference to navigate to\n   * @return {Promise}  The promise retrieved by the call to emit\n   */\n  function open(ref) {\n    $log.debug('Ask the frontend to navigate to:', ref);\n    return emit('resourceLocator.open', {ref: ref});\n  }\n}\n","/* eslint require-jsdoc:0 valid-jsdoc:0 */\nangular.module('clb-app')\n.provider('clbAuth', authProvider);\n\nfunction authProvider(clbAppHello, clbEnvProvider) {\n  return {\n    $get: function($http, $log, $q, $rootScope, $timeout, clbEnv, clbError) {\n      _addHbpProvider();\n      _loadApplicationInfo();\n      _bindEvents();\n      var _readEnvOnce = false;\n\n      return {\n        login: login,\n        logout: logout,\n        getAuthInfo: getAuthInfo\n      };\n\n      function login(options) {\n        var d = $q.defer();\n        if (!_readEnvOnce) {\n          _readEnvOnce = true;\n          var envToken = _readTokenFromEnv();\n          if (envToken) {\n            // The token delivered by the backend is considered valid.\n            var authInfo = getAuthInfo(envToken);\n            d.resolve(authInfo);\n            $rootScope.$broadcast('clbAuth.changed', authInfo);\n            return d.promise;\n          }\n        }\n        clbAppHello.login('hbp', options)\n        .then(function(res) {\n          d.resolve(getAuthInfo(res.authResponse));\n        }, function(err) {\n          d.reject(_formatError(err));\n        });\n        return d.promise;\n      }\n\n      function logout(options) {\n        var info = getAuthInfo();\n        if (!info) {\n          return $q.when(true);\n        }\n        var d = $q.defer();\n        clbAppHello.logout('hbp', options)\n        .then(function() {\n          return d.resolve(true);\n        }, function(err) {\n          d.reject(_formatError(err));\n        });\n        return d.promise;\n      }\n\n      function getAuthInfo(authResponse) {\n        authResponse = authResponse || clbAppHello.getAuthResponse('hbp');\n        if (!authResponse) {\n          return null;\n        }\n        return {\n          accessToken: authResponse.access_token,\n          tokenType: authResponse.token_type,\n          // When no scopes are specified, the server will generate a token\n          // with the app default scopes. In this case hello.js don't know what\n          // they are so we set the value to undefined by convention.\n          scope: authResponse.scope || undefined,\n          expires: authResponse.expires\n        };\n      }\n\n      function _readTokenFromEnv() {\n        var authInfo = clbEnv.get('auth.token', false);\n        if (!authInfo) {\n          return;\n        }\n        var now = (new Date()).getTime() / 1e3;\n        if (!authInfo.expires && authInfo.expires_in) {\n          authInfo.expires = (now) + authInfo.expires_in;\n        }\n        if (!authInfo.expires || now < authInfo.expires) {\n          clbAppHello.utils.store('hbp', authInfo);\n          return authInfo;\n        }\n      }\n\n      function _formatError(err) {\n        return clbError.error({\n          type: err.error.code,\n          message: err.error.message,\n          data: err\n        });\n      }\n\n      function _bindEvents() {\n        clbAppHello.on('auth.login', _handleAuthInfoChange);\n        clbAppHello.on('auth.logout', _handleAuthInfoChange);\n      }\n\n      function _handleAuthInfoChange(data, name) {\n        if (data.network !== 'hbp') {\n          return;\n        }\n        $log.debug('propagate auth event from original event', name);\n        $timeout(function() {\n          $rootScope.$broadcast('clbAuth.changed', getAuthInfo());\n        }, 0);\n      }\n\n      /**\n       * Define a new provider Hello.js provider for HBP\n       */\n      function _addHbpProvider() {\n        clbAppHello.init({\n          hbp: {\n            name: 'Human Brain Project',\n            oauth: {\n              version: '2',\n              auth: clbEnvProvider.get('auth.url') + '/authorize',\n              grant: clbEnvProvider.get('auth.url') + '/token'\n            },\n            // API base URL\n            base: clbEnvProvider.get('auth.url') + '/',\n            scope_delim: ' ', // eslint-disable-line camelcase\n            login: function(p) {\n              // Reauthenticate\n              if (p.options.force) {\n                p.qs.prompt = 'login';\n              }\n              if (!p.qs.scope) {\n                delete p.qs.scope;\n              }\n            },\n            logout: function(callback, p) {\n              $http.post(clbEnv.get('auth.url') + '/slo', {\n                token: p.authResponse.access_token\n              }, {\n                withCredentials: true\n              })\n              .then(function() {\n                callback();\n              })\n              .catch(function(err) {\n                $log.error('Cannot kill the global session');\n                $log.debug(err);\n                callback();\n              });\n            }\n          }\n        });\n      }\n\n      /**\n       * Set the current application data.\n       */\n      function _loadApplicationInfo() {\n        clbAppHello.init({\n          hbp: clbEnvProvider.get('auth.clientId')\n        }, {\n          default_service: 'hbp', // eslint-disable-line camelcase\n          display: 'page',\n          scope: clbEnvProvider.get('auth.scopes', null),\n          force: false\n        });\n      }\n    }\n  };\n}\n","angular.module('clb-app')\n.factory('clbAuthHttp', clbAuthHttp);\n\n/**\n * Proxy $http to add the HBP bearer token.\n * Also handle 401 Authentication Required errors.\n * See $http service\n *\n * @param  {object} $http   DI\n * @param  {object} clbAuth DI\n * @return {function}       the service\n */\nfunction clbAuthHttp($http, clbAuth) {\n  var proxyHttp = function(config) {\n    var auth = clbAuth.getAuthInfo();\n    if (!auth) {\n      return $http(config);\n    }\n    var authToken = auth.tokenType + ' ' + auth.accessToken;\n    if (!config.headers) {\n      config.headers = {\n        Authorization: authToken\n      };\n    }\n    config.headers.Authorization = authToken;\n    return $http(config);\n  };\n  proxyHttp.get = _wrapper('GET');\n  proxyHttp.head = _wrapper('HEAD');\n  proxyHttp.delete = _wrapper('DELETE');\n  proxyHttp.post = _wrapperData('POST');\n  proxyHttp.put = _wrapperData('PUT');\n  proxyHttp.patch = _wrapperData('PATCH');\n  return proxyHttp;\n\n  /**\n   * Handle $http helper call for GET, DELETE, HEAD requests.\n   *\n   * @param  {string} verb the HTTP verb\n   * @return {function}    The function to attach\n   */\n  function _wrapper(verb) {\n    return function(url, config) {\n      config = config || {};\n      config.method = verb.toUpperCase();\n      config.url = url;\n      return proxyHttp(config);\n    };\n  }\n\n  /**\n   * Handle $http helper call for PUT, PATCH, POST requests.\n   *\n   * @param  {string} verb the HTTP verb\n   * @return {function}    The function to attach\n   */\n  function _wrapperData(verb) {\n    return function(url, data, config) {\n      config = config || {};\n      config.method = verb.toUpperCase();\n      config.url = url;\n      config.data = data;\n      return proxyHttp(config);\n    };\n  }\n}\n","/* global deferredBootstrapper, window, document */\n\n/**\n * @namespace angular\n */\n\nangular.clbBootstrap = clbBootstrap;\n\n/**\n * Bootstrap AngularJS application with the HBP environment loaded.\n *\n * It is very important to load the HBP environement *before* starting\n * the application. This method let you do that synchronously or asynchronously.\n * Whichever method you choose, the values in your environment should look\n * very similar to the one in _`https://collab.humanbrainproject.eu/config.json`,\n * customized with your own values.\n *\n * At least ``auth.clientId`` should be edited in the config.json file.\n *\n * @memberof angular\n * @param {string} module the name of the Angular application module to load.\n * @param {object} options pass those options to deferredBootstrap\n * @param {object} options.env HBP environment JSON (https://collab.humanbrainproject.eu/config.json)\n * @return {Promise} return once the environment has been bootstrapped\n * @example <caption>Bootstrap the environment synchronously</caption>\n * angular.clbBootstrap('myApp', {\n *   env: { } // content from https://collab.humanbrainproject.eu/config.json\n * })\n * @example <caption>Bootstrap the environment asynchronously</caption>\n * angular.clbBootstrap('myApp', {\n *   env: 'https://my-project-website/config.json'\n * })\n * @example <caption>Using backward compatibility</caption>\n * window.bbpConfig = { } // content from https://collab.humanbrainproject.eu/config.json\n * angular.clbBoostrap('myApp')\n */\nfunction clbBootstrap(module, options) {\n  if (window.bbpConfig) {\n    options.env = window.bbpConfig;\n  }\n  if (!options.element) {\n    options.element = document.body;\n  }\n  options.module = module;\n  if (!options.moduleResolves) {\n    options.moduleResolves = {};\n  }\n  options.moduleResolves = [{\n    module: 'clb-env',\n    resolve: {\n      // use injection here as it is not resolved automatically on build.\n      CLB_ENVIRONMENT: ['$q', '$http', function($q, $http) {\n        // Remove any previously defined CLB_ENVIRONMENT\n        // As this results in unpredictable results when multiple apps\n        // use this strategy.\n        var invoker = angular.module(['clb-env'])._invokeQueue;\n        for (var i = 0; i < invoker.length; i++) {\n          var inv = invoker[i];\n          if (inv[2][0] === 'CLB_ENVIRONMENT') {\n            invoker.splice(i, 1);\n            i--;\n          }\n        }\n        if (angular.isString(options.env)) {\n          return $http.get(options.env)\n          .then(function(res) {\n            // Set bbpConfig for backward compatibility\n            window.bbpConfig = res.data;\n            return res.data;\n          });\n        }\n        // Set bbpConfig for backward compatibility\n        if (!window.bbpConfig) {\n          window.bbpConfig = options.env;\n        }\n        return $q.when(options.env);\n      }]\n    }\n  }];\n  return deferredBootstrapper.bootstrap(options);\n}\n","angular.module('clb-automator')\n.factory('clbAutomator', clbAutomator);\n\n/**\n * @namespace Tasks\n * @memberof module:clb-automator\n * @desc\n * Document a list of available tasks.\n */\n\n/**\n * @namespace clbAutomator\n * @memberof module:clb-automator\n * @desc\n * clbAutomator is an AngularJS factory that\n * provide task automation to accomplish a sequence of\n * common operation in Collaboratory.\n *\n * How to add new tasks\n * --------------------\n *\n * New tasks can be added by calling ``clbAutomator.registerHandler``.\n *\n * You can see a few example of tasks in the `tasks` folder.\n *\n * Evaluate the automator\n * ----------------------\n *\n * From the root of this project, you can start a server that will let\n * you write a descriptor and run it.\n *\n * .. code-block:: bash\n *\n *    gulp example\n *\n * @example <caption>Create a Collab with a few navigation items</caption>\n * // Create a Collab with a few navigation items.\n * angular.module('MyModule', ['clb-automator'])\n * .run(function(clbAutomator, $log) {\n *   var config = {\n *     title: 'My Custom Collab',\n *     content: 'My Collab Content',\n *     private: false\n *   };\n *   clbAutomator.task(config).run().then(function(collab) {\n *   \t $log.info('Created Collab', collab);\n *   });\n * })\n * @example <caption>Create a Collab with entities and navigation items</caption>\n * clbAutomator.run({\n *   \"collab\": {\n *     \"title\": \"Test Collab Creation\",\n *     \"content\": \"My Collab Description\",\n *     \"private\": true,\n *     \"after\": [\n *       {\n *         \"storage\": {\n *           \"entities\": {\n *             // Use one of your file UUID here.\n *             \"sample.ipynb\": \"155c1bcc-ee9c-43e2-8190-50c66befa1fa\"\n *           },\n *           \"after\": [{\n *             \"nav\": {\n *               \"name\": \"Example Code\",\n *               \"app\": \"Jupyter Notebook\",\n *               \"entity\": \"sample.ipynb\"\n *             }\n *           }]\n *         }\n *       },\n *       {\n *         \"nav\": {\n *           \"name\": \"Empty Notebook\",\n *           \"app\": \"Jupyter Notebook\"\n *         }\n *       },\n *       {\n *         \"nav\": {\n *           \"name\": \"Introduction\",\n *           \"app\": \"Rich Text Editor\"\n *         }\n *       }\n *     ]\n *   }\n * }).then(function(collab) {\n *   $log.info('Created Collab', collab);\n * });\n *\n * @example <caption>Create a Collab with a pre-filled overview</caption>\n * clbAutomator.run({\n *   \"collab\": {\n *     \"title\": \"Test Collab With Pre Filled Overview\",\n *     \"content\": \"Test collab creation with  a pre filled overview\",\n *     \"private\": true,\n *     \"after\": [{\n *       \"overview\": {\n *         // Use one of your HTML file UUID here.\n *         \"entity\": \"155c1bcc-ee9c-43e2-8190-50c66befa1fa\"\n *       }\n *     }]\n *   }\n * }).then(function(collab) {\n *   $log.info('Created Collab', collab);\n * });\n * @param {object} $q injected service\n * @param {object} $log injected service\n * @param {object} clbError injected service\n * @return {object} the clbAutomator Angular service singleton\n */\nfunction clbAutomator(\n  $q,\n  $log,\n  clbError\n) {\n  var handlers = {};\n\n  /**\n   * Register a handler function for the given task name.\n   * @memberof module:clb-automator.clb-automator\n   * @param  {string}   name handle actions with the specified name\n   * @param  {Function} fn a function that accept the current context in\n   *                       parameter.\n   */\n  function registerHandler(name, fn) {\n    handlers[name] = fn;\n  }\n\n  /**\n   * Instantiate a new Task intance that will run the code describe for\n   * a handlers with the give ``name``.\n   *\n   * The descriptor is passed to the task and parametrize it.\n   * The task context is computed at the time the task is ran. A default context\n   * can be given at load time and it will be fed with the result of each parent\n   * (but not sibling) tasks as well.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param {string} name the name of the task to instantiate\n   * @param {object} [descriptor] a configuration object that will determine\n   *                            which task to run and in which order\n   * @param {object} [descriptor.after] an array of task to run after this one\n   * @param {object} [context] a default context to run the task with\n   *\n   * @return {Task} - the new task instance\n   */\n  function task(name, descriptor, context) {\n    try {\n      return new Task(name, descriptor, context);\n    } catch (ex) {\n      $log.error('EXCEPTION', ex);\n      throw clbError.error({\n        type: 'InvalidTask',\n        message: 'Invalid task ' + name + ': ' + ex,\n        data: {\n          cause: ex,\n          name: name,\n          descriptor: descriptor,\n          context: context\n        }\n      });\n    }\n  }\n\n  /**\n   * Directly generate tasks from given description and run them.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} descriptor description of the tasks to run\n   * @param  {object} [context]  the initial context\n   * @return {Promise} promise of the top level task result\n   */\n  function run(descriptor, context) {\n    for (var name in descriptor) {\n      if (descriptor.hasOwnProperty(name)) {\n        return task(name, descriptor[name], context).run();\n      }\n    }\n    return $q.reject(clbError.error({\n      type: 'NoTaskFound',\n      message: 'No task found in descriptor',\n      data: descriptor\n    }));\n  }\n\n  /**\n   * Create an array of tasks given an array containing object where\n   * the key is the task name to run and the value is the descriptor\n   * parameter.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} after the content of ``descriptor.after``\n   * @return {Array/Task} array of subtasks\n   * @private\n   */\n  function createSubtasks(after) {\n    var subtasks = [];\n    if (!after || !after.length) {\n      return subtasks;\n    }\n    for (var i = 0; i < after.length; i++) {\n      var taskDef = after[i];\n      for (var name in taskDef) {\n        if (taskDef.hasOwnProperty(name)) {\n          subtasks.push(task(name, taskDef[name]));\n        }\n      }\n    }\n    return subtasks;\n  }\n\n  /**\n   * @class Task\n   * @memberof module:clb-automator.clbAutomator\n   * @desc\n   * Instantiate a task given the given `config`.\n   * The task can then be run using the `run()` instance method.\n   * @param {string} name the name of the task to instantiate\n   * @param {object} [descriptor] a configuration object that will determine\n   *                            which task to run and in which order\n   * @param {object} [descriptor.after] an array of task to run after this one\n   * @param {object} [context] a default context to run the task with\n   * @see module:clb-automator.task\n   *\n   */\n  function Task(name, descriptor, context) {\n    if (!handlers[name]) {\n      throw new Error('TaskNotFound');\n    }\n    descriptor = descriptor || {};\n    context = context || {};\n    this.state = 'idle';\n    this.name = name;\n    this.descriptor = descriptor;\n    this.defaultContext = context;\n    this.state = 'idle';\n    this.promise = null;\n    this.error = null;\n    this.subtasks = createSubtasks(descriptor.after);\n  }\n\n  Task.prototype = {\n    /**\n     * Launch the task.\n     *\n     * @memberof module:clb-automator.clbAutomator.Task\n     * @param {object} context current context will be merged into the default\n     *                         one.\n     * @return {Promise} promise to return the result of the task\n     */\n    run: function(context) {\n      var self = this;\n      // run an intance of task only once.\n      if (self.state !== 'idle') {\n        return self.promise;\n      }\n      context = angular.extend({}, this.defaultContext, context);\n      var onSuccess = function(result) {\n        var subContext = angular.copy(context);\n        subContext[self.name] = result;\n        return self.runSubtasks(subContext)\n        .then(function() {\n          self.state = 'success';\n          return result;\n        });\n      };\n      var onError = function(err) {\n        self.state = 'error';\n        // noop operation if is already one\n        return $q.reject(clbError.error(err));\n      };\n      self.state = 'progress';\n      self.promise = $q.when(handlers[self.name](self.descriptor, context))\n        .then(onSuccess)\n        .catch(onError);\n      return self.promise;\n    },\n\n    /**\n     * Run all subtasks of the this tasks.\n     *\n     * @memberof module:clb-automator.clbAutomator.Task\n     * @param  {object} context the current context\n     * @return {Array}          all the results in an array\n     */\n    runSubtasks: function(context) {\n      var promises = [];\n      angular.forEach(this.subtasks, function(task) {\n        promises.push(task.run(context));\n      });\n      return $q.all(promises);\n    }\n  };\n\n  /**\n   * Return a HbpError when a parameter is missing.\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {string} key    name of the key\n   * @param  {object} config the invalid configuration object\n   * @return {HbpError}      a HbpError instance\n   * @private\n   */\n  function missingDataError(key, config) {\n    return clbError({\n      type: 'KeyError',\n      message: 'Missing `' + key + '` key in config',\n      data: {\n        config: config\n      }\n    });\n  }\n\n  /**\n   * Ensure that all parameters listed after config are presents.\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} config task descriptor\n   * @return {object} created entities\n   */\n  function ensureParameters(config) {\n    var parameters = Array.prototype.splice(1);\n    for (var p in parameters) {\n      if (angular.isUndefined(parameters[p])) {\n        return $q.reject(missingDataError(p, config));\n      }\n    }\n    return $q.when(config);\n  }\n\n  /**\n   * Return an object that only contains attributes\n   * from the `attrs` list.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} config key-value store\n   * @param  {Array} attrs   a list of keys to extract from `config`\n   * @return {object}        key-value store containing only keys from attrs\n   *                         found in `config`\n   */\n  function extractAttributes(config, attrs) {\n    var r = {};\n    angular.forEach(attrs, function(a) {\n      if (angular.isDefined(config[a])) {\n        r[a] = config[a];\n      }\n    });\n    return r;\n  }\n\n  return {\n    run: run,\n    task: task,\n    handlers: handlers,\n    registerHandler: registerHandler,\n    extractAttributes: extractAttributes,\n    ensureParameters: ensureParameters\n  };\n}\n","angular.module('clb-automator')\n.run(function createCollab(\n  $log,\n  $q,\n  clbCollab,\n  clbAutomator\n) {\n  clbAutomator.registerHandler('collab', createCollab);\n\n  /**\n   * @function createCollab\n   * @memberof module:clb-automator.Tasks\n   * @desc\n   *  Create a collab defined by the given options.\n   * @param {object} descriptor - Parameters to create the collab\n   * @param {string} descriptor.name - Name of the collab\n   * @param {string} descriptor.description - Description in less than 140 characters\n   *                                       of the collab\n   * @param {string} [descriptor.privacy] - 'private' or 'public'. Notes that only\n   *                                   HBP Members can create private collab\n   * @param {Array} [after] - descriptor of subtasks\n   * @return {Promise} - promise of a collab\n   */\n  function createCollab(descriptor) {\n    var attr = clbAutomator.extractAttributes(\n      descriptor,\n      ['title', 'content', 'private']\n    );\n    $log.debug('Create collab', descriptor);\n    return clbCollab.create(attr);\n  }\n});\n","angular.module('clb-automator')\n.run(function createNavItem(\n  $log,\n  clbCollabApp,\n  clbCollabNav,\n  clbAutomator,\n  clbStorage\n) {\n  clbAutomator.registerHandler('nav', createNavItem);\n\n  /**\n   * Create a new nav item.\n   * @memberof module:clb-automator.Tasks\n   * @param {object} descriptor a descriptor description\n   * @param {string} descriptor.name name of the nav item\n   * @param {Collab} descriptor.collabId collab in which to add the item in.\n   * @param {string} descriptor.app app name linked to the nav item\n   * @param {object} [context] the current run context\n   * @param {object} [context.collab] a collab instance created previously\n   * @return {Promise} promise of a NavItem instance\n   */\n  function createNavItem(descriptor, context) {\n    var collabId = function() {\n      return (descriptor && descriptor.collab) ||\n        (context && context.collab.id);\n    };\n    var findApp = function(app) {\n      return clbCollabApp.findOne({title: app});\n    };\n    var createNav = function(app) {\n      return clbCollabNav.getRoot(collabId())\n      .then(function(parentItem) {\n        return clbCollabNav.addNode(collabId(),\n          new clbCollabNav.NavItem({\n            collab: collabId(),\n            name: descriptor.name,\n            appId: app.id,\n            parentId: parentItem.id\n          })\n        );\n      });\n    };\n    var linkToStorage = function(nav) {\n      if (!descriptor.entity) {\n        return nav;\n      }\n      var setLink = function(entity) {\n        return clbStorage.setContextMetadata(entity, nav.context)\n        .then(function() {\n          return nav;\n        });\n      };\n      // It might be the name used in a previous storage task.\n      if (context && context.storage && context.storage[descriptor.entity]) {\n        return setLink(context.storage[descriptor.entity]);\n      }\n      return clbStorage.getEntity(descriptor.entity).then(setLink);\n    };\n\n    $log.debug('Create nav item', descriptor, context);\n\n    return clbAutomator.ensureParameters(descriptor, 'app', 'name')\n    .then(function() {\n      return findApp(descriptor.app)\n      .then(createNav)\n      .then(linkToStorage);\n    });\n  }\n});\n","angular.module('clb-automator')\n.run(function createOverview(\n  $log, $q, clbAuthHttp, clbEnv, clbStorage, clbError,\n  clbAutomator, clbCollabNav, clbCollabApp\n) {\n  clbAutomator.registerHandler('overview', overview);\n\n  /**\n   * Set the content of the overview page.\n   * If an 'entity' is specified, it will use the content of that storage file\n   * If an 'app' name is specified, it will use that app for the overview page\n   *\n   * The collab is indicated either by an id in `descriptor.collab` or a\n   * collab object in `context.collab`.\n   *\n   * @memberof module:clb-automator.Tasks\n   * @param {object} descriptor the task configuration\n   * @param {object} [descriptor.collab] id of the collab\n   * @param {string} [descriptor.entity] either a label that can be found in\n   *                 ``context.entities`` or a FileEntity UUID\n   * @param {string} [descriptor.app] the name of an application\n   * @param {object} context the current task context\n   * @param {object} [context.collab] the collab in which entities will be copied\n   * @param {object} [context.entities] a list of entities to lookup in for\n   *                   descriptor.entity value\n   * @return {object} created entities where keys are the same as provided in\n   *                  config.storage\n   */\n  function overview(descriptor, context) {\n    $log.debug('Set the content of the overview page');\n    var collabId = descriptor.collab || context.collab.id;\n    var createContentFile = function(overview, descriptor, context) {\n      $log.debug('Fill overview page with content from entity');\n\n      return fetchSourceContent(descriptor, context)\n        .then(function(source) {\n          return clbAuthHttp.post(\n            clbEnv.get('api.richtext.v0') + '/richtext/', {\n              ctx: overview.context,\n              raw: source\n            });\n        });\n    };\n\n    var updateAppId = function(overview, descriptor) {\n      $log.debug('Replace the overview page application id');\n\n      return clbCollabApp.findOne({title: descriptor.app})\n        .then(function(app) {\n          overview.update({appId: app.id});\n          return clbCollabNav.saveNode(collabId, overview);\n        });\n    };\n\n    return clbCollabNav\n      .getRoot(collabId)\n      .then(function(rootNav) {\n        var overview = rootNav.children[0];\n\n        var updateOverview = descriptor.app ?\n          updateAppId(overview, descriptor) :\n          createContentFile(overview, descriptor, context);\n\n        return updateOverview.then(function() {\n          return overview;\n        });\n      });\n  }\n\n  /**\n   * Download file entity content.\n   *\n   * @param {object} descriptor the task configuration\n   * @param {string} descriptor.entity either the label to find in\n   *                 ``context.entities`` or a the entity UUID.\n   * @param {object} context the current task context\n   * @param {object} context.entities optional entities in which to lookup for one\n   * @return {Promise} the promise of the entity content string\n   * @private\n   */\n  function fetchSourceContent(descriptor, context) {\n    var uuid;\n    if (context && context.entities && context.entities[descriptor.entity]) {\n      uuid = context.entities[descriptor.entity].uuid;\n    } else {\n      uuid = descriptor.entity;\n    }\n    return clbStorage.getContent(uuid);\n  }\n});\n","angular.module('clb-automator')\n.run(function createStorage(\n  $log,\n  $q,\n  clbError,\n  clbAutomator,\n  clbStorage\n) {\n  clbAutomator.registerHandler('storage', storage);\n\n  /**\n   * Copy files and folders to the destination collab storage.\n   *\n   * @memberof module:clb-automator.Tasks\n   * @param {object} descriptor the task configuration\n   * @param {object} descriptor.storage a object where keys are the file path in the\n   *                                new collab and value are the UUID of the\n   *                                entity to copy at this path.\n   * @param {object} [descriptor.collab] id of the collab\n   * @param {object} context the current task context\n   * @param {object} [context.collab] the collab in which entities will be copied\n   * @return {object} created entities where keys are the same as provided in\n   *                  config.storage\n   */\n  function storage(descriptor, context) {\n    return clbAutomator.ensureParameters(\n      descriptor, 'entities'\n    ).then(function() {\n      return clbStorage\n        .getEntity({collab: descriptor.collab || context.collab.id})\n        .then(function(projectEntity) {\n          var promises = {};\n          angular.forEach(descriptor.entities, function(value, name) {\n            if (angular.isString(value)) {\n              $log.debug(\"Copy entity with UUID\", value);\n              promises[name] = (\n                clbStorage.copy(value, projectEntity.uuid));\n            } else {\n              $log.warn('Invalid configuration for storage task', descriptor);\n            }\n          });\n          return $q.all(promises);\n        });\n    });\n  }\n});\n","/* eslint camelcase: 0 */\n\n/**\n * @namespace clbCollabApp\n * @memberof module:clb-collab\n * @desc\n * clbCollabApp can be used to find and work with the\n * registered HBP Collaboratory applications.\n */\nangular.module('clb-collab')\n.constant('folderAppId', '__collab_folder__')\n.service('clbCollabApp', function(\n  $q, clbAuthHttp, $cacheFactory,\n  clbError, clbEnv, clbResultSet\n) {\n  var appsCache = $cacheFactory('__appsCache__');\n  var urlBase = clbEnv.get('api.collab.v0') + '/extension/';\n  var apps = null;\n\n  /**\n   * @class App\n   * @desc client representation of an application\n   * @memberof module:clb-collab\n   * @param  {object} [attrs] a list of attributes to set to the App instance\n   */\n  var App = function(attrs) {\n    var self = this;\n    angular.forEach(attrs, function(v, k) {\n      self[k] = v;\n    });\n  };\n  App.prototype = {\n    /**\n     * Transform an App instance into an object reprensentation compatible with\n     * the backend schema. This object can then be easily converted to a JSON\n     * string.\n     * @memberof module:clb-collab.App\n     * @return {object} server representation of an App instance\n     */\n    toJson: function() {\n      return {\n        id: this.id,\n        description: this.description,\n        edit_url: this.editUrl,\n        run_url: this.runUrl,\n        title: this.title\n      };\n    }\n  };\n\n  /**\n   * Create an app instance from a server representation.\n   * @memberof module:clb-collab.App\n   * @param  {object} json converted from the server JSON string\n   * @return {App} the new App instance\n   */\n  App.fromJson = function(json) {\n    /* jshint camelcase: false */\n    return new App({\n      id: json.id,\n      deleted: json.deleted,\n      description: json.description,\n      editUrl: json.edit_url,\n      runUrl: json.run_url,\n      title: json.title,\n      createdBy: json.created_by\n    });\n  };\n\n  appsCache.put('__collab_folder__', {\n    id: '__collab_folder__',\n    title: 'Folder'\n  });\n\n  var loadAll = function(promise) {\n    return promise.then(function(rs) {\n      if (rs.hasNext) {\n        return loadAll(rs.next());\n      }\n      apps = rs.results;\n      return apps;\n    });\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabApp\n   * @return {Promise} promise of the list of all applications\n   */\n  var list = function() {\n    if (!apps) {\n      return loadAll(clbResultSet.get(clbAuthHttp.get(urlBase), {\n        factory: App.fromJson\n      }));\n    }\n    return $q.when(apps);\n  };\n\n  /**\n   * Retrieve an App instance from its id.\n   * @memberof module:clb-collab.clbCollabApp\n   * @param  {number} id the app id\n   * @return {Promise} promise of an app instance\n   */\n  var getById = function(id) {\n    if (!id) {\n      return $q.when(null);\n    }\n    var ext = appsCache.get(id);\n    if (ext) {\n      return $q.when(ext);\n    }\n    return clbAuthHttp.get(urlBase + id + '/').then(function(res) {\n      appsCache.put(id, App.fromJson(res.data));\n      return appsCache.get(id);\n    }, function(res) {\n      return $q.reject(clbError.httpError(res));\n    });\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabApp\n   * @param  {object} params query parameters\n   * @return {Promise} promise of an App instance\n   */\n  var findOne = function(params) {\n    return clbAuthHttp.get(urlBase, {params: params}).then(function(res) {\n      var results = res.data.results;\n      // Reject if more than one results\n      if (results.length > 1) {\n        return $q.reject(clbError.error({\n          type: 'TooManyResults',\n          message: 'Multiple apps has been retrieved ' +\n                   'when only one was expected.',\n          data: res.data\n        }));\n      }\n      // Null when no result\n      if (results.length === 0) {\n        return null;\n      }\n      // Build the app if exactly one result\n      var app = App.fromJson(results[0]);\n      appsCache.put(app.id, app);\n      return app;\n    }, clbError.rejectHttpError);\n  };\n\n  return {\n    list: list,\n    getById: getById,\n    findOne: findOne\n  };\n});\n","/* eslint camelcase:[2, {properties: \"never\"}] */\n\n/**\n * @namespace clbCollabNav\n * @memberof module:clb-collab\n * @desc clbCollabNav provides tools to create and manage\n *       navigation items.\n */\nangular.module('clb-collab')\n.service('clbCollabNav', function($q, clbAuthHttp, $log,\n    $cacheFactory, $timeout, orderByFilter, uuid4,\n    clbEnv, clbError) {\n  var collabApiUrl = clbEnv.get('api.collab.v0') + '/collab/';\n  // a cache with individual nav items\n  var cacheNavItems = $cacheFactory('navItem');\n\n  // a cache with the promises of each collab's nav tree root\n  var cacheNavRoots = $cacheFactory('navRoot');\n\n  /**\n   * @class NavItem\n   * @desc\n   * Client representation of a navigation item.\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {object} attr attributes of the new instance\n   */\n  var NavItem = function(attr) {\n    var self = this;\n    angular.forEach(attr, function(v, k) {\n      self[k] = v;\n    });\n    if (angular.isUndefined(this.context)) {\n      this.context = uuid4.generate();\n    }\n    if (angular.isUndefined(this.children)) {\n      this.children = [];\n    }\n  };\n  NavItem.prototype = {\n    /**\n     * @desc\n     * Return a server object representation that can be easily serialized\n     * to JSON and send to the backend.\n     * @memberof module:clb-collab.clbCollabNav.NavItem\n     * @return {object} server object representation\n     */\n    toJson: function() {\n      /* jshint camelcase: false */\n      return {\n        id: this.id,\n        app_id: this.appId,\n        collab: this.collabId,\n        name: this.name,\n        context: this.context,\n        order_index: this.order,\n        type: this.type || (this.folder ? 'FO' : 'IT'),\n        parent: this.parentId\n      };\n    },\n    /**\n     * @memberof module:clb-collab.clbCollabNav.NavItem\n     * @param  {object} attrs NavItem instance attributes\n     * @return {NavItemt} this instance\n     */\n    update: function(attrs) {\n      angular.forEach([\n        'id', 'name', 'children', 'context',\n        'collabId', 'appId', 'order', 'folder',\n        'parentId', 'type'\n      ], function(a) {\n        if (angular.isDefined(attrs[a])) {\n          this[a] = attrs[a];\n        }\n      }, this);\n\n      return this;\n    },\n    /**\n     * @memberof module:clb-collab.clbCollabNav.NavItem\n     * @return {NavItem} this instance\n     * @private\n     */\n    ensureCached: function() {\n      cacheNavItems.put(key(this.collabId, this.id), this);\n      return this;\n    }\n  };\n  /**\n   * Manage `acc` accumulator with all the data from jsonArray and return it.\n   *\n   * @param  {int} collabId  the collab ID\n   * @param  {array} jsonArray description of the children\n   * @param  {Array} acc       the accumulator\n   * @return {Array}           the children\n   */\n  function childrenFromJson(collabId, jsonArray, acc) {\n    acc = acc || [];\n    // an undefined array means we abort the process\n    // where an empty array will ensure the resulting array\n    // is empty as well.\n    if (angular.isUndefined(jsonArray)) {\n      return acc;\n    }\n\n    acc.length = 0;\n    angular.forEach(jsonArray, function(json) {\n      acc.push(NavItem.fromJson(collabId, json));\n    });\n    return acc;\n  }\n  /**\n   * Build an instance from the server object representation.\n   *\n   * @memberof module:clb-collab.clbCollabNav.NavItem\n   * @param  {number} collabId collab ID\n   * @param  {string} json server object representation\n   * @return {NavItem} new instance of NavItem\n   */\n  NavItem.fromJson = function(collabId, json) {\n    /* jshint camelcase: false */\n    var attrs = {\n      id: json.id,\n      appId: json.app_id,\n      collabId: collabId,\n      name: json.name,\n      context: json.context,\n      order: json.order_index,\n      folder: json.type === 'FO',\n      type: json.type,\n      parentId: json.parent,\n      children: childrenFromJson(collabId, json.children)\n    };\n    var k = key(collabId, attrs.id);\n    var cached = cacheNavItems.get(k);\n    if (cached) {\n      return cached.update(attrs);\n    }\n    return new NavItem(attrs).ensureCached();\n  };\n\n  /**\n   * Retrieve the root item of the given collab.\n   *\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {number} collabId collab ID\n   * @param  {boolean} refresh if true the nav root will not be loaded from cache\n   * @return {Promise} promise the root nav item\n   */\n  var getRoot = function(collabId, refresh) {\n    var treePromise = refresh ? null : cacheNavRoots.get(collabId);\n\n    if (!treePromise) {\n      treePromise = clbAuthHttp.get(collabApiUrl + collabId + '/nav/all/').then(\n        function(resp) {\n          var root;\n          var i;\n          var item;\n          var data = orderByFilter(resp.data, '+order_index');\n\n          // fill in the cache\n          for (i = 0; i !== data.length; ++i) {\n            item = NavItem.fromJson(collabId, data[i]);\n            if (item.context === 'root') {\n              root = item;\n            }\n          }\n\n          // link children and parents\n          for (i = 0; i !== data.length; ++i) {\n            item = cacheNavItems.get(key(collabId, data[i].id));\n            if (item.parentId) {\n              var parent = cacheNavItems.get(key(collabId, item.parentId));\n              parent.children.push(item);\n            }\n          }\n\n          return root;\n        },\n        clbError.rejectHttpError\n      );\n\n      cacheNavRoots.put(collabId, treePromise);\n    }\n\n    return treePromise;\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {number} collabId collab ID\n   * @param  {number} nodeId   node ID\n   * @param  {refresh} refresh if true the nav root will not be loaded from cache\n   * @return {NavItem} the matching nav item\n   */\n  var getNode = function(collabId, nodeId, refresh) {\n    return getRoot(collabId, refresh).then(function() {\n      var k = key(collabId, nodeId);\n      var item = cacheNavItems.get(k);\n\n      if (!item) {\n        $log.error('unknown nav item', k);\n      }\n\n      return item;\n    });\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {str} ctx The context UUID\n   * @return {Promise}   The promise of a NavItem\n   */\n  var getNodeFromContext = function(ctx) {\n    var url = [\n      clbEnv.get('api.collab.v0'),\n      'collab/context',\n      ctx\n    ].join('/') + '/';\n    return clbAuthHttp.get(url)\n    .then(function(res) {\n      var nav = NavItem.fromJson(res.data.collab.id, res.data);\n      var k = key(nav.collabId, nav.id);\n      if (cacheNavItems.get(k)) {\n        nav = cacheNavItems.get(k).update(nav);\n      } else {\n        cacheNavItems.put(k, nav);\n      }\n      return nav;\n    }, function(res) {\n      return $q.reject(clbError.rejectHttpError(res));\n    });\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {number} collabId collab ID\n   * @param  {number} navItem  the NavItem instance to add to the navigation\n   * @return {Promise} promise of the added NavItem instance\n   */\n  var addNode = function(collabId, navItem) {\n    return clbAuthHttp.post(collabApiUrl + collabId + '/nav/', navItem.toJson())\n    .then(function(resp) {\n      return NavItem.fromJson(collabId, resp.data);\n    }, clbError.rejectHttpError);\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {number} collabId collab ID\n   * @param  {NavItem} navItem the NavItem instance to remove from the navigation\n   * @return {Promise} promise of an undefined item at the end\n   */\n  var deleteNode = function(collabId, navItem) {\n    return clbAuthHttp.delete(\n      collabApiUrl + collabId + '/nav/' + navItem.id + '/')\n    .then(function() {\n      cacheNavItems.remove(key(collabId, navItem.id));\n      cacheNavRoots.remove(collabId);\n    }, clbError.rejectHttpError);\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {number} collabId collab ID\n   * @param  {NavItem} navItem the instance to update\n   * @return {Promise} promise the updated instance\n   */\n  var update = function(collabId, navItem) {\n    navItem.collabId = collabId;\n    return clbAuthHttp.put(collabApiUrl + collabId + '/nav/' +\n      navItem.id + '/', navItem.toJson())\n    .then(function(resp) {\n      return NavItem.fromJson(collabId, resp.data);\n    }, clbError.rejectHttpError);\n  };\n\n  // ordering operation needs to be globally queued to ensure consistency.\n  var insertQueue = $q.when();\n\n  /**\n   * Insert node in the three.\n   *\n   * A queue is used to ensure that the insert operation does not conflict\n   * on a single client.\n   *\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {int} collabId   id of the collab\n   * @param  {NavItem} navItem    Nav item instance\n   * @param  {NavItem} parentItem parent item\n   * @param  {int} insertAt   add to the menu\n   * @return {Promise}        a promise that will\n   *                          return the update nav item\n   */\n  function insertNode(collabId, navItem, parentItem, insertAt) {\n    return insertQueue.then(function() {\n      // first item order_index must be 1\n      navItem.order = (insertAt === -1 ? 1 : insertAt + 1);\n      navItem.parentId = parentItem.id;\n      return update(collabId, navItem);\n    });\n  }\n\n  /**\n   * Return a unique key for chaching a nav item.\n   * @param  {int} collabId collab ID\n   * @param  {int} nodeId   NavItem ID\n   * @return {string}       the unique key\n   * @private\n   */\n  function key(collabId, nodeId) {\n    return collabId + '--' + nodeId;\n  }\n\n  return {\n    NavItem: NavItem,\n    getRoot: getRoot,\n    getNode: getNode,\n    getNodeFromContext: getNodeFromContext,\n    addNode: addNode,\n    saveNode: update,\n    deleteNode: deleteNode,\n    insertNode: insertNode\n  };\n});\n","angular.module('clb-collab')\n.factory('clbCollabTeamRole', clbCollabTeamRole);\n\n/**\n * @namespace clbCollabTeamRole\n * @memberof module:clb-collab\n * @param  {object} clbAuthHttp    Angular DI\n * @param  {object} $log     Angular DI\n * @param  {object} $q       Angular DI\n * @param  {object} clbEnv   Angular DI\n * @param  {object} clbError Angular DI\n * @return {object}          Angular Service\n */\nfunction clbCollabTeamRole(clbAuthHttp, $log, $q, clbEnv, clbError) {\n  var urlBase = clbEnv.get('api.collab.v0');\n  var collabUrl = urlBase + '/collab/';\n  var rolesCache = {};\n\n  return {\n    get: get,\n    set: set\n  };\n\n  /**\n   * Retrieve the role of a user.\n   * @param  {int}    collabId  Collab ID\n   * @param  {string} userId    User ID\n   * @return {string}           The user role\n   */\n  function get(collabId, userId) {\n    if (!userId) {\n      $log.error('Must provide userId: ', collabId, userId);\n      return;\n    }\n    if (!rolesCache[collabId]) {\n      rolesCache[collabId] = {};\n    }\n    if (rolesCache[collabId] && rolesCache[collabId][userId]) {\n      return $q.when(rolesCache[collabId][userId]);\n    }\n    return clbAuthHttp.get(collabUrl + collabId + '/team/role/' + userId + '/')\n    .then(function(res) {\n      rolesCache[collabId][userId] = res.data.role;\n      return $q.when(rolesCache[collabId][userId]);\n    }, function(res) {\n      if (res.status === 404) {\n        rolesCache[collabId][userId] = undefined;\n        return $q.when(rolesCache[collabId][userId]);\n      }\n      clbError.rejectHttpError(res);\n    });\n  }\n\n  /**\n   * Set the role of a User within a Collab.\n   * @param {int} collabId    Collab ID\n   * @param {string} userId   User ID\n   * @param {string} role     Role description\n   * @return {Promise}        Resolve when the role is set.\n   */\n  function set(collabId, userId, role) {\n    var thisUrl = collabUrl + collabId + '/team/role/' + userId + '/';\n    if (rolesCache[collabId] && rolesCache[collabId][userId]) {\n      rolesCache[collabId][userId] = role;\n      return clbAuthHttp.put(thisUrl, {role: role})\n      .catch(function(resp) {\n        if (resp.status === 404) { // should have been a POST...\n          return clbAuthHttp.post(thisUrl, {role: role})\n          .catch(clbError.rejectHttpError);\n        }\n        return clbError.rejectHttpError(resp);\n      });\n    }\n    if (!rolesCache[collabId]) {\n      rolesCache[collabId] = {};\n    }\n    rolesCache[collabId][userId] = role;\n    return clbAuthHttp.post(thisUrl, {role: role})\n    .catch(clbError.rejectHttpError);\n  }\n}\n","angular.module('clb-collab')\n.factory('clbCollabTeam', clbCollabTeam);\n\n/**\n * Angular client to access Collab Team REST endpoint.\n *\n * @namespace clbCollabTeam\n * @memberof module:clb-collab\n * @param  {object} clbAuthHttp             Angular DI\n * @param  {object} $log              Angular DI\n * @param  {object} $q                Angular DI\n * @param  {object} lodash            Angular DI\n * @param  {object} clbEnv            Angular DI\n * @param  {object} clbError          Angular DI\n * @param  {object} clbCollabTeamRole Angular DI\n * @param  {object} clbUser           Angular DI\n * @return {object}                   Angular Service\n */\nfunction clbCollabTeam(\n  clbAuthHttp,\n  $log,\n  $q,\n  lodash,\n  clbEnv,\n  clbError,\n  clbCollabTeamRole,\n  clbUser\n) {\n  var urlBase = clbEnv.get('api.collab.v0');\n  var collabUrl = urlBase + '/collab/';\n\n  return {\n    add: add,\n    delete: remove, // backward compatibility\n    remove: remove,\n    list: list,\n    userInTeam: userInTeam,\n    roles: clbCollabTeamRole // backward compatibility\n  };\n\n  /**\n   * Add a team member to a Collab.\n   * @param  {int} collabId the Collab id\n   * @param  {string} userId the User id\n   * @return {Promise} resolve after the user has been added\n   */\n  function add(collabId, userId) {\n    return clbAuthHttp.put(collabUrl + collabId + '/team/', {\n      users: [userId]\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Remove a team member from a Collab.\n   * @param  {int} collabId the Collab id\n   * @param  {string} userId the User id\n   * @return {Promise} resolve after the user has been added\n   */\n  function remove(collabId, userId) {\n    return clbAuthHttp({\n      method: 'DELETE',\n      url: collabUrl + collabId + '/team/',\n      data: {users: [userId]},\n      headers: {'Content-Type': 'application/json'}\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * List team members from the Collab.\n   * @param  {int} collabId The collab ID\n   * @return {Promise}      Resolve to an array of user with injected membership\n   *                        informations.\n   */\n  function list(collabId) {\n    return clbAuthHttp.get(collabUrl + collabId + '/team/')\n    .then(function(res) {\n      var indexedTeam = lodash.keyBy(res.data, 'user_id');\n      return clbUser.list({\n        pageSize: 0,\n        filter: {\n          id: lodash.keys(indexedTeam)\n        }\n      }).then(function(data) {\n        return lodash.reduce(data.results, function(res, user) {\n          var membershipInfo = indexedTeam[parseInt(user.id, 10)];\n          if (membershipInfo) {\n            res.push(angular.extend({}, user, {\n              membershipId: membershipInfo.user_id,\n              role: membershipInfo.role\n            }));\n          }\n          return res;\n        }, []);\n      });\n    }, clbError.rejectHttpError);\n  }\n\n  /**\n   * Return true if the current user is in the team\n   * @param  {int} collabId The collab ID\n   * @return {Promise}      Resolve to a boolean\n   */\n  function userInTeam(collabId) {\n    return clbUser.getCurrentUserOnly().then(function(me) {\n      return clbAuthHttp.get(collabUrl + collabId + '/team/')\n      .then(function(list) {\n        return lodash.keyBy(\n          list.data, 'user_id')[parseInt(me.id, 10)] !== undefined;\n      });\n    });\n  }\n}\n","angular.module('clb-collab')\n.factory('ClbCollabModel', function() {\n  /**\n   * Representation of a Collab.\n   * @memberof module:clb-collab\n   * @param {object} [attributes] initial values\n   */\n  function ClbCollabModel(attributes) {\n    if (!attributes) {\n      attributes = {};\n    }\n    this.id = attributes.id;\n    this.created = attributes.created || null;\n    this.edited = attributes.edited || null;\n    this.title = attributes.title || '';\n    this.content = attributes.content || '';\n    this.private = attributes.private || false;\n    this.deleted = attributes.deleted || null;\n  }\n  ClbCollabModel.prototype = {\n    toJson: function() {\n      return {\n        id: this.id,\n        title: this.title,\n        content: this.content,\n        private: this.private\n      };\n    },\n    update: function(attrs) {\n      angular.forEach(['id', 'title', 'content', 'private'], function(a) {\n        if (attrs[a] !== undefined) {\n          this[a] = attrs[a];\n        }\n      }, this);\n    }\n  };\n  ClbCollabModel.fromJson = function(json) {\n    if (json.toJson) {\n      return json;\n    }\n    var c = new ClbCollabModel(json);\n    return c;\n  };\n  return ClbCollabModel;\n});\n","/* eslint camelcase:0 */\nangular.module('clb-collab')\n.factory('clbCollab', clbCollab);\n\n/**\n * @namespace clbCollab\n * @memberof module:clb-collab\n * @desc\n * Provide a javascript client to query the Collab REST service.\n *\n * @param  {object} $log             Angular injection\n * @param  {object} $q               Angular injection\n * @param  {object} $cacheFactory    Angular injection\n * @param  {object} clbAuthHttp            Angular injection\n * @param  {object} lodash           Angular injection\n * @param  {object} clbContext       Angular injection\n * @param  {object} clbEnv           Angular injection\n * @param  {object} clbError         Angular injection\n * @param  {object} clbResultSet     Angular injection\n * @param  {object} clbUser          Angular injection\n * @param  {object} ClbCollabModel   Angular injection\n * @param  {object} ClbContextModel  Angular injection\n * @return {object}                  Angular Service\n */\nfunction clbCollab(\n  $log,\n  $q,\n  $cacheFactory,\n  clbAuthHttp,\n  lodash,\n  clbContext,\n  clbEnv,\n  clbError,\n  clbResultSet,\n  clbUser,\n  ClbCollabModel,\n  ClbContextModel\n) {\n  var urlBase = clbEnv.get('api.collab.v0');\n  var collabUrl = urlBase + '/collab/';\n  var myCollabsUrl = urlBase + '/mycollabs/';\n  var collabCache = $cacheFactory('clbCollabInstances');\n  var ongoingCollabGetRequests = {};\n\n  return {\n    Collab: ClbCollabModel,   // backward compatibility\n    Context: ClbContextModel, // backward compatibility\n    context: clbContext,      // backward compatibility\n    get: get,\n    getByLabel: getByLabel,\n    list: list,\n    mine: mine,\n    create: create,\n    save: save,\n    delete: deleteCollab\n  };\n\n  /**\n   * Retrieve the promise of an ongoing request if it exists.\n   * @param  {string} key caching key\n   * @return {Promise}    the existing promise\n   * @private\n   */\n  function getPromiseFromCache(key) {\n    var collab = collabCache.get(key);\n    if (collab) {\n      return $q.when(collab);\n    }\n    if (ongoingCollabGetRequests[key]) {\n      return ongoingCollabGetRequests[key];\n    }\n  }\n\n  /**\n   * Retrieve a collab.\n   * @param  {string} url [description]\n   * @param  {string} key cache key to retrieve\n   * @return {Promise}    Resolve to a collab\n   * @private\n   */\n  function getter(url, key) {\n    if (!key) {\n      return $q.reject(clbError.error({message: 'id parameter is required'}));\n    }\n\n    var promise = getPromiseFromCache(key);\n    if (promise) {\n      return promise;\n    }\n\n    ongoingCollabGetRequests[key] = clbAuthHttp.get(url + key + '/')\n    .then(function(res) {\n      ongoingCollabGetRequests[key] = null;\n      return ClbCollabModel.fromJson(res.data);\n    }, function(res) {\n      ongoingCollabGetRequests[key] = null;\n      return clbError.rejectHttpError(res);\n    });\n    return ongoingCollabGetRequests[key];\n  }\n\n  /**\n   * Retrieve a collab given its id.\n   * @param  {int} id the Collab ID\n   * @return {Promise}    Will resolve to a ClbCollabModel\n   */\n  function get(id) {\n    id = (id && id.id) || id;\n    return getter(collabUrl, id).then(function(collab) {\n      collabCache.put(collab.id, collab);\n      return collab;\n    });\n  }\n\n  /**\n   * Ensure the collab is in cache for the given label.\n   * @param  {ClbCollabModel} collab instance to cache\n   * @param  {string} label   the label\n   * @return {ClbCollabModel} the cached collab\n   * @private\n   */\n  function cacheCollabWithLabel(collab, label) {\n    // ensure the collab is in cache for this label\n    // to avoid duplicate reference for it.\n    if (!collab._label) {\n      collab._label = label;\n      collabCache.put(label, collab);\n      collabCache.put(collab.id, collab);\n    }\n    return collab;\n  }\n\n  /**\n   * Retrieve a collab using a string label.\n   * @param  {string} label the label associated to the Collab\n   * @return {Promise}      will resolve to a ClbCollabModel instance\n   */\n  function getByLabel(label) {\n    return getter(urlBase + '/r/', label).then(function(collab) {\n      // Ensure the collab has not been fetched by id already.\n      // This might occurs if the collab was fetched by id the first\n      // time. In this case, no way to know its associated label.\n      var promise = getPromiseFromCache(collab.id);\n      if (promise) {\n        return promise.then(function(c) {\n          return cacheCollabWithLabel(c, label);\n        });\n      }\n      return cacheCollabWithLabel(collab, label);\n    });\n  }\n\n  /**\n   * @name list\n   * @desc\n   * list return the a hbpUtil.ResultSet instance containing the collab\n   * matching the given parameters.\n   *\n   * @param {Object} [options] the request options\n   * @param {string} [options.search] search string to filter the results\n   * @param {(string|string[])} [options.id] string or array of collab ids\n   * @param {int}  [options.pageSize=25] number of result per page\n   * @param {int}  [options.page] the page to retrive\n   * @param {Object} [options.params] DEPRECATED any query parameter\n   * @param {string} [options.url] DEPRECATED overide the default URL\n   * @return {hbpUtil.ResultSet} a result set of results\n   */\n  function list(options) {\n    var url = collabUrl;\n    var request;\n    // support old signature (url, options)\n    if (angular.isString(options)) {\n      url = options;\n      options = arguments[1];\n    }\n    options = angular.extend({}, options);\n\n    if (angular.isArray(options.id)) {\n      options.id = options.id.join(',');\n    }\n\n    if (options.pageSize) {\n      options.page_size = options.pageSize;\n    }\n\n    if (options.url) { // Deprecated URL support\n      request = clbAuthHttp.get(options.url);\n    } else {\n      request = clbAuthHttp.get(url, {\n        params: angular.extend(\n          {},\n          options.params,\n          lodash.pick(options, ['search', 'id', 'page_size', 'page'])\n        )\n      });\n    }\n    return clbResultSet.get(request, {\n      resultsFactory: resultsFactory\n    });\n  }\n\n  /**\n   * @name mine\n   * @description\n   * `mine` return a hbpUtil.ResultSet of the user collabs.\n   *\n   * @param {Object} [options] request options\n   * @param {string} [options.search] search string to filter the results\n   * @param {int}  [options.pageSize] number of result per page\n   * @param {int}  [options.page] the page to retrive\n   * @return {hbpUtil.ResultSet} the current user collabs\n   */\n  function mine(options) {\n    options = angular.extend({}, options);\n    var params = angular.extend({}, lodash.pick(options, ['search']));\n    return clbResultSet.get(clbAuthHttp.get(myCollabsUrl, {params: params}), {\n      resultsFactory: resultsFactory\n    });\n  }\n\n  /**\n   * Create a new collab using a model instance or the server data representation.\n   * @param  {object|ClbCollabModel} jsonCollab JSON representation of the new collab\n   * @return {Promise}           Resolve to the new Collab\n   */\n  function create(jsonCollab) {\n    var c = ClbCollabModel.fromJson(jsonCollab);\n    return clbAuthHttp.post(collabUrl, c.toJson()).then(function(res) {\n      c.update(res.data);\n      collabCache.put(c.id, c);\n      return c;\n    }, clbError.rejectHttpError);\n  }\n\n  /**\n   * Save a collab using its JSON server representation or a collab instance.\n   * @param  {object|ClbCollabModel} jsonCollab JSON representation of a Collab\n   * @return {Promise}           resolve to the Collab instance.\n   */\n  function save(jsonCollab) {\n    var c = ClbCollabModel.fromJson(jsonCollab);\n    return clbAuthHttp.put(collabUrl + c.id + '/', c.toJson())\n    .then(function(res) {\n      c.update(res.data);\n      collabCache.put(c.id, c);\n      return c;\n    }, clbError.rejectHttpError);\n  }\n\n  /**\n   * @function delete\n   * @desc\n   * Delete the collab.\n   * @param  {ClbCollabModel} collab The collab instance to delete\n   * @return {Promise}       Resolve once the delete operation is completed\n   */\n  function deleteCollab(collab) {\n    return clbAuthHttp.delete(collabUrl + collab.id + '/').then(\n      function() {\n        collabCache.remove(collab.id);\n        if (collab._label) {\n          collabCache.remove(collab._label);\n        }\n      }, clbError.rejectHttpError\n    );\n  }\n\n  /**\n   * Build the instance from a result list.\n   *\n   * @param  {array} results Array of object\n   * @return {array}         Array of Collab\n   */\n  function resultsFactory(results) {\n    return lodash.map(results, ClbCollabModel.fromJson);\n  }\n}\n","angular.module('clb-collab')\n.factory('ClbContextModel', function(ClbCollabModel) {\n  /**\n   * Representation of a Collab Context.\n   * @memberof module:clb-collab\n   */\n  function ClbContextModel() {}\n  ClbContextModel.fromJson = function(json) {\n    var c = new ClbContextModel();\n    c.context = json.context;\n    c.appId = json.app_id;\n    c.name = json.name;\n    c.navId = json.id;\n    c.collab = ClbCollabModel.fromJson(json.collab);\n    c.toJson = function() {\n      return {\n        context: json.context,\n        appId: json.app_id,\n        name: c.name\n      };\n    };\n    return c;\n  };\n  return ClbContextModel;\n});\n","angular.module('clb-collab')\n.factory('clbContext', clbContext);\n\n/**\n * @namespace clbContext\n * @memberof module:clb-collab\n * @param  {object} clbAuthHttp             Angular DI\n * @param  {object} $q                Angular DI\n * @param  {object} clbError          Angular DI\n * @param  {object} clbEnv            Angular DI\n * @param  {class}  ClbContextModel   Angular DI\n * @return {object}                   the service\n */\nfunction clbContext(clbAuthHttp, $q, clbError, clbEnv, ClbContextModel) {\n  var ongoingContextRequests = {};\n  var urlBase = clbEnv.get('api.collab.v0');\n  var collabUrl = urlBase + '/collab/';\n  var contextUrl = collabUrl + 'context/';\n\n  return {\n    get: get\n  };\n\n  /**\n   * @memberof module:clb-collab.clbContext\n   * @param  {string} uuid UUID of the context\n   * @return {Promise}     Resolve to the ClbContextModel instance\n   */\n  function get(uuid) {\n    if (!uuid) {\n      return $q.reject(clbError.error({\n        message: 'uuid parameter is required'\n      }));\n    }\n    // return the promise of an ongoing request\n    if (ongoingContextRequests[uuid]) {\n      return ongoingContextRequests[uuid];\n    }\n    // proceed to the request\n    ongoingContextRequests[uuid] =\n      clbAuthHttp.get(contextUrl + uuid + '/', {cache: true})\n    .then(function(res) {\n      ongoingContextRequests[uuid] = null;\n      return ClbContextModel.fromJson(res.data);\n    }, function(res) {\n      ongoingContextRequests[uuid] = null;\n      return clbError.rejectHttpError(res);\n    });\n    return ongoingContextRequests[uuid];\n  }\n}\n","angular.module('clb-ctx-data')\n.factory('clbCtxData', clbCtxData);\n\n/**\n * A service to retrieve data for a given ctx. This is a convenient\n * way to store JSON data for a given context. Do not use it for\n * Sensitive data. There is no data migration functionality available, so if\n * the expected data format change, you are responsible to handle the old\n * format on the client side.\n *\n * @namespace clbCtxData\n * @memberof clb-ctx-data\n * @param  {object} clbAuthHttp    Angular DI\n * @param  {object} $q       Angular DI\n * @param  {object} uuid4     Angular DI\n * @param  {object} clbEnv   Angular DI\n * @param  {object} clbError Angular DI\n * @return {object}          Angular Service Descriptor\n */\nfunction clbCtxData(clbAuthHttp, $q, uuid4, clbEnv, clbError) {\n  var configUrl = clbEnv.get('api.collab.v0') + '/config/';\n  return {\n    /**\n     * Return an Array or an Object containing the data or\n     * ``undefined`` if there is no data stored.\n     * @memberof module:clb-ctx-data.clbCtxData\n     * @param  {UUID} ctx   the current context UUID\n     * @return {Promise}    fullfil to {undefined|object|array}\n     */\n    get: function(ctx) {\n      if (!uuid4.validate(ctx)) {\n        return $q.reject(invalidUuidError(ctx));\n      }\n      return clbAuthHttp.get(configUrl + ctx + '/')\n      .then(function(res) {\n        try {\n          return angular.fromJson(res.data.content);\n        } catch (ex) {\n          return $q.reject(clbError.error({\n            type: 'InvalidData',\n            message: 'Cannot parse JSON string: ' + res.data.content,\n            code: -2,\n            data: {\n              cause: ex\n            }\n          }));\n        }\n      })\n      .catch(function(err) {\n        if (err.code === 404) {\n          return;\n        }\n        return clbError.rejectHttpError(err);\n      });\n    },\n\n    /**\n     * @memberof module:clb-ctx-data.clbCtxData\n     * @param  {UUID} ctx The context UUID\n     * @param  {array|object|string|number} data JSON serializable data\n     * @return {Promise} Return the data when fulfilled\n     */\n    save: function(ctx, data) {\n      if (!uuid4.validate(ctx)) {\n        return $q.reject(invalidUuidError(ctx));\n      }\n      return clbAuthHttp.put(configUrl + ctx + '/', {\n        context: ctx,\n        content: angular.toJson(data)\n      }).then(function() {\n        return data;\n      })\n      .catch(clbError.rejectHttpError);\n    },\n\n    /**\n     * @memberof module:clb-ctx-data.clbCtxData\n     * @param  {UUID} ctx The context UUID\n     * @return {Promise}  fulfilled once deleted\n     */\n    delete: function(ctx) {\n      if (!uuid4.validate(ctx)) {\n        return $q.reject(invalidUuidError(ctx));\n      }\n      return clbAuthHttp.delete(configUrl + ctx + '/')\n      .then(function() {\n        return true;\n      })\n      .catch(clbError.rejectHttpError);\n    }\n  };\n\n  /**\n   * Generate the appropriate error when context is invalid.\n   * @param  {any} badCtx  the wrong ctx\n   * @return {HbpError}    The Error\n   */\n  function invalidUuidError(badCtx) {\n    return clbError.error({\n      type: 'InvalidArgument',\n      message: 'Provided ctx must be a valid UUID4 but is: ' + badCtx,\n      data: {\n        argName: 'ctx',\n        argPosition: 0,\n        argValue: badCtx\n      },\n      code: -3\n    });\n  }\n}\n","/* global window */\n\nangular.module('clb-env')\n.provider('clbEnv', clbEnv);\n\n/**\n * Get environement information using dotted notation with the `clbEnv` provider\n * or service.\n *\n * Before being used, clbEnv must be initialized with the context values. You\n * can do so by setting up a global bbpConfig variable or using\n * :ref:`angular.clbBootstrap <angular.clbBootstrap>`.\n *\n * @function clbEnv\n * @memberof module:clb-env\n * @param {object} $injector AngularJS injection\n * @return {object} provider\n * @example <caption>Basic usage of clbEnv</caption>\n * angular.module('myApp', ['clbEnv', 'rest'])\n * .service('myService', function(clbEnv, clbResultSet) {\n *   return {\n *     listCollab: function() {\n *       // return a paginated list of all collabs\n *       return clbResultSet.get($http.get(clbEnv.get('api.collab.v0') + '/'));\n *     }\n *   };\n * });\n * @example <caption>Use clbEnv in your configuration</caption>\n * angular.module('myApp', ['clbEnv', 'rest'])\n * .config(function(clbEnvProvider, myAppServiceProvider) {\n *   // also demonstrate how we accept a custom variable.\n *   myAppServiceProvider.setMaxFileUpload(clbEnvProvider.get('myapp.maxFileUpload', '1m'))\n * });\n */\nfunction clbEnv($injector) {\n  return {\n    get: get,\n    $get: function() {\n      return {\n        get: get\n      };\n    }\n  };\n\n  /**\n   * ``get(key, [defaultValue])`` provides configuration value loaded at\n   * the application bootstrap.\n   *\n   * Accept a key and an optional default\n   * value. If the key cannot be found in the configurations, it will return\n   * the provided default value. If the defaultValue is undefied, it will\n   * throw an error.\n   *\n   * To ensures that those data are available when angular bootstrap the\n   * application, use angular.clbBootstrap(module, options).\n   *\n   * @memberof module:clb-env.clbEnv\n   * @param {string} key the environment variable to retrieve, using a key.\n   * @param {any} [defaultValue] an optional default value.\n   * @return {any} the value or ``defaultValue`` if the asked for configuration\n   *               is not defined.\n   */\n  function get(key, defaultValue) {\n    var parts = key.split('.');\n    var cursor = (window.bbpConfig ?\n                  window.bbpConfig : $injector.get('CLB_ENVIRONMENT'));\n    for (var i = 0; i < parts.length; i++) {\n      if (!(cursor && cursor.hasOwnProperty(parts[i]))) {\n        if (defaultValue !== undefined) {\n          return defaultValue;\n        }\n        throw new Error('UnkownConfigurationKey: <' + key + '>');\n      }\n      cursor = cursor[parts[i]];\n    }\n    return cursor;\n  }\n}\n","/* global document */\n\nangular.module('clb-error')\n.factory('clbError', clbError);\n\n/**\n * @class ClbError\n * @memberof module:clb-error\n * @desc\n * ``ClbError`` describes a standard error object used\n * to display error message or intropect the situation.\n *\n * A ``ClbError`` instance provides the following properties:\n *\n * * ``type`` a camel case name of the error type.\n * * `message` a human readable message of the error that should\n * be displayed to the end user.\n * * ``data`` any important data that might help the software to\n * inspect the issue and take a recovering action.\n * * ``code`` an error numerical code.\n *\n * The ClbError extends the native Javascript Error instance so it also provides:\n * * ``name`` which is equal to the type\n * * ``stack`` the stack trace of the error (when available)\n *\n * Only ``type``, ``message``, and ``code`` should be considered to be present.\n * They receive default values when not specified by the situation.\n *\n * @param {object} [options] the parameters to use to build the error\n * @param {string} [options.type] the error type (default to ``'UnknownError'``)\n * @param {string} [options.message] the error message (default to ``'An unknown error occurred'``)\n * @param {int} [options.code] the error code (default to ``-1``)\n * @param {object} [options.data] any data that can be useful to deal with the error\n */\nfunction ClbError(options) {\n  options = angular.extend({\n    type: 'UnknownError',\n    message: 'An unknown error occurred.',\n    code: -1\n  }, options);\n  this.type = options.type || options.name;\n  this.name = this.type; // Conform to Error class\n  this.message = options.message;\n  this.data = options.data;\n  this.code = options.code;\n  this.stack = (new Error()).stack;\n  if (options instanceof Error) {\n    // in case this is a javascript exception, keep the raw cause in data.cause\n    this.data = angular.extend({cause: options}, this.data);\n  }\n}\n// Extend the Error prototype\nClbError.prototype = Object.create(Error.prototype);\nClbError.prototype.toString = function() {\n  return String(this.type) + ':' + this.message;\n};\n\n/**\n * @namespace clbError\n * @memberof module:clb-error\n * @desc\n * ``clbError`` provides helper functions that all return an\n * ``ClbError`` instance given a context object.\n * @param {object} $q AngularJS injection\n * @return {object} the service singleton\n */\nfunction clbError($q) {\n  return {\n    rejectHttpError: function(err) {\n      return $q.reject(httpError(err));\n    },\n    httpError: httpError,\n\n    /**\n     * Build a ``ClbError`` instance from the provided options.\n     *\n     * - param  {Object} options argument passed to ``ClbError`` constructor\n     * - return {ClbError} the resulting error\n     * @memberof module:clb-error.clbError\n     * @param  {object} options [description]\n     * @return {object}         [description]\n     */\n    error: function(options) {\n      if (options && options instanceof ClbError) {\n        return options;\n      }\n      return new ClbError(options);\n    }\n  };\n\n  /**\n   * @desc\n   * return a `ClbError` instance built from a HTTP response.\n   *\n   * In an ideal case, the response contains json data with an error object.\n   * It also fallback to a reason field and fill default error message for\n   * standard HTTP status error.\n   * @memberof module:clb-error.clbError\n   * @param  {HttpResponse} response Angular $http Response object\n   * @return {ClbError} a valid ClbError\n   */\n  function httpError(response) {\n    // return argument if it is already an\n    // instance of ClbError\n    if (response && response instanceof ClbError) {\n      return response;\n    }\n\n    if (response.status === undefined) {\n      return new ClbError({\n        message: 'Cannot parse error, invalid format.'\n      });\n    }\n    var error = new ClbError({code: response.status});\n\n    if (error.code === 0) {\n      error.type = 'ClientError';\n      error.message = 'The client cannot run the request.';\n      return error;\n    }\n    if (error.code === 404) {\n      error.type = 'NotFound';\n      error.message = 'Resource not found';\n      return error;\n    }\n    if (error.code === 403) {\n      error.type = 'Forbidden';\n      error.message = 'Permission denied: you are not allowed to display ' +\n                      'the page or perform the operation';\n      return error;\n    }\n    if (error.code === 502) {\n      error.type = 'BadGateway';\n      error.message = '502 Bad Gateway Error';\n      if (response.headers('content-type') === 'text/html') {\n        var doc = document.createElement('div');\n        doc.innerHTML = response.data;\n        var titleNode = doc.getElementsByTagName('title')[0];\n        if (titleNode) {\n          error.message = titleNode.innerHTML;\n        }\n      }\n      return error;\n    }\n    if (response.data) {\n      var errorSource = response.data;\n      if (errorSource.error) {\n        errorSource = errorSource.error;\n      }\n      if (errorSource.type) {\n        error.type = errorSource.type;\n      }\n      if (errorSource.data) {\n        error.data = errorSource.data;\n      }\n      if (errorSource.message) {\n        error.message = errorSource.message;\n      } else if (errorSource.reason) {\n        error.type = 'Error';\n        error.message = errorSource.reason;\n      }\n\n      if (!errorSource.type && !errorSource.data &&\n        !errorSource.message && !errorSource.reason) {\n        // unkown format, return raw data\n        error.data = errorSource;\n      }\n    }\n    return error;\n  }\n}\n","angular.module('clb-rest')\n.factory('clbResultSet', clbResultSet);\n\n/**\n * @namespace clbResultSet\n * @memberof module:clb-rest\n * @param  {object} clbAuthHttp           Angular DI\n * @param  {object} $q              Angular DI\n * @param  {object} clbError Angular DI\n * @return {object}                 Angular Service\n */\nfunction clbResultSet(clbAuthHttp, $q, clbError) {\n  /**\n   * @attribute ResultSetEOL\n   * @memberof module:clb-rest.clbResultSet\n   * @desc error thrown when module:clb-rest.ResultSet is crawled when at an\n   *       extremity.\n   */\n  var ResultSetEOL = clbError.error({\n    type: 'ResultSet::EOL',\n    message: 'End of list reached'\n  });\n\n  return {\n    get: getPaginatedResultSet,\n    EOL: ResultSetEOL\n  };\n\n  /**\n   * @name get\n   * @memberof module:clb-rest.clbResultSet\n   * @desc\n   * Return a promise that will resolve once the result set first page is loaded.\n   *\n   * The promise contains the `instance` of the result set as well.\n   *\n   * @param  {Object} res     a HTTPResponse or a promise which resolve to a HTTPResponse\n   * @param  {Object} [options] configuration\n   * @param  {string} [options.nextUrlKey] name of (or dot notation path to) the attribute containing the URL to fetch next results\n   * @param  {function} [options.hasNextHandler] A function that receive the JSON data as its first argument and must\n   *                                             return a boolean value that will be assigned to the ``hasNext`` property.\n   *                                             When this option is given, ``options.nextUrlHandler`` SHOULD be defined as well.\n   * @param  {function} [options.nextHandler] A function that receive the JSON data as its first argument and must return a promise\n   *                                          to the next results. This handler will be called when ``next()`` is called on the\n   *                                          RecordSet.\n   *                                          When this option is given ``options.hasNextHandler`` MUST be defined as well.\n   *                                          When this option is given ``options.nextUrlKey`` is ignored.\n   * @param  {string} [options.previousUrlKey] name of (or dot notation path to) the attribute containing the URL to fetch previous results\n   * @param  {function} [options.hasPreviousHandler] A function that receive the JSON data as its first argument and must\n   *                                                 return a boolean value that will be assigned to the ``hasPrevious`` property.\n   *                                                 When this option is given, ``options.previousUrlHandler`` SHOULD be defined as well.\n   * @param  {function} [options.previousHandler] A function that receive the JSON data as its first argument and must return a string value\n   *                                              that represent the previous URL that will be fetched by a call to ``.previous()``.\n   *                                              When this option is given ``options.hasPreviousHandler`` MUST be defined as well.\n   *                                              When this option is given ``options.previousUrlKey`` is ignored.\n   * @param  {string} [options.resultKey] name of (or dot notation path to) the attribute containing an array with all the results\n   * @param  {string} [options.countKey] name of (or dot notation path to) the attribute containing the number of results returned\n   * @param  {function} [options.resultsFactory] a function to which a new array of results is passed.\n   *                    The function can return ``undefined``, a ``Promise`` or an ``array`` as result.\n   * @return {Promise} After the promise is fulfilled, it will return a new instance of :doc:`module-clb-rest.clbResultSet.ResultSet`.\n   */\n  function getPaginatedResultSet(res, options) {\n    return new ResultSet(res, options).promise;\n  }\n\n  /**\n   * @class ResultSet\n   * @memberof module:clb-rest.clbResultSet\n   * @desc\n   * Build a result set with internal support for fetching next and previous results.\n   *\n   * @param {Object} pRes the promise of the first result page\n   * @param {Object} options various options to specify how to handle the pagination\n   * @see {module:clb-rest.clbResultSet.get}\n   */\n  function ResultSet(pRes, options) {\n    var self = this;\n    // Hold call to next and previous when using customization.\n    var wrappedNextCall;\n    var wrappedPreviousCall;\n\n    /**\n     * The array containing all fetched results. Previous pages are added\n     * to the beginning of the results, next pages at the end.\n     * @type {array}\n     */\n    self.results = [];\n    /**\n     * Define with the last ClbError instance that occured.\n     * @type {module:clb-error.ClbError}\n     */\n    self.error = null;\n    /**\n     * ``true`` if there is more results to be loaded.\n     * @type {Boolean}\n     */\n    self.hasNext = null;\n    /**\n     * ``true`` if there is previous page to be loaded.\n     * @type {Boolean}\n     */\n    self.hasPrevious = null;\n    /**\n     * The promise associated with the last operation in the queue.\n     * @type {Promise}\n     */\n    self.promise = null;\n    /**\n     * A function that handle any error during an operation.\n     * @type {Function}\n     */\n    self.errorHandler = null;\n    self.next = enqueue(next);\n    self.previous = enqueue(previous);\n    self.toArray = enqueue(toArray);\n    self.all = enqueue(all);\n    self.count = -1;\n\n    options = angular.extend({\n      resultKey: 'results',\n      nextUrlKey: 'next',\n      hasNextHandler: function(rs) {\n        // by default, has next is defined if the received data\n        // defines a next URL.\n        return Boolean(at(rs, options.nextUrlKey));\n      },\n      previousUrlKey: 'previous',\n      hasPreviousHandler: function(rs) {\n        // by default, has previous is defined if the received data\n        // defines a next URL.\n        return Boolean(at(rs, options.previousUrlKey));\n      },\n      countKey: 'count'\n    }, options);\n\n    self.promise = $q.when(pRes)\n    .then(initialize)\n    .catch(handleError);\n    self.promise.instance = self;\n\n    /**\n     * @name next\n     * @memberof module:clb-rest.ResultSet\n     * @desc\n     * Retrieve the next result page.\n     * @memberof module:clb-rest.clbResultSet.ResultSet\n     *\n     * @return {Object} a promise that will resolve when the next page is fetched.\n     */\n    function next() {\n      if (!self.hasNext) {\n        return $q.reject(ResultSetEOL);\n      }\n      var promise = (options.nextHandler ?\n        wrappedNextCall() :\n        clbAuthHttp.get(self.nextUrl)\n      );\n      return promise.then(handleNextResults);\n    }\n\n    /**\n     * @name previous\n     * @memberof module:clb-rest.ResultSet\n     * @desc\n     * Retrieve the previous result page\n     *\n     * @return {Object} a promise that will resolve when the previous page is fetched.\n     */\n    function previous() {\n      if (!self.hasPrevious) {\n        return $q.reject(ResultSetEOL);\n      }\n      var promise = (options.previousHandler ?\n        wrappedPreviousCall() :\n        clbAuthHttp.get(self.previousUrl)\n      );\n      return promise.then(handlePreviousResults);\n    }\n\n    /**\n     * @name toArray\n     * @memberof module:clb-rest.ResultSet\n     * @desc\n     * Retrieve an array containing ALL the results. Beware that this\n     * can be very long to resolve depending on your dataset.\n     *\n     * @return {Promise} a promise that will resolve to the array when\n     * all data has been fetched.\n     */\n    function toArray() {\n      return all().then(function() {\n        return self.results.slice();\n      });\n    }\n\n    /**\n     * Load all pages.\n     * @memberof module:clb-rest.ResultSet\n     * @return {Promise} Resolve once everything is loaded\n     */\n    function all() {\n      if (self.hasNext) {\n        return next().then(all);\n      }\n      return $q.when(self);\n    }\n\n    /**\n     * parse the next result set according to options.\n     * @param  {HTTPResponse} res response containing the results.\n     * @return {ResultSet} self for chaining\n     * @private\n     */\n    function handleNextResults(res) {\n      var rs = res.data;\n      var result = at(rs, options.resultKey);\n\n      var fResult;\n      if (options.resultsFactory) {\n        fResult = options.resultsFactory(result, rs);\n      }\n      return $q.when(fResult)\n      .then(function(computedResult) {\n        self.results.push.apply(self.results, (computedResult || result));\n        counting(rs);\n        bindNext(rs);\n        return self;\n      });\n    }\n\n    /**\n     * parse the previous result set according to options.\n     * @param  {HTTPResponse} res response containing the results.\n     * @return {ResultSet} self for chaining\n     * @private\n     */\n    function handlePreviousResults(res) {\n      var rs = res.data;\n      var result = at(rs, options.resultKey);\n      var fResult;\n      if (options.resultsFactory) {\n        fResult = options.resultsFactory(result, rs);\n      }\n      return $q.when(fResult)\n      .then(function(computedResult) {\n        self.results.unshift.apply(self.results, (computedResult || result));\n        counting(rs);\n        bindPrevious(rs);\n        return self;\n      });\n    }\n\n    /**\n     * @name at\n     * @desc\n     * Lodash 'at' function replacement. This is needed because the 'at' function\n     * supports Object as first arg only starting from v4.0.0.\n     * Migration to that version has big impacts.\n     *\n     * See: https://lodash.com/docs#at\n     * @param {object} obj the object to search in\n     * @param {string} desc the dotted path to the location\n     * @return {instance} the found value\n     * @private\n     */\n    function at(obj, desc) {\n      var arr = desc.split('.');\n      while (arr.length && obj) {\n        obj = obj[arr.shift()];\n      }\n      return obj;\n    }\n\n    /**\n     * Handle an error retrieved by calling\n     * ``options.errorHandler``, passing the ``ClbError`` instance in parameter\n     * if ``options.errorHandler`` is a function.\n     * Then reject the current request with the same error instance.\n     * @param  {object} res the HTTP error object\n     * @return {Promise} rejected Promise with the error.\n     * @private\n     */\n    function handleError(res) {\n      self.error = clbError.httpError(res);\n      if (angular.isFunction(options.errorHandler)) {\n        options.errorHandler(self.error);\n      }\n      return $q.reject(self.error);\n    }\n\n    /**\n     * Configure the next page state of the result set.\n     * @param  {object} rs the last page results.\n     * @private\n     */\n    function bindNext(rs) {\n      self.hasNext = options.hasNextHandler(rs);\n      if (options.nextHandler) {\n        wrappedNextCall = function() {\n          return options.nextHandler(rs);\n        };\n      } else if (self.hasNext) {\n        self.nextUrl = at(rs, options.nextUrlKey);\n      } else {\n        self.nextUrl = null;\n      }\n    }\n\n    /**\n     * Configure the previous page state of the result set.\n     * @param  {object} rs the last page results.\n     * @private\n     */\n    function bindPrevious(rs) {\n      self.hasPrevious = options.hasPreviousHandler(rs);\n      if (options.previousHandler) {\n        wrappedPreviousCall = function() {\n          return options.previousHandler(rs);\n        };\n      } else if (self.hasPrevious) {\n        self.previousUrl = at(rs, options.previousUrlKey);\n      } else {\n        self.previousUrl = null;\n      }\n    }\n\n    /**\n     * Set the current count of results.\n     * @param  {object} rs the last page results.\n     * @private\n     */\n    function counting(rs) {\n      var c = at(rs, options.countKey);\n      if (angular.isDefined(c)) {\n        self.count = c;\n      }\n    }\n\n    /**\n     * Ensure that we don't mess with query result order.\n     * @param  {Function} fn the next function to run once all pending calls\n     *                       have been resolved.\n     * @return {Promise}     the promise will resolve when this function had run.\n     * @private\n     */\n    function enqueue(fn) {\n      return function() {\n        self.promise = $q\n        .when(self.promise.then(fn))\n        .catch(handleError);\n        self.promise.instance = self;\n        return self.promise;\n      };\n    }\n\n    /**\n     * Bootstrap the pagination.\n     * @param  {HTTPResponse|Promise} res Angular HTTP Response\n     * @return {ResultSet} self for chaining\n     * @private\n     */\n    function initialize(res) {\n      return handleNextResults(res)\n      .then(function() {\n        bindPrevious(res.data);\n        return self;\n      });\n    }\n  }\n}\n","angular\n  .module('clb-storage')\n  .factory('clbStorage', clbStorage);\n\n/**\n * @typedef {object} EntityDescriptor\n * @memberof module:clb-storage\n * @property {UUID} uuid         The entity UUID\n * @property {string} entity_type The entity type (e.g.: ``file``, ``folder``, ``project``)\n * @desc\n * Describe an arbitrary entity in the storage stytem. The principal types are\n *\n * - `file`: the entity is a file whose content can be retrieved\n * - `folder`: the entity is a folder and can be the parent of other entities\n * - `project`: First level folder. It behave like a folder but also defines the ACL for all the children\n */\n\n/**\n * @namespace clbStorage\n * @memberof module:clb-storage\n * @desc\n * The ``clbStorage`` service provides utility functions to ease the interaction\n * of apps with storage.\n * @param  {object} clbAuthHttp        Angular DI\n * @param  {object} $q           Angular DI\n * @param  {object} $log         Angular DI\n * @param  {object} uuid4        Angular DI\n * @param  {object} lodash       Angular DI\n * @param  {object} clbEnv       Angular DI\n * @param  {object} clbError     Angular DI\n * @param  {object} clbUser      Angular DI\n * @param  {object} clbResultSet Angular DI\n * @return {object}              Angular DI\n */\nfunction clbStorage(\n  clbAuthHttp,\n  $q,\n  $log,\n  uuid4,\n  lodash,\n  clbEnv,\n  clbError,\n  clbUser,\n  clbResultSet\n) {\n  var collabUrl = clbEnv.get('api.collab.v0');\n  var baseUrl = clbEnv.get('api.document.v1');\n  var maxFileSize = clbEnv.get('hbpFileStore.maxFileUploadSize', 41943040);\n  var entityUrl = baseUrl + '/entity';\n  var fileUrl = baseUrl + '/file';\n  var promises = {};\n  return {\n    getEntity: getEntity,\n    getAbsolutePath: getAbsolutePath,\n    upload: upload,\n    query: query,\n    getCollabHome: getCollabHome,\n    getContent: getContent,\n    downloadUrl: downloadUrl,\n    getProjects: getProjects,\n    getChildren: getChildren,\n    getUserAccess: getUserAccess,\n    getAncestors: getAncestors,\n    isContainer: isContainer,\n    copy: copy,\n    create: create,\n    update: updateEntity,\n    delete: deleteEntity,\n    setContextMetadata: setContextMetadata,\n    deleteContextMetadata: deleteContextMetadata,\n    updateContextMetadata: updateContextMetadata,\n    getMetadata: getMetadata,\n    addMetadata: addMetadata,\n    deleteMetadata: deleteMetadata\n  };\n\n  // -------------------- //\n\n  /**\n   * Get an entity (e.g.: a project, a file or a folder) using a locator. The\n   * only accepted locator at this time is the entity UUID.\n   *\n   * - the entity UUID\n   * - an entity representation with ``{uuid: ENTITY_UUID}``\n   * - the entity related context ``{ctx: CONTEXT_UUID}``\n   * - the entity collab ID ``{collab: COLLAB_ID}``\n   * - the entity absolute path\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {any} locator  Describe the entity to retrieve (see description).\n   * @return {Promise}               Return a :doc:`module-clb-storage.EntityDescriptor` when fulfilled\n   *                                 or reject a :doc:`module-clb-error.ClbError`\n   */\n  function getEntity(locator) {\n    if (!locator) {\n      return $q.reject(clbError.error({\n        type: 'InvalidArgument',\n        message: 'locator argument is mandatory'\n      }));\n    }\n    $log.debug('clbStorage.getEntity using locator', locator);\n    if (angular.isString(locator) && (uuid4.validate(locator) || locator.match(/^HPC/))) {\n      return getEntityByUUID(locator);\n    }\n    if (angular.isObject(locator)) {\n      if (locator.uuid && (uuid4.validate(locator.uuid) || locator.uuid.match(/^HPC/))) {\n        return getEntityByUUID(locator.uuid);\n      }\n      if (locator.ctx && uuid4.validate(locator.ctx)) {\n        return getEntityByContext(locator.ctx);\n      }\n      if (locator.collab) {\n        return getCollabHome(locator.collab);\n      }\n    }\n    return $q.reject(clbError.error({\n      type: 'InvalidArgument',\n      message: 'Unable to locate entity because the `locator` argument' +\n               ' is not valid: ' + String(locator),\n      code: -10,\n      data: {\n        locator: locator\n      }\n    }));\n  }\n\n  /**\n   * Return the absolute path of the entity\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param  {object|UUID}   entity UUID or descriptor\n   * @return {Promise}       return a path string when fulfilled.\n   */\n  function getAbsolutePath(entity) {\n    if (!entity) {\n      return $q.when(null);\n    }\n    var uuid = entity.uuid || entity;\n    return clbAuthHttp.get(baseUrl + '/entity/' + uuid + '/path/')\n    .then(function(res) {\n      return res.data.path;\n    })\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Ensure there is only one async `fn` run named `k` at once.\n   * subsequent call to runOnce with the same `k` value will\n   * return the promise of the running async function.\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string}   k  The key\n   * @param  {Function} fn The function that retrieve a Promise\n   * @return {Promise}     Resolve to the function result\n   * @private\n   */\n  function runOnce(k, fn) {\n    if (!promises[k]) {\n      promises[k] = fn().finally(function() {\n        promises[k] = null;\n      });\n    }\n    return promises[k];\n  }\n\n  /**\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string} uuid Entity UUID\n   * @return {Promise}     Resolve to the entity Descriptor\n   * @private\n   */\n  function getEntityByUUID(uuid) {\n    var url = entityUrl + '/' + uuid + '/';\n    var k = 'GET ' + url;\n    return runOnce(k, function() {\n      return clbAuthHttp.get(url).then(function(data) {\n        return data.data;\n      }).catch(clbError.rejectHttpError);\n    });\n  }\n\n  /**\n   * Query entities by attributes or metadata.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {object} params Query Parameters\n   * @return {Promise}      Return the results\n   */\n  function query(params) {\n    $log.debug('clbStorage.query with', params);\n    return clbAuthHttp.get(entityUrl + '/', {\n      params: params\n    }).then(function(response) {\n      return response.data;\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Retrieve the key to lookup for on entities given the ctx\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string} ctx application context UUID\n   * @return {string}     name of the entity attribute that should be used\n   * @private\n   */\n  function metadataKey(ctx) {\n    return 'ctx_' + ctx;\n  }\n\n  /**\n   * @name setContextMetadata\n   * @memberof module:clb-storage.clbStorage\n   * @desc\n   * the function links the contextId with the doc browser entity in input\n   * by setting a specific metadata on the entity.\n   *\n   * Entity object in input must contain the following properties:\n   * - entity_type\n   * - uuid\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {Object} entity doc browser entity\n   * @param  {String} contextId collab app context id\n   * @return {Promise} a promise that resolves when the operation is completed\n   */\n  function setContextMetadata(entity, contextId) {\n    var newMetadata = {};\n    newMetadata[metadataKey(contextId)] = 1;\n    return addMetadata(entity, newMetadata);\n  }\n\n  /**\n   * @function\n   * @desc\n   * the function gets the entity linked to the contextId in input.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   * @private\n   * @param  {String} contextId collab app context id\n   * @return {Promise} a promise that resolves when the operation is completed\n   */\n  function getEntityByContext(contextId) {\n    var queryParams = {};\n    queryParams[metadataKey(contextId)] = 1;\n    return query(queryParams).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * @name deleteContextMetadata\n   * @memberof module:clb-storage.clbStorage\n   * @desc\n   * the function unlink the contextId from the entity in input\n   * by deleting the context metadata.\n   *\n   * Entity object in input must contain the following properties:\n   * - entity_type\n   * - uuid\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {Object} entity doc browser entity\n   * @param  {String} contextId collab app context id\n   * @return {Promise} a promise that resolves when the operation is completed\n   */\n  function deleteContextMetadata(entity, contextId) {\n    var key = metadataKey(contextId);\n\n    return deleteMetadata(entity, [key]);\n  }\n\n  /**\n   * @name updateContextMetadata\n   * @memberof module:clb-storage.clbStorage\n   * @desc\n   * the function delete the contextId from the `oldEntity` metadata and add\n   * it as `newEntity` metadata.\n   *\n   * Entity objects in input must contain the following properties:\n   * - entity_type\n   * - uuid\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {Object} newEntity doc browser entity to link to the context\n   * @param  {Object} oldEntity doc browser entity to unlink from the context\n   * @param  {String} contextId collab app context id\n   * @return {Promise}          Resolves when the operation is completed\n   */\n  function updateContextMetadata(newEntity, oldEntity, contextId) {\n    return deleteContextMetadata(oldEntity, contextId).then(function() {\n      return setContextMetadata(newEntity, contextId);\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Return the metadata of the provided entity.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {object} entity   Entity Descriptor\n   * @return {Promise}        Resolves to an object containing all the entity metadata\n   */\n  function getMetadata(entity) {\n    var metadataUrl = buildEntityUrl(entity) + 'metadata/';\n    return clbAuthHttp.get(metadataUrl)\n    .then(function(response) {\n      return response.data;\n    })\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Add metadata to the provided entity and returns a promise that resolves to an object\n   * containing all the new metadata. The promise fails if one of the metadata already exists.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {object} entity   Entity Descriptor\n   * @param {object} metadata key/value store where keys are the metadata name to set\n   * @return {Promise}        Resolves after the operation is completed\n   */\n  function addMetadata(entity, metadata) {\n    var metadataUrl = buildEntityUrl(entity) + 'metadata/';\n    return clbAuthHttp.post(metadataUrl, metadata)\n    .then(function(response) {\n      return response.data;\n    })\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Delete metadata keys in input from the provided entity and returns a promise that resolves to an object\n   * containing all the remaining metadata. The promise fails if one of the metadata doesn't exist.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {object} entity      Entity Descriptor\n   * @param {array} metadataKeys Array of metatdata keys to delete\n   * @return {Promise}           Resolve to the metadata\n   */\n  function deleteMetadata(entity, metadataKeys) {\n    var metadataUrl = buildEntityUrl(entity) + 'metadata/';\n    return clbAuthHttp.delete(metadataUrl, {data: {keys: metadataKeys}})\n    .then(function(response) {\n      return response.data;\n    })\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * @function\n   * @private\n   * @desc\n   * When the promise is fulfilled, the function returns the :doc:`module-clb-storage.EntityDescriptor` of the ``collabId`` in input.\n   *\n   * In case of error, the promise is rejected with a :doc:`module-clb-error.ClbError` instance.\n   *\n   * @param  {int}    collabId collab id\n   * @return {Promise}         Return the project :doc:`module-clb-storage.EntityDescriptor` linked to\n   *                           this collab or reject a :doc:`module-clb-error.ClbError`.\n   * @throws a 'MissingParameter' :doc:`module-clb-error.ClbError` if collabId is not provided\n   */\n  function getCollabHome(collabId) {\n    checkMandatoryParameter('collabId', collabId);\n\n    return clbAuthHttp.get(baseUrl + '/project/', {\n      params: {collab_id: collabId}\n    }).then(function(response) {\n      if (response.data.count === 0) {\n        return $q.reject(clbError.error({\n          type: 'NotFound',\n          message: 'No project is linked to collab'\n        }));\n      }\n      return response.data.results[0];\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Create a new entity.\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string} type           Entity Type (e.g.: file, folder, project)\n   * @param  {string|object} parent  Parent UUID or entity descriptor\n   * @param  {string} name           File name\n   * @param  {object} options        Extend the entity descriptor with those data\n   * @return {Promise}               Resolve once done\n   */\n  function create(type, parent, name, options) {\n    return clbAuthHttp.post(\n      baseUrl + '/' + type.split(':')[0] + '/',\n      angular.extend({\n        name: name,\n        parent: (parent && parent.uuid) || parent\n      }, options)\n    )\n    .then(function(res) {\n      return res.data;\n    })\n    .catch(function(err) {\n      if (err.code === 0) {\n        err = clbError.error({\n          type: 'Aborted',\n          message: 'Network unreachable',\n          code: 0\n        });\n      } else {\n        err = clbError.httpError(err);\n      }\n      if (err.message.match(/already exists/)) {\n        err.type = 'FileAlreadyExistError';\n      } else {\n        err.type = 'EntityCreationError';\n      }\n      err.cause = err.type; // preserve legacy API\n      return $q.reject(err);\n    });\n  }\n\n  /**\n   * Update an existing entity.\n\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {object} [entity]              The entity to be updated\n   * @param {string} [options.uuid]        Entity uuid - required\n   * @param {string} [options.entity_type] The entity type - required\n   * @return {Promise}                     Resolve once done\n   */\n  function updateEntity(entity) {\n    var updateUrl = buildEntityUrl(entity);\n    return clbAuthHttp.patch(updateUrl, entity)\n      .then(function(res) {\n        return res.data;\n      }, clbError.rejectHttpError);\n  }\n\n  /**\n   * Copy a file to a destination folder\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string} srcId        UUID of the entity to copy\n   * @param  {string} destFolderId UUID of the target directory\n   * @return {Promise}             Resolves when done\n   */\n  function copy(srcId, destFolderId) {\n    return getEntity(srcId).then(function(src) {\n      return create(src.entity_type, destFolderId, src.name, {\n        description: src.description,\n        content_type: src.content_type\n      })\n      .then(function(dest) {\n        var url = [baseUrl, dest.entity_type, dest.uuid, 'content/'].join('/');\n        return clbAuthHttp.put(url, {}, {\n          headers: {'X-Copy-From': src.uuid}\n        }).then(function() {\n          return dest;\n        }).catch(function(err) {\n          $q.reject(clbError.httpError(err));\n        });\n      });\n    });\n  }\n\n  /**\n   * Retrieves the content of a file given its id.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param  {object} entity can be either a FileEntity or a UUID (string)\n   * @param  {object} [customConfig] contains extra configuration\n   * @return {Promise}   The raw content\n   */\n  function getContent(entity, customConfig) {\n    var uuid = angular.isString(entity) ? entity : entity.uuid;\n    if (!uuid) {\n      throw clbError.error({\n        type: 'InvalidArgument',\n        message: '`entity` parameter is not valid'\n      });\n    }\n    var config = {\n      method: 'GET',\n      url: fileUrl + '/' + uuid + '/content/',\n      transformResponse: function(data) {\n        return data;\n      }\n    };\n    if (angular.isDefined(customConfig)) {\n      angular.extend(config, customConfig);\n    }\n    return clbAuthHttp(config).then(function(data) {\n      return data.data;\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * @desc\n   * Get current user access right to the provided entity.\n   *\n   * The returned promise will be resolved\n   * with an object literal containing three boolean\n   * flags corresponding the user access:\n   *\n   * - canRead\n   * - canWrite\n   * - canManage\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {module:clb-storage.EntityDescriptor} entity The entity to retrieve user access for\n   * @return {object} Contains ``{boolean} canRead``, ``{boolean} canWrite``, ``{boolean} canManage``\n   */\n  function getUserAccess(entity) {\n    return $q.all({\n      // to check user access get collab id and check permission as done in collaboratory-frontend\n      collab: clbAuthHttp.get(baseUrl + '/entity/' + entity.uuid + '/collab/')\n    })\n    .then(function(aggregatedData) {\n      var collab = aggregatedData.collab;\n      var permissionsUrl = collabUrl + '/collab/' + collab.data.collab_id + '/permissions/';\n      return clbAuthHttp.get(permissionsUrl).then(function(permissions) {\n        var access = {\n          canRead: permissions.VIEW,\n          canWrite: permissions.UPDATE,\n          canManage: permissions.DELETE\n        };\n        return access;\n      });\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * @desc\n   * Retrieves all the projects the user has read access to.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {object} options Options to make the query.\n   * @return {Promise} When fulfilled, return a paginated result set. You can also access it immediately using ``promise.instance``\n   * @see {module:clb-storage.clbStorage.getChildren} for more details on `options` param.\n   */\n  function getProjects(options) {\n    return getChildren(null, options);\n  }\n\n  /**\n   * @desc\n   * Retrieve children entities of a 'parent' entity according to the options and\n   * add them to the children list.\n   * The returned promise will be resolved with the\n   * list of fetched children and a flag indicating if more results are available\n   * in the queried direction.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {module:clb-storage.EntityDescriptor} parent The parent entity\n   * @param {object} [options] Options to make the query\n   * @param {string} [options.accept] Accepted entity_type ('file' or 'folder')\n   * @param {string} [options.sort] Property to sort on\n   * @param {int} [options.page] The number of the page to return.\n   * @param {int} [options.pageSize] The number of results per page. Default is provided by the service. Set to 0 to fetch all the records.\n   * @param {boolean} [options.resolveUserId] if true, resolve user ids to user names (default: false)\n   * @param {boolean} [options.hpc] if true, the result will contain only the HPC projects/sites (default: false)\n   * @return {Promise} When fulfilled, return a paginated result set. You can also access it immediately using ``promise.instance``\n   */\n  function getChildren(parent, options) {\n    options = angular.extend({}, options);\n\n    // warn user about unsupported options\n    if (options.accept && Array.isArray(options.accept) && options.accept.length > 0) {\n      if (options.accept.length > 1) {\n        $log.warn('Only one entity_type filter is supported.');\n      }\n      options.accept = options.accept.length > 0 ? options.accept[0] : null;\n    }\n    if (options.acceptLink) {\n      $log.warn('Links not supported in the current version, `acceptLink` argument will be ignored');\n    }\n    if (options.from || options.until) {\n      $log.warn('Pagination changed in the current version. Please use `page_size` ' +\n        'and `page` instead of `from`, `until`');\n    }\n\n    var url;\n    if (parent) {\n      url = baseUrl + '/' + parent.entity_type + '/' +\n      (parent.uuid) + '/children/';\n    } else { // root projects\n      url = baseUrl + '/project/';\n    }\n    var params = {\n      entity_type: options.accept ? options.accept : null,\n      page_size: options.pageSize > 0 ? options.pageSize : null,\n      page: options.page > 0 ? options.page : null\n    };\n\n    if (options.hpc) {\n      if (options.sort) {\n        $log.warn('Ordering not supported for HPC entities, it will be ignored');\n      }\n      params.hpc = options.hpc === true ? true : null;\n    } else {\n      params.ordering = options.sort ? options.sort : 'name';\n    }\n\n    var resultSetOptions = {};\n    if (options.resolveUserId) {\n      resultSetOptions.resultsFactory = resultsFactory;\n    }\n    return clbResultSet.get(clbAuthHttp.get(url, {params: params}), resultSetOptions);\n  }\n\n  /**\n   * Resolves all the user ids in the result to a user profile.\n   * @private\n   * @param  {Array}   result Array of entities\n   * @return {Promise} Return once fullfilled\n   */\n  function resultsFactory(result) {\n    // Get the list of user's ids and try to find thier name\n    var userIds = lodash.uniq( // removes duplicates\n                    lodash.compact( // removes null, undefined, ''\n                      lodash.reduce(result, function(ids, entity) {\n                        return ids.concat([entity.created_by, entity.modified_by]);\n                      }, [])));\n\n    return clbUser.get(userIds).then(function(users) {\n      for (var i = 0; i < result.length; i++) {\n        result[i].created_by_user = users[result[i].created_by];\n        result[i].modified_by_user = users[result[i].modified_by];\n      }\n    });\n  }\n\n  /**\n   * Set the content of a file entity.\n   * @param  {File} file  The file with the content to upload\n   * @param  {module:clb-storage.EntityDescriptor} entity The entity to upload\n   * @param  {object} config configuration to use\n   * @return {Promise}       Return once fulfilled\n   */\n  function uploadFile(file, entity, config) {\n    var d = $q.defer();\n    clbAuthHttp.post(fileUrl + '/' + entity.uuid + '/content/upload/', file,\n      angular.extend({\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        }\n      }, config\n    )\n    ).success(function(entity) {\n      d.notify({\n        lengthComputable: true,\n        total: file.size,\n        loaded: file.size\n      });\n\n      d.resolve(entity);\n    }).error(function(err, status) {\n      var uploadError = function() {\n        if (!err || status === 0) {\n          return clbError.error({\n            type: 'Aborted'\n          });\n        }\n        return clbError.error('UploadError', {\n          message: err.message,\n          data: {\n            file: file,\n            entity: entity,\n            cause: err\n          }\n        });\n      };\n      deleteEntity(entity).then(function() {\n        d.reject(uploadError(err));\n      }, function(deleteErr) {\n        $log.error('Unable to remove previously created entity', deleteErr);\n        d.reject(uploadError(err));\n      });\n    });\n    return d.promise;\n  }\n\n  /**\n   * Create file entity and upload the content of the given file.\n   *\n   * `options` should contain a `parent` key containing the parent entity.\n   *\n   * Possible error causes:\n   *\n   * - FileTooBig\n   * - UploadError - generic error for content upload requests\n   * - EntityCreationError - generic error for entity creation requests\n   * - FileAlreadyExistError\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {File} file The file descriptor to upload\n   * @param {Object} options The list of options\n   * @return {Promise} a Promise that notify about progress and resolve\n   *   with the new entity object.\n   *\n   */\n  function upload(file, options) {\n    options = options || {};\n    var d = $q.defer();\n    var dAbort = $q.defer();\n\n    d.promise.abort = function() {\n      dAbort.resolve();\n    };\n\n    if (file.size > maxFileSize) {\n      d.reject(clbError.error({\n        type: 'FileTooBig',\n        message: 'The file `' + file.name + '` is too big(' + file.size +\n          ' bytes), max file size is ' + maxFileSize + ' bytes.'\n      }));\n      return d.promise;\n    }\n\n    var entityOpts = {\n      content_type: fixMimeType(file)\n    };\n    create(\n      'file',\n      options.parent && options.parent.uuid,\n      file.name,\n      entityOpts\n    ).then(function(entity) {\n      d.notify({\n        lengthComputable: true,\n        total: file.size,\n        loaded: 0\n      });\n\n      uploadFile(file, entity, {\n        timeout: dAbort.promise,\n        uploadProgress: function(event) {\n          d.notify(event);\n        }\n      }).then(\n        function() {\n          d.promise.abort = function() {\n            deleteEntity(entity).then(function() {\n              dAbort.resolve();\n            });\n          };\n          d.resolve(entity);\n        },\n        d.reject,\n        d.notify\n      );\n    }, d.reject);\n\n    return d.promise;\n  }\n\n  /**\n   * Return a good enough mimetype.\n   * @private\n   * @param  {File} file File to guess a mimetype for\n   * @return {string}    The good enough mime type\n   */\n  function fixMimeType(file) {\n    // Best match are found by the browser\n    if (file.type) {\n      return file.type;\n    }\n\n    var extension = file.name.match(/\\.([a-z0-9]+)$/);\n    if (!extension) {\n      return;\n    }\n    extension = extension[1];\n    // ipynb is not an official mime-type\n    if (extension.match(/^(j|i)pynb$/)) {\n      return 'application/x-ipynb+json';\n    }\n    // In worst case, return a dummy value that is consistent\n    // for a given file extension and valid from the point of view\n    // of the specification.\n    return 'application/x-' + extension;\n  }\n\n  /**\n   * Remotly delete an entity.\n   * @param  {module:clb-storage.EntityDescriptor} entity The entity to delete\n   * @return {Promise}        Return once fulfilled\n   */\n  function deleteEntity(entity) {\n    return clbAuthHttp.delete(buildEntityUrl(entity))\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Return true if the entity is a container (e.g.: a project, a folder, ...)\n   * @param  {EntityDescriptor} entity The entity to evaluate\n   * @return {Boolean}                 Return true if it is a container\n   */\n  function isContainer(entity) {\n    return Boolean(entity.entity_type &&\n      entity.entity_type.match(/project|folder/));\n  }\n\n  /**\n   * Retrieve an array of entities from root to the current entity\n   * (where `root` and `entity` are omitted).\n   * @function\n   * @param {module:clb-storage.EntityDescriptor} entity The entity to get ancestors from\n   * @param {module:clb-storage.EntityDescriptor} [root] The entity even oldest than the oldest ancestors to retrieve\n   * @return {Promise} Return an array of EntityDescriptor once fulfilled\n   */\n  function getAncestors(entity, root) {\n    // End recursion condition\n    if (!entity || !entity.parent || (root && entity.parent === root.uuid)) {\n      return $q.when([]);\n    }\n\n    var onError = function(err) {\n      $q.reject(clbError.error({\n        type: 'EntityAncestorRetrievalError',\n        message: 'Cannot retrieve some ancestors from entity ' + entity.name,\n        data: {\n          entity: entity,\n          root: root,\n          cause: err\n        }\n      }));\n    };\n\n    var recurse = function(parent) {\n      return getAncestors(parent, root)\n      .then(function(ancestors) {\n        ancestors.push(parent);\n        return ancestors;\n      });\n    };\n\n    return getEntity(entity.parent)\n      .then(recurse, onError);\n  }\n\n  /**\n   * Asynchronously ask for a short-lived (a few seconds),\n   * presigned URL that can be used to access and\n   * download a file without authentication headers.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param  {module:clb-storage.EntityDescriptor} entity The file to download\n   * @return {Promise}        Return a string containing the URL once the Promise\n   *                          is fulfilled.\n   */\n  function downloadUrl(entity) {\n    var id = entity.uuid || entity;\n    return clbAuthHttp.get(baseUrl + '/file/' + id + '/content/secure_link/')\n    .then(function(response) {\n      return baseUrl + response.data.signed_url;\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Checks that the value in input is defined.\n   *\n   * @private\n   * @param {string} name name of the param (used for error message)\n   * @param {object} value param value to check\n   * @return {boolean} the value in input if defined\n   * @throws a 'MissingParameter' :doc:`module-clb-error.ClbError` if value is undefined\n   */\n  function checkMandatoryParameter(name, value) {\n    if (value === undefined) {\n      throw clbError.error({\n        type: 'MissingParameter',\n        message: 'Missing mandatory `' + name + '` parameter'\n      });\n    }\n    return value;\n  }\n\n  /**\n   * Given an entity object, checks the required properties (uuid and entity_type)\n   * and returns the corresponding URL.\n   *\n   * @private\n   * @param {module:clb-storage.EntityDescriptor} entity a storage entity\n   * @return {string} the entity URL\n   */\n  function buildEntityUrl(entity) {\n    checkMandatoryParameter('entity', entity);\n    checkMandatoryParameter('entity.uuid', entity.uuid);\n    checkMandatoryParameter('entity.entity_type', entity.entity_type);\n\n    return baseUrl + '/' + entity.entity_type + '/' + entity.uuid + '/';\n  }\n}\n","angular.module('clb-stream')\n.provider('clbResourceLocator', clbResourceLocatorProvider);\n\nvar urlHandlers = [];\n\n/**\n * Configure the clbResourceLocator service.\n * @return {object} An AngularJS provider instance\n */\nfunction clbResourceLocatorProvider() {\n  var provider = {\n    $get: clbResourceLocator,\n    registerUrlHandler: registerUrlHandler,\n    urlHandlers: urlHandlers\n  };\n\n  /**\n   * Add a function that can generate URL for some types of object reference.\n   *\n   * The function should return a string representing the URL.\n   * Any other response means that the handler is not able to generate a proper\n   * URL for this type of object.\n   *\n   * The function signature is ``function(objectReference) { return 'url' // or nothing}``\n   * @memberof module:clb-stream\n   * @param  {function} handler a function that can generate URL string for some objects\n   * @return {provider} The provider, for chaining.\n   */\n  function registerUrlHandler(handler) {\n    if (angular.isFunction(handler)) {\n      urlHandlers.push(handler);\n    }\n    if (angular.isString(handler)) {\n      urlHandlers.push(handler);\n    }\n    return provider;\n  }\n\n  return provider;\n}\n\n/**\n * @name clbResourceLocator\n * @desc\n * resourceLocator service\n * @memberof module:clb-stream\n * @param {object} $q        DI\n * @param {object} $log      DI\n * @param {object} $injector DI\n * @param {object} clbError  DI\n * @return {object} the service singleton\n */\nfunction clbResourceLocator($q, $log, $injector, clbError) {\n  return {\n    urlFor: urlFor\n  };\n\n  /**\n   * @desc\n   * Asynchronous resolution of an object reference to an URL that access\n   * this resource.\n   *\n   * The URL is generated using the registered URL handlers. If no URL\n   * can be generated, a HbpError is thrown with ``type==='ObjectTypeException'``.\n   * If the object reference is not valid, a HbpError is throw with\n   * ``type==='AttributeError'``. In both case ``data.ref will be set with\n   * reference for which there is an issue.\n   *\n   * @memberof module:clb-stream.clbResourceLocator\n   * @param  {object} ref object reference\n   * @param  {object} activity the associated activity\n   * @return {string} a atring representing the URL for this object reference\n   */\n  function urlFor(ref, activity) {\n    if (!validRef(ref)) {\n      return $q.reject(invalidReferenceException(ref));\n    }\n    var next = function(i) {\n      if (i < urlHandlers.length) {\n        var fn = urlHandlers[i];\n        if (angular.isString(fn)) {\n          fn = $injector.get(fn);\n        }\n        return $q.when(fn(ref, activity)).then(function(url) {\n          if (angular.isString(url)) {\n            return url;\n          }\n          if (angular.isDefined(url)) {\n            $log.warn('unexpected result from URL handler', url);\n          }\n          return next(i + 1);\n        });\n      }\n      return $q.reject(objectTypeException(ref));\n    };\n    return next(0);\n  }\n\n  /**\n   * build an objectTypeException.\n   * @private\n   * @param  {object} ref ClbObjectReference\n   * @return {HbpError}   error to be sent\n   */\n  function objectTypeException(ref) {\n    return clbError.error({\n      type: 'ObjectTypeException',\n      message: 'Unkown object type <' + (ref && ref.type) + '>',\n      data: {ref: ref}\n    });\n  }\n\n  /**\n   * build an objectTypeException.\n   * @private\n   * @param  {object} ref ClbObjectReference\n   * @return {HbpError}   error to be sent\n   */\n  function invalidReferenceException(ref) {\n    return clbError.error({\n      type: 'AttributeError',\n      message: 'Invalid object reference <' + ref + '>',\n      data: {ref: ref}\n    });\n  }\n\n  /**\n   * Return wheter the object reference is valid or not.\n   *\n   * To be valid an ObjectReference must have a defined ``id`` and ``type``\n   * @param  {any} ref the potential object reference\n   * @return {boolean} whether it is or not an object reference\n   */\n  function validRef(ref) {\n    return Boolean(ref && ref.id && ref.type);\n  }\n}\n","angular.module('clb-stream')\n.factory('clbStream', clbStream);\n\n/**\n * ``clbStream`` service is used to retrieve feed of activities\n * given a user, a collab or a specific context.\n *\n * @memberof module:clb-stream\n * @namespace clbStream\n * @param {function} clbAuthHttp angular dependency injection\n * @param {function} clbEnv angular dependency injection\n * @param {function} clbError angular dependency injection\n * @param {function} clbResultSet angular dependency injection\n * @param {function} moment angular dependency injection\n * @return {object} the clbActivityStream service\n */\nfunction clbStream(clbAuthHttp, clbEnv, clbError, clbResultSet, moment) {\n  return {\n    getStream: getStream,\n    getHeatmapStream: getHeatmapStream\n  };\n\n  /**\n   * @name activityListFactoryFunc\n   * @desc\n   * Return activities\n   *\n   * @memberof module:clb-stream.clbStream\n   * @param {boolean} next indicates if there is next page\n   * @return {object} Activities\n   */\n  function activityListFactoryFunc(next) { // eslint-disable-line require-jsdoc\n    return function(results) {\n      if (!(results && results.length)) {\n        return;\n      }\n      for (var i = 0; i < results.length; i++) {\n        var activity = results[i];\n        if (activity.time) {\n          activity.time = new Date(Date.parse(activity.time));\n        }\n      }\n      if (next) {\n        return next(results);\n      }\n      return results;\n    };\n  }\n\n  /**\n   * Builds the URL options such as the from and to date\n   * as well as the page_size\n   * @memberof module:clb-stream.clbStream\n   * @param {string} url original url\n   * @param {object} options  pageSize:15, date:'2016-07-20'\n   * @return {string} Built URL\n   */\n  function buildURLOptions(url, options) {\n    // Addition of stream options e.g. date and page_size\n    var paramToken = url.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n\n    if (options.date) {\n      var _targetDate = moment(options.date);\n      var format = 'YYYY-MM-DD';\n      url += paramToken + \"from=\" + _targetDate.format(format);\n      url += \"&to=\" + _targetDate.add(1, 'day').format(format);\n      paramToken = \"&\";\n    }\n\n    if (options.days) {\n      url += paramToken + \"days=\" + options.days;\n    } else if (options.pageSize) {\n      url += paramToken + \"page_size=\" + options.pageSize;\n    }\n\n    return url;\n  }\n\n  /**\n   * Get a feed of activities regarding an item type and id.\n   * @memberof module:clb-stream.clbStream\n   * @param  {string} type The type of object to get the feed for\n   * @param  {string|int} id   The id of the object to get the feed for\n   * @param  {object} options  Parameters to pass to the query\n   * @return {Promise}         resolve to the feed of activities\n   */\n  function getStream(type, id, options) {\n    options = angular.extend({}, options);\n    options.resultsFactory = activityListFactoryFunc(\n        options.resultsFactory);\n    var url = clbEnv.get('api.stream.v0') + '/stream/' +\n                         type + ':' + id + '/';\n\n    url = buildURLOptions(url, options);\n    return clbResultSet.get(clbAuthHttp.get(url), options)\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Returns a heatmap stream of the number of activities per\n   * day for a HBPUser or HBPCollab\n   * @param  {string} type The type of object to get the feed for\n   * @param  {string|int} id   The id of the object to get the feed for\n   * @param  {object} options  Parameters to pass to the query\n   * @return {Promise}         resolve to the feed of activities\n   */\n  function getHeatmapStream(type, id, options) {\n    options = angular.extend({resultKey: 'details'}, options);\n    options.resultsFactory = activityListFactoryFunc(options.resultsFactory);\n\n    var url = clbEnv.get('api.stream.v0') + '/heatmap/' +\n        type + ':' + id + '/';\n\n    url = buildURLOptions(url, options);\n\n    return clbResultSet.get(clbAuthHttp.get(url), options)\n        .catch(clbError.rejectHttpError);\n  }\n}\n","angular.module('clb-ui-dialog')\n.factory('clbConfirm', clbConfirm);\n\n/**\n * Service to trigger modal dialog.\n *\n * @namespace clbDialog\n * @memberof module:clb-ui-dialog\n * @param  {object} $rootScope Angular DI\n * @param  {object} $uibModal     Angular DI\n * @return {object}            Service Descriptor\n */\nfunction clbConfirm($rootScope, $uibModal) {\n  return {\n    open: open\n  };\n\n  /**\n   * Confirmation dialog\n   * @param  {object} options Parameters\n   * @return {Promise}        Resolve if the confirmation happens, reject otherwise\n   */\n  function open(options) {\n    options = angular.extend({\n      scope: $rootScope,\n      title: 'Confirm',\n      confirmLabel: 'Yes',\n      cancelLabel: 'No',\n      template: 'Are you sure?',\n      closable: true\n    }, options);\n\n    var modalScope = options.scope.$new();\n    modalScope.title = options.title;\n    modalScope.confirmLabel = options.confirmLabel;\n    modalScope.cancelLabel = options.cancelLabel;\n    modalScope.confirmationContent = options.template;\n    modalScope.confirmationContentUrl = options.templateUrl;\n    modalScope.closable = options.closable;\n    modalScope.securityQuestion = options.securityQuestion;\n    modalScope.securityAnswer = options.securityAnswer;\n\n    var instance = $uibModal.open({\n      templateUrl: 'confirm.tpl.html',\n      show: true,\n      backdrop: 'static',\n      scope: modalScope,\n      keyboard: options.keyboard || options.closable\n    });\n    return instance.result;\n  }\n}\n","angular.module('clb-ui-error')\n.factory('clbErrorDialog', clbErrorDialog);\n\n/**\n * The factory ``clbUiError`` instantiates modal error dialogs.\n * Notify the user about the given error.\n * @name clbError\n * @memberof module:clb-ui-error\n * @param  {object} $uibModal Angular DI\n * @param  {object} clbError  Angular DI\n * @return {object}           Angular Factory\n */\nfunction clbErrorDialog($uibModal, clbError) {\n  return {\n    open: open\n  };\n\n  /**\n   * Open an error modal dialog\n   * @param  {HBPError} error The error do displays\n   * @param  {object} options Any options will be passed to $uibModal.open\n   * @return {Promse}         The result of $uibModal.open\n   */\n  function open(error, options) {\n    options = angular.extend({\n      templateUrl: 'error-dialog.tpl.html',\n      class: 'error-dialog',\n      controller: function() {\n        var vm = this;\n        vm.error = clbError.error(error);\n      },\n      controllerAs: 'vm',\n      bindToController: true\n    }, options);\n    return $uibModal.open(options).result.catch(function() {\n      // resolve anytime.\n      return true;\n    });\n  }\n}\n","angular.module('clb-ui-error')\n.directive('clbErrorMessage', clbErrorMessage);\n\n/**\n * The ``clb-error-message`` directive displays an error.\n *\n *\n * clb-error is a HbpError instance, built by the HbpErrorService\n *\n * @namespace clbErrorMessage\n * @memberof module:clb-ui-error\n * @example <caption>Retrieve the current context object</caption>\n * <div ng-controller='SomeController'>\n *   Validation error:\n *   <clb-error-message clb-error='error'></clb-error-message>\n *   Permission denied error:\n *   <clb-error-message clb-error='errorPermissions'></clb-error-message>\n * </div>\n * @return {object} The directive\n **/\nfunction clbErrorMessage() {\n  return {\n    restrict: 'E',\n    scope: {\n      error: '=?clbError'\n    },\n    templateUrl: 'error-message.directive.html'\n  };\n}\n","/**\n * @namespace clbFormControlFocus\n * @memberof module:clb-ui-form\n * @desc\n * The ``clbFormControlFocus`` Directive mark a form element as the one that\n * should receive the focus first.\n * @example <caption>Give the focus to the search field</caption>\n * angular.module('exampleApp', ['clb-ui-form']);\n *\n * // HTML snippet:\n * // <form ng-app=\"exampleApp\"><input type=\"search\" clb-ui-form-control-focus></form>\n */\nangular.module('clb-ui-form')\n.directive('clbFormControlFocus', function clbFormControlFocus($timeout) {\n  return {\n    type: 'A',\n    link: function formControlFocusLink(scope, elt) {\n      $timeout(function() {\n        elt[0].focus();\n      }, 0, false);\n    }\n  };\n});\n","/**\n * @namespace clbFormGroupState\n * @memberof module:clb-ui-form\n * @desc\n * ``clbFormGroupState`` directive flag the current form group with\n * the class has-error or has-success depending on its form field\n * current state.\n *\n * @example\n * <caption>Track a field validity at the ``.form-group`` level</caption>\n * angular.module('exampleApp', ['hbpCollaboratory']);\n */\nangular.module('clb-ui-form')\n.directive('clbFormGroupState', function formGroupState() {\n  return {\n    type: 'A',\n    scope: {\n      model: '=clbFormGroupState'\n    },\n    link: function formGroupStateLink(scope, elt) {\n      scope.$watchGroup(['model.$touched', 'model.$valid'], function() {\n        if (!scope.model) {\n          return;\n        }\n        elt.removeClass('has-error', 'has-success');\n        if (!scope.model.$touched) {\n          return;\n        }\n        if (scope.model.$valid) {\n          elt.addClass('has-success');\n        } else {\n          elt.addClass('has-error');\n        }\n      }, true);\n    }\n  };\n});\n","angular.module('clb-ui-identity')\n.directive('clbUserAvatar', clbUserAvatar);\n\n/**\n * Display an square icon for a user.\n *\n * Attributes\n * ----------\n *\n * ==================  ====================================\n * Name                Description\n * ==================  ====================================\n * clb-user            The ClbUser instance to display\n * ==================  ====================================\n *\n * @namespace clbUserAvatar\n * @memberof module:clb-ui-identity\n * @return {Object} Directive Descriptor\n * @example <caption>Display user avatar</caption>\n * <clb-user-avatar clb-user=\"vm.currentUser\"></clb-user-avatar>\n */\nfunction clbUserAvatar() {\n  'use strict';\n  return {\n    restrict: 'EA',\n    scope: {\n      user: '=clbUser'\n    },\n    templateUrl: 'user-avatar.directive.html',\n    link: function(scope, elt) {\n      elt.addClass('clb-user-avatar');\n      scope.$watch('user', function() {\n        if (!scope.user || !scope.user.displayName) {\n          return;\n        }\n\n        if (scope.user.displayName) {\n          scope.char = scope.user.displayName[0].toUpperCase();\n        }\n        // Define a hue index to generate a custom class\n        var words = scope.user.displayName.split(/\\s+/, 2);\n        var initials = (String(words[0][0]) +\n          (words[1] ? words[1][0] : words[0][1]))\n          .toUpperCase();\n        scope.hueNumber = (13 * initials.charCodeAt(0) * 23 *\n          initials.charCodeAt(1)) % 7 + 1;\n      });\n    }\n  };\n}\n","angular.module('clb-ui-identity')\n.directive('clbUsercardPopover', clbUsercardPopoverDirective);\n\n/**\n * Display the user summary in a popover element.\n *\n * Only one of those can be open at any time.\n *\n * =======================================  =========================================\n * Name                  Description\n * =======================================  =========================================\n * {string|HBPUser} clb-usercard-popover    The ClbUser instance to display or its ID\n * =======================================  =========================================\n *\n * @namespace clbUsercardPopoverDirective\n * @memberof module:clb-ui-identity\n * @param  {object} $log               DI\n * @param  {object} $q                 DI\n * @param  {object} clbUser            DI\n * @param  {object} clbUsercardPopover DI\n * @return {object}                    Directive Descriptor\n */\nfunction clbUsercardPopoverDirective(\n  $log,\n  $q,\n  clbUser,\n  clbUsercardPopover\n) {\n  return {\n    restrict: 'A',\n    scope: {\n      user: '=clbUsercardPopover'\n    },\n    transclude: true,\n    templateUrl: 'usercard-popover.directive.html',\n    controller: function() {\n      var vm = this;\n      vm.popover = {\n        isOpen: false,\n        user: null,\n        appendToBody: true\n      };\n\n      if (vm.user && vm.user.displayName) {\n        vm.popover.user = vm.user;\n      } else {\n        clbUser.get(vm.user).then(function(user) {\n          vm.popover.user = user;\n        }).catch(function(err) {\n          $log.error('Unable to get user with id', vm.user, err);\n        });\n      }\n    },\n    controllerAs: 'vm',\n    bindToController: true,\n    link: function(scope, elt, attrs, vm) {\n      var unbind = scope.$on('clbUsercardPopover.open',\n        function(event, element) {\n          vm.popover.isOpen = (element === elt);\n        });\n\n      scope.$on('$destroy', unbind);\n\n      scope.togglePopover = function($event, action) {\n        if ($event.isDefaultPrevented()) {\n          return;\n        }\n        $event.preventDefault();\n        if (action === 'close') {\n          return clbUsercardPopover.open(null);\n        }\n        clbUsercardPopover.open(vm.popover.isOpen ? null : elt);\n      };\n    }\n  };\n}\n","angular.module('clb-ui-identity')\n.factory('clbUsercardPopover', clbUserCardPopoverService);\n\n/**\n * A singleton to manage clb-usercard-popover instances\n * @namespace clbUserCardPopoverService\n * @memberof module:clb-ui-identity\n * @private\n * @param {object} $rootScope DI\n * @return {object} factory descriptor\n */\nfunction clbUserCardPopoverService($rootScope) {\n  return {\n    open: function(element) {\n      $rootScope.$broadcast('clbUsercardPopover.open', element);\n    }\n  };\n}\n","angular.module('clb-ui-identity')\n.run(function($templateCache) {\n  // During the build, templateUrl will be replaced by the inline template.\n  // We need to inject it in template cache as it is used for displaying\n  // the tooltip. Does it smell like a hack? sure, it is a hack!\n  var injector = {\n    templateUrl: 'usercard-popover.tpl.html'\n  };\n  // If defined, it means that the template has been inlined during build.\n  if (injector.template) {\n    $templateCache.put('usercard-popover.tpl.html', injector.template);\n  }\n});\n","angular.module('clb-ui-identity')\n.directive('clbUsercard', clbUsercard)\n.run(clbUsercardCacheTemplate);\n\n/**\n * Display general user informations.\n *\n * Attributes\n * ----------\n *\n * ==================  ====================================\n * Name                Description\n * ==================  ====================================\n * clb-user            The ClbUser instance to display\n * clb-template        URL of a custom template to use\n * ==================  ====================================\n *\n *\n * @param  {object} lodash Angular DI\n * @memberof module:clb-ui-identity\n * @return {object}        Directive Descriptor\n * @example <caption>Display user informations</caption>\n * <clb-usercard clb-user=\"vm.currentUser\"></clb-usercard>\n * @example <caption>Using a different templates</caption>\n * <clb-usercard clb-user=\"vm.currentUser\" clb-template=\"custom/simple-user.html\">\n * </clb-usercard>\n */\nfunction clbUsercard(lodash) {\n  'use strict';\n  return {\n    restrict: 'EA',\n    scope: {\n      user: '=clbUser'\n    },\n    templateUrl: function(tElement, tAttrs) {\n      return tAttrs.clbTemplate || 'usercard.directive.html';\n    },\n    link: {\n      pre: function(scope) {\n        scope.$watch('user', function(newValue) {\n          scope.institution = newValue &&\n            lodash.find(newValue.institutions, 'primary');\n          scope.email = newValue &&\n            lodash(newValue.emails).filter('primary').map('value').first();\n          scope.phone = newValue &&\n            lodash(newValue.phones).filter('primary').map('value').first();\n          scope.ims = newValue && newValue.ims;\n        });\n      }\n    }\n  };\n}\n\n/**\n * During the build, templateUrl will be replaced by the inline template.\n * We need to inject it in template cache as it is used for displaying\n * the tooltip. Does it smell like a hack? sure, it is a hack!\n * @param  {object} $templateCache Angular DI\n * @private\n */\nfunction clbUsercardCacheTemplate($templateCache) {\n  //\n  var injector = {\n    templateUrl: 'usercard.directive.html'\n  };\n  // If defined, it means that the template has been inlined during build.\n  if (injector.template) {\n    $templateCache.put('usercard.directive.html', injector.template);\n  }\n}\n","angular.module('clb-ui-loading')\n.directive('clbLoading', clbLoading);\n\n/**\n * The directive clbLoading displays a simple loading message. If a promise\n * is given, the loading indicator will disappear once it is resolved.\n *\n * Attributes\n * ----------\n *\n * =======================  ===================================================\n * Name                     Description\n * =======================  ===================================================\n * {Promise} [clb-promise]  Hide the loading message upon fulfilment.\n * {string} [clb-message]   Displayed loading string (default=``'loading...'``)\n * =======================  ===================================================\n *\n * @memberof module:clb-ui-loading\n * @return {object} Angular directive descriptor\n * @example <caption>Directive Usage Example</caption>\n * <hbp-loading hbp-promise=\"myAsyncFunc()\" hbp-message=\"'Loading My Async Func'\">\n * </hbp-loading>\n */\nfunction clbLoading() {\n  return {\n    restrict: 'E',\n    scope: {\n      promise: '=?clbPromise',\n      message: '=?clbMessage'\n    },\n    templateUrl: 'loading.directive.html',\n    link: function(scope) {\n      scope.loading = true;\n      scope.message = scope.message || 'Loading...';\n      if (scope.promise) {\n        var complete = function() {\n          scope.loading = false;\n        };\n        scope.promise.then(complete, complete);\n      }\n    }\n  };\n}\n","angular.module('clb-ui-loading')\n.directive('clbPerformAction', clbPerformAction);\n\n/**\n * @namespace clbPerformAction\n * @memberof module:clb-ui-loading\n *\n * @desc\n * clbPerformAction directive run an action when the given control is clicked.\n * it can be added as an attribute. While the action is running, the control\n * is disabled.\n *\n * @param {function} clbPerformAction  the code to run when the button is clicked.\n *                     this function must return a promise.\n * @param {string}   clbLoadingMessage text replacement for the element content.\n * @return {object}                      Directive Descriptor\n * @example <caption>use perform action to disable a button while code is running</caption>\n * <div ng-controller=\"myController\">\n *  <input class=\"btn btn-primary\" type=\"submit\" clb-perform-action=\"doSomething()\">\n * </div>\n */\nfunction clbPerformAction() {\n  return {\n    restrict: 'A',\n    scope: {\n      action: '&clbPerformAction'\n    },\n    link: function(scope, element, attrs) {\n      var onComplete = function() {\n        element.html(scope.text);\n        element.attr('disabled', false);\n        element.removeClass('loading');\n      };\n      var run = function() {\n        if (scope.loadingMessage) {\n          element.html(scope.loadingMessage);\n        }\n        element.addClass('loading');\n        element.attr('disabled', true);\n        scope.action().then(onComplete, onComplete);\n      };\n      scope.loadingMessage = attrs.clbLoadingMessage;\n      scope.text = scope.text || element.html();\n      element.on('click', run);\n    }\n  };\n}\n","angular.module('clb-ui-storage')\n.directive('clbFileBrowserFolder', clbFileBrowserFolder);\n\n/**\n * @namespace clbFileBrowserFolder\n * @desc\n * clbFileBrowserFolder directive is a child directive of\n * clbFileBrowser that render a folder item within the file browser view.\n *\n * Available attributes:\n *\n * - clb-ui-storage-folder: the folder entity\n * - [clb-ui-storage-folder-icon]: a class name to display an icon\n * - [clb-ui-storage-folder-label]: a label name (default to folder.name)\n *\n * @example\n * <!-- minimal -->\n * <div clb-ui-storage-folder=\"folderEntity\"></div>\n * <!-- all wings out -->\n * <div clb-ui-storage-folder=\"folderEntity\"\n *      clb-ui-storage-folder-icon=\"fa fa-level-up\"\n *      clb-ui-storage-label=\"up\"></div>\n *\n * @memberof module:clb-ui-storage.clbFileBrowser\n * @return {object} Angular Directive\n */\nfunction clbFileBrowserFolder() {\n  return {\n    restrict: 'A',\n    require: '^clbFileBrowser',\n    templateUrl: 'file-browser-folder.directive.html',\n    scope: {\n      folder: '=clbFileBrowserFolder',\n      folderIcon: '@clbFileBrowserFolderIcon',\n      folderLabel: '@clbFileBrowserFolderLabel'\n    },\n    link: function(scope, element, attrs, ctrl) {\n      // make the parent directive controller available in the scope\n      scope.browserView = ctrl;\n    }\n  };\n}\n","angular.module('clb-ui-storage')\n.directive('clbFileBrowserPath', clbFileBrowserPath);\n\n/**\n * @namespace clbFileBrowserPath\n * @desc\n * clbFileBrowserPath directive is a child of clbFileBrowser directive\n * that renders the breadcrumb according to the file browser setup.\n *\n * @example\n * <clb-file-browser-path></clb-file-browser-path>\n *\n * @memberof module:clb-ui-storage.clbFileBrowser\n * @param  {object} clbStorage Angular DI\n * @return {object} Angular Directive\n */\nfunction clbFileBrowserPath(clbStorage) {\n  return {\n    restrict: 'E',\n    require: '^clbFileBrowser',\n    templateUrl: 'file-browser-path.directive.html',\n    link: function(scope, element, attrs, ctrl) {\n      var handleAncestors = function(ancestors) {\n        scope.ancestors = ancestors;\n      };\n\n      var update = function() {\n        if (ctrl.currentEntity) {\n          clbStorage.getAncestors(ctrl.currentEntity, ctrl.rootEntity)\n          .then(handleAncestors, ctrl.setError);\n        } else {\n          handleAncestors(null);\n        }\n      };\n\n      scope.browserView = ctrl;\n\n      scope.$watch('browserView.currentEntity', function(value) {\n        update(value);\n      });\n    }\n  };\n}\n","angular.module('clb-ui-storage')\n.run(function($templateCache) {\n  // During the build, templateUrl will be replaced by the inline template.\n  // We need to inject it in template cache as it is used for displaying\n  // the tooltip. Does it smell like a hack? sure, it is a hack!\n  var injector = {\n    templateUrl: 'file-browser-tooltip.tpl.html'\n  };\n  // If defined, it means that the template has been inlined during build.\n  if (injector.template) {\n    $templateCache.put('file-browser-tooltip.tpl.html', injector.template);\n  }\n});\n","angular.module('clb-ui-storage')\n.directive('clbFileBrowser', clbFileBrowser);\n\n// --------------- //\n\n/**\n * @namespace clbFileBrowser\n * @desc\n * clbFileBrowser Directive\n *\n * This directive renders a file browser. It handles creation of folder,\n * mutliple file uploads and selection of entity. Focus selection change can be\n * detected by listening to the event ``clbFileBrowser:focusChanged``.\n *\n *\n * Attributes\n * ----------\n *\n * ===================================  ==========================================================\n * Parameter                            Description\n * ===================================  ==========================================================\n * ``{EntityDescriptor} [clb-root]``    A project or a folder that will be the root of the tree.\n * ``{EntityDescriptor} [clb-entity]``  The selected entity.\n * ===================================  ==========================================================\n *\n *\n * Events\n * ------\n *\n * ================================  ==========================================================\n * clbFileBrowser:focusChanged       Emitted when the user focus a new file or folder\n * clbFileBrowser:startCreateFolder  Emitted when the user start to create a new folder\n * ================================  ==========================================================\n *\n * @example <caption>Simple directive usage</caption>\n * <clb-file-browser clb-root=\"someProjectEntity\"\n *                   clb-entity=\"someSubFolderEntity\">\n * </clb-file-browser>\n *\n * @memberof module:clb-ui-storage\n * @return {object} Angular Directive\n * @param {object} lodash Angular DI\n */\nfunction clbFileBrowser(lodash) {\n  return {\n    restrict: 'E',\n    scope: {\n      entity: '=?clbEntity',\n      root: '=clbRoot'\n    },\n    templateUrl: 'file-browser.directive.html',\n    link: clbFileBrowserLink,\n    controllerAs: 'browserView',\n    controller: FileBrowserViewModel\n  };\n\n  /**\n   * @namespace FileBrowserViewModel\n   * @desc\n   * ViewModel of the clbFileBrowser directive. This instance is\n   * accessible by all direct children of the file browser.\n   *\n   * It is responsible to handle all the interactions between the user\n   * and the services. It does not update the views directly but sends\n   * the relevant events when necessary.\n   * @memberof module:clb-ui-storage.clbFileBrowser\n   * @param {object} $scope     Angular DI\n   * @param {object} $log       Angular DI\n   * @param {object} $q         Angular DI\n   * @param {object} $timeout   Angular DI\n   * @param {object} clbStorage Angular DI\n   */\n  function FileBrowserViewModel(\n    $scope,\n    $log,\n    $q,\n    $timeout,\n    clbStorage\n  ) {\n    var vm = this;\n    vm.currentEntity = null; // the (container) entity that this view currently describe\n    vm.folders = []; // array of displayed folder\n    vm.hasMoreFolders = false;\n    vm.files = [];   // array of displayed files\n    vm.uploads = []; // array of file currently uploading\n    vm.hasMoreFiles = false;\n    vm.selectedEntity = null; // currently focused entity\n    vm.rootEntity = null; // the top level entity;\n    vm.isRoot = true;\n    vm.error = null;\n    vm.isLoading = true;\n    vm.canEdit = false;\n    vm.thumbnailUrl = null; // current file thumbnail if any\n\n    vm.init = init;\n    vm.handleFocus = handleFocusEvent;\n    vm.handleNavigation = handleNavigationEvent;\n    vm.loadMoreFiles = loadMoreFiles;\n    vm.loadMoreFolders = loadMoreFolders;\n    vm.onFileChanged = onFileChanged;\n    vm.startCreateFolder = startCreateFolder;\n    vm.doCreateFolder = doCreateFolder;\n    vm.cancelCreateFolder = cancelCreateFolder;\n    vm.defineThumbnailUrl = defineThumbnailUrl;\n    vm.isEmpty = isEmpty;\n\n    // ---------------- //\n\n    var currentUpdate;\n    var folderLoader;\n    var fileLoader;\n\n    /**\n     * Initialize the controller\n     * @param  {EntityDescriptor} rootEntity    Cannot get past this ancestor\n     * @param  {EntityDescriptor} currentEntity The selected entity\n     * @private\n     */\n    function init(rootEntity, currentEntity) {\n      vm.rootEntity = rootEntity;\n      currentUpdate = update(currentEntity || rootEntity);\n    }\n\n    /**\n     * @method handleFocus\n     * @desc\n     * When the user focus on a browser item,\n     * emit a 'clbFileBrowser:focusChanged' event.\n     *\n     * The event signature is (event, newEntity, previousEntity).\n     *\n     * @param  {Object} entity selected entity\n     * @memberof module:clb-ui-storage.clbFileBrowser.FileBrowserViewModel\n     */\n    function handleFocusEvent(entity) {\n      if (entity === vm.selectedEntity) {\n        return;\n      }\n      $scope.$emit('clbFileBrowser:focusChanged', entity, vm.selectedEntity);\n      vm.selectedEntity = entity;\n    }\n\n    /**\n     * @method handleNavigation\n     * @desc When the current context change, trigger a navigation update.\n     *\n     * This will render the view for the new current entity. All navigations\n     * are chained to ensure that the future view will end in a consistant\n     * state. As multiple requests are needed to render a view, request result\n     * would sometimes finish after a new navigation event already occured.\n     *\n     * @param  {Object} entity the new current entity\n     * @return {promise} resolve when the navigation is done.\n     * @memberof module:clb-ui-storage.clbFileBrowser.FileBrowserViewModel\n     */\n    function handleNavigationEvent(entity) {\n      if (angular.isUndefined(entity) || entity === vm.currentEntity) {\n        return;\n      }\n      currentUpdate = currentUpdate.finally(function() {\n        return update(entity);\n      });\n      return currentUpdate;\n    }\n\n    /**\n     * Handle error case\n     * @private\n     * @param {object} err The error to set\n     */\n    function setError(err) {\n      $log.error('error catched by file browser:', err);\n      vm.error = err;\n      vm.isLoading = false;\n    }\n\n    /**\n     * @private\n     */\n    function startCreateFolder() {\n      vm.showCreateFolder = true;\n      $timeout(function() {\n        // the event is captured by the directive scope in order to update\n        // the DOM. I choose to not update the DOM in the ViewModel but\n        // rather in the directive link function.\n        $scope.$emit('clbFileBrowser:startCreateFolder');\n      });\n    }\n\n    /**\n     * @private\n     * @param  {Event} $event The browser event\n     */\n    function doCreateFolder($event) {\n      $event.preventDefault();\n      clbStorage.create('folder', vm.currentEntity, vm.newFolderName)\n      .then(function(entity) {\n        vm.newFolderName = '';\n        return update(entity);\n      })\n      .then(function() {\n        vm.showFileUpload = true;\n      })\n      .catch(setError);\n    }\n\n    /**\n     * @private\n     */\n    function cancelCreateFolder() {\n      vm.newFolderName = '';\n      vm.showCreateFolder = false;\n    }\n\n    /**\n     * Promise fulfilment contains the nearest container. Either the current\n     * entity if it is a container, or its parent.\n     * @param  {EntityDescriptor} entity The starting point entity\n     * @return {Promise}          Fulfilment of the promise retrieve a container entity\n     */\n    function nearestContainer(entity) {\n      if (!entity) {\n        return $q.when(null);\n      }\n      if (clbStorage.isContainer(entity)) {\n        return $q.when(entity);\n      }\n      // Set the currentEntity to the parent and then focus the file\n      return clbStorage.getEntity(entity.parent);\n    }\n\n    /**\n     * [update description]\n     * @param  {EntityDescriptor} entity [description]\n     * @return {Promise}        Resolve after update completion\n     */\n    function update(entity) {\n      return nearestContainer(entity).then(function(container) {\n        vm.isLoading = true;\n        vm.currentEntity = container;\n        vm.selectedEntity = entity;\n        vm.error = null;\n        vm.parent = null;\n        vm.files = null;\n        vm.folders = null;\n        vm.uploads = [];\n        vm.showFileUpload = false;\n        vm.showCreateFolder = false;\n        assignIsRoot(container);\n        assignCanEdit(container);\n\n        // special exit case for the storage root\n        if (!container) {\n          return clbStorage.getChildren(null)\n          .then(function(rs) {\n            return rs.toArray();\n          })\n          .then(function(projects) {\n            vm.folders = projects;\n            vm.isLoading = false;\n          })\n          .catch(setError);\n        }\n\n        var promises = [];\n\n        // define the new parent entity\n        if (!vm.isRoot && container.parent) {\n          promises.push(\n            clbStorage.getEntity(container.parent).then(assignParentEntity)\n          );\n        }\n\n        // define the view folders\n        folderLoader = clbStorage.getChildren(container, {\n          accept: ['folder'],\n          acceptLink: false\n        }).instance;\n        vm.folders = folderLoader.results;\n        promises.push(\n          folderLoader.promise\n          .then(afterLoadFolders)\n        );\n\n        fileLoader = clbStorage.getChildren(container, {\n          accept: ['file'],\n          acceptLink: false\n        }).instance;\n        vm.files = fileLoader.results;\n        promises.push(\n          fileLoader.promise\n          .then(afterLoadFiles)\n        );\n\n        return $q.all(promises).then(function() {\n          vm.isLoading = false;\n        });\n      })\n      .catch(setError);\n    }\n\n    /**\n     * Load the next page of file entities for the current entity.\n     *\n     * @return {Promise} resolve when the files are loaded\n     * @memberof module:clb-ui-storage.clbFileBrowser.FileBrowserViewModel\n     */\n    function loadMoreFiles() {\n      return fileLoader.next()\n      .then(afterLoadFiles)\n      .catch(setError);\n    }\n\n    /**\n     * Load the next page of folder entities for the current entity.\n     *\n     * @return {Promise} resolve when the folders are loaded\n     * @memberof module:clb-ui-storage.clbFileBrowser.FileBrowserViewModel\n     */\n    function loadMoreFolders() {\n      return folderLoader.next()\n      .then(afterLoadFolders)\n      .catch(setError);\n    }\n\n    /**\n     * @private\n     */\n    function afterLoadFiles() {\n      vm.hasMoreFiles = fileLoader.hasNext;\n    }\n\n    /**\n     * @private\n     */\n    function afterLoadFolders() {\n      vm.hasMoreFolders = folderLoader.hasNext;\n    }\n\n    /**\n     * @private\n     * @param  {EntityDescriptor} entity [description]\n     */\n    function assignIsRoot(entity) {\n      if (!entity) {\n        vm.isRoot = true;\n      } else if (vm.rootEntity) {\n        vm.isRoot = (entity.uuid === vm.rootEntity.uuid);\n      } else {\n        vm.isRoot = false;\n      }\n    }\n\n    /**\n     * @private\n     * @param  {EntityDescriptor} entity The parent entity\n     */\n    function assignParentEntity(entity) {\n      vm.parent = entity;\n    }\n\n    /**\n     * Upload files that the user just added to the uploader widget.\n     *\n     * @param  {Array} files array of File\n     */\n    function onFileChanged(files) {\n      lodash.each(files, function(f) {\n        upload(f)\n        .then(function(entity) {\n          vm.files.push(entity);\n        });\n      });\n      vm.showFileUpload = false;\n    }\n\n    /**\n     * Create a file entity and upload its associated content.\n     *\n     * @param  {File} file the file to create and upload\n     * @return {Promise} resolve when the file has been uploaded\n     */\n    function upload(file) {\n      var uploadInfo = {\n        content: file,\n        state: null\n      };\n      vm.uploads.push(uploadInfo);\n      return clbStorage.upload(file, {\n        parent: vm.currentEntity\n      })\n      .then(function(entity) {\n        // update file status\n        file.state = 'success';\n        lodash.remove(vm.uploads, function(info) {\n          return info === uploadInfo;\n        });\n        return entity;\n      }, function(err) {\n        $log.error('upload error:', err);\n        uploadInfo.state = 'error';\n        setError(err);\n        return $q.reject(err);\n      }, function(progressEvent) {\n        if (progressEvent && progressEvent.lengthComputable) {\n          // update file status\n          uploadInfo.state = 'progress';\n          uploadInfo.progress = progressEvent;\n          uploadInfo.progress.percentage = (progressEvent.loaded * 100) /\n            progressEvent.total;\n        }\n      });\n    }\n\n    /**\n     * Set the thumbnailUrl.\n     * @param  {EntityDescriptor} file a file entity\n     */\n    function defineThumbnailUrl(file) {\n      vm.thumbnailUrl = null;\n      if (file.content_type && file.content_type.match(/^image\\//)) {\n        clbStorage.downloadUrl(file).then(function(res) {\n          vm.thumbnailUrl = res;\n        });\n      }\n    }\n\n    var lastAssignCanEditRequest = $q.when();\n    /**\n     * @private\n     * @param  {EntityDescriptor} entity a file entity\n     * @return {Promise}        [description]\n     */\n    function assignCanEdit(entity) {\n      lastAssignCanEditRequest = lastAssignCanEditRequest\n      .then(function() {\n        if (!entity) {\n          vm.canEdit = false;\n          return;\n        }\n        return clbStorage.getUserAccess(entity).then(function(acl) {\n          vm.canEdit = acl.canWrite;\n        });\n      });\n      return lastAssignCanEditRequest;\n    }\n\n    /**\n     * @private\n     * @return {boolean} if the current folder is empty\n     */\n    function isEmpty() {\n      return !vm.isLoading &&\n        (!vm.folders || vm.folders.length === 0) &&\n        (!vm.files || vm.files.length === 0);\n    }\n  }\n}\n\n/**\n * @private\n * @param  {object} scope   Angular DI\n * @param  {Element} elt    Angular DI\n * @param  {object} attrs   Angular DI\n * @param  {object} ctrl    Angular DI\n */\nfunction clbFileBrowserLink(scope, elt, attrs, ctrl) {\n  // run the init function once, when the root has been defined.\n  // this ensure the main page is not loaded first with all projects,\n  // then with the correct root.\n  var delWaitForRootWatcher = scope.$watch('root', function(root) {\n    if (angular.isUndefined(root)) {\n      return;\n    }\n    ctrl.init(root, scope.entity);\n    var delEntityWatcher = scope.$watch('entity', function(value) {\n      ctrl.handleNavigation(value);\n    });\n    scope.$on('$destroy', delEntityWatcher);\n    delWaitForRootWatcher();\n  });\n  scope.$on('$destroy', delWaitForRootWatcher);\n  scope.$on('clbFileBrowser:startCreateFolder', function(evt) {\n    evt.preventDefault();\n    elt[0].querySelector('.new-folder-name').focus();\n  });\n}\n","angular.module('clb-ui-storage')\n.directive('clbFileChooser', clbFileChooser);\n\n/**\n * The ``clbFileChooser`` directive let you browse the storage to pick a file.\n *\n * ====================  ===========================================================\n * Name                  Description\n * ====================  ===========================================================\n * [clb-root]            Cannot go beyond this ancestor in the browser\n * [ng-model]            The ngModel to bind to the chosen value\n * [clb-validate]        a string, array of string, regex or function (can be async)\n * ====================  ===========================================================\n *\n * The directive emit the following events:\n *\n * =============================  ====================================================\n * Name                           Description\n * =============================  ====================================================\n * clbFileChooser:fileSelected    The second parameter is the EntityDescriptor\n * clbFileChooser:cancel          The second parameter is the initial EntityDescriptor\n * =============================  ====================================================\n *\n * @namespace clbFileChooser\n * @memberof module:clb-ui-storage\n * @param {object} $q   Angular DI\n * @param {object} $log Angular DI\n * @return {object} Entity Descriptor\n */\nfunction clbFileChooser($q, $log) {\n  return {\n    restrict: 'E',\n    require: '^ngModel',\n    scope: {\n      root: '=clbRoot',\n      ngModel: '=',\n      validate: '=?clbValidate'\n    },\n    templateUrl: 'file-chooser.directive.html',\n    link: clbFileChooserLink\n  };\n\n  /**\n   * Linking function for the directive.\n   * @private\n   * @param  {object} scope The scope\n   */\n  function clbFileChooserLink(scope) {\n    /**\n     * A promise that fulfill to a boolean.\n     * @private\n     * @param  {EntityDescriptor}  value The entity to evaluate\n     * @return {Boolean}       true if the value can be chosen\n     */\n    function isValid(value) {\n      $log.debug('check validity of', value);\n      if (!value) {\n        return;\n      }\n      if (angular.isString(scope.validate)) {\n        $log.debug('string comparison', scope.validate === value.content_type);\n        return scope.validate === value.content_type;\n      }\n      if (angular.isArray(scope.validate)) {\n        return scope.validate.indexOf(value.content_type) !== -1;\n      }\n      if (scope.validate instanceof RegExp) {\n        return value && value.content_type.match(scope.validate);\n      }\n      if (angular.isFunction(scope.validate)) {\n        return scope.validate(value);\n      }\n      return true;\n    }\n\n    scope.$on('clbFileBrowser:focusChanged', function(event, value) {\n      return $q.when(isValid(value)).then(function(result) {\n        $log.debug('valid entity', result);\n        if (result) {\n          scope.currentSelection = value;\n        }\n        scope.canChooseCurrentEntity = result;\n      });\n    });\n\n    scope.doChooseEntity = function() {\n      if (scope.currentSelection) {\n        scope.ngModel = scope.currentSelection;\n        $log.debug('file selection changed', scope.currentSelection);\n        scope.$emit('clbFileChooser:fileSelected', scope.currentSelection);\n      }\n    };\n\n    scope.doCancel = function() {\n      scope.ngModel = scope.initialValue;\n      scope.$emit('clbFileChooser:cancelSelection', scope.initialValue);\n    };\n\n    scope.initialValue = scope.ngModel;\n    scope.currentSelection = scope.ngModel;\n    scope.canChooseCurrentEntity = isValid(scope.currentSelection);\n  }\n}\n","/**\n * @namespace clbFileUpload\n * @desc\n * clbFileUpload directive.\n *\n * Provide an upload widget where user can stack files that should be\n * uploaded at some point. The directive doesn't proceed to upload by itself\n * but rather triggers the onDrop callback.\n *\n * The directive accepts the following attributes:\n *\n * - on-drop: a function to call when one or more files are dropped or selected\n *   the callback will receive an array of File instance.\n * - on-error: a function to call when an error occurs. It receives an HbpError\n *   instance in parameter.\n *\n * @example\n * <clb-file-upload on-drop=\"handleFileUpload(files)\"\n *                       on-error=\"handleError(error)\">\n * </clb-file-upload>\n * @memberof module:clb-ui-storage\n */\nangular.module('clb-ui-storage')\n.directive('clbFileUpload', function() {\n  'use strict';\n  return {\n    templateUrl: 'file-upload.directive.html',\n    restrict: 'E',\n    scope: {\n      onDrop: '&',\n      onError: '&',\n      foldersAllowed: '='\n    },\n    link: function(scope, element) {\n      var processDragOver = function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n      };\n\n      var processDragEnter = function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        scope.dragEntered = true;\n        scope.$apply();\n      };\n\n      var processDragLeave = function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        scope.dragEntered = false;\n        scope.$apply();\n      };\n\n      scope.processDrop = function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!event.dataTransfer && event.originalEvent) {\n          event.dataTransfer = event.originalEvent.dataTransfer;\n        }\n\n        scope.dragEntered = false;\n\n        if (!scope.foldersAllowed) {\n          var folders = getFolders(event.dataTransfer);\n          if (folders.length > 0) {\n            var err = new Error('Folders not allowed');\n            err.name = 'foldersNotAllowed';\n            err.files = folders;\n            scope.onError({error: err});\n            return false;\n          }\n        }\n\n        scope.onDrop({files: event.dataTransfer.files});\n      };\n\n      /**\n       * return the list of folders in the input dataTransfer object\n       * @private\n       * @param {DataTransfer} dataTransfer contains folder and files\n       * @return {array/File}               contain only folders\n       */\n      function getFolders(dataTransfer) {\n        var retList = [];\n\n        // supported by chrome only\n        var items = dataTransfer.items;\n        if (items) {\n          for (var i = 0; i < items.length; i++) {\n            if (items[i].webkitGetAsEntry().isDirectory) {\n              retList.push(items[i].webkitGetAsEntry().name);\n            }\n          }\n        } else {\n          // check if unix folders\n          var files = dataTransfer.files;\n          for (var j = 0; j < files.length; j++) {\n            // assuming that the chances a (dropped) file is exactly multiple of 4k are low\n            if (files[j].size % 4096 === 0) {\n              retList.push(files[j].name);\n            }\n          }\n        }\n\n        // Safari is detecting the error when trying to upload it\n\n        // not covered case: FF on OSX\n\n        return retList;\n      }\n\n      scope.onFileChanged = function(files) {\n        scope.onDrop({files: files});\n      };\n\n      // enter\n      element.on('dragover', processDragOver);\n      element.on('dragenter', processDragEnter);\n      // exit\n      element.on('dragleave', processDragLeave);\n\n      element.on('drop', scope.processDrop);\n    }\n  };\n});\n","angular.module('clb-ui-stream')\n.directive('clbActivity', clbActivity);\n\n/**\n * @name clbActivity\n * @desc\n * ``clb-activity`` directive is displays an activity retrieved by\n * the HBP Stream service in a common way.\n *\n * It try to look up for a detailled description of the event and fallback\n * to the summary if he cannot.\n *\n * @memberof module:clb-ui-stream\n * @return {object} the directive\n */\nfunction clbActivity() {\n  return {\n    restrict: 'A',\n    scope: {\n      activity: '=clbActivity'\n    },\n    controller: ActivityController,\n    controllerAs: 'vm',\n    bindToController: true,\n    templateUrl: 'activity.directive.html',\n    link: {\n      post: function(scope, elt, attr, ctrl) {\n        elt.addClass('clb-activity').addClass(ctrl.verbClass);\n        scope.$watch('vm.activity.verb', function(newVal) {\n          if (newVal) {\n            elt.addClass('clb-activity-' + newVal.toLowerCase());\n          }\n        });\n      }\n    }\n  };\n}\n\n/**\n * ViewModel of an activity used to render the clb-activity directive\n * @param {object} $scope    DI\n * @param {object} $sce      DI\n * @param {object} $log      DI\n * @param {object} $window   DI\n * @param {object} $q        DI\n * @param {object} $compile  DI\n * @param {object} clbResourceLocator DI\n * @param {object} clbErrorDialog DI\n */\nfunction ActivityController(\n  $scope,\n  $sce,\n  $log,\n  $window,\n  $q,\n  $compile,\n  clbResourceLocator,\n  clbErrorDialog\n) {\n  var vm = this;\n  vm.navigate = function(event, data) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (!angular.isDefined(data)) {\n      $scope.$emit('clbActivity.interaction', {\n        action: 'usePrimaryNavigation',\n        tag: 'object'\n      });\n      $window.location = vm.primaryLink;\n    } else if (data.ref && data.ref.type && data.ref.id) {\n      $scope.$emit('clbActivity.interaction', {\n        action: 'useSecondaryNavigation',\n        tag: data.tag\n      });\n      clbResourceLocator.urlFor(data.ref, vm.activity)\n      .then(function(url) {\n        $window.location = url;\n      })\n      .catch(function(err) {\n        $scope.$emit('clbActivity.interaction', {\n          action: 'secondaryNavigationFailed',\n          tag: data.tag\n        });\n        clbErrorDialog.open({\n          type: 'Not Found',\n          message: 'The system cannot generate a valid URL ' +\n                   'to display this object.',\n          code: 400,\n          data: {\n            error: err\n          }\n        });\n      });\n    } else {\n      $scope.$emit('clbActivity.interaction', {\n        action: 'openUserDetails',\n        tag: 'actor'\n      });\n    }\n  };\n\n  vm.resolveUrl = function(data) {\n    clbResourceLocator.urlFor(data.ref, vm.activity)\n    .then(function(url) {\n      data.url = url;\n    });\n  };\n\n  activate();\n\n  /* ------------- */\n\n  /**\n   * Replace references in the summary with proper names and links.\n   *\n   * This is a naive implementation. using an array of string that is\n   * concatenated at the end. The advantage is that I don't have to\n   * sort the references before processing them so the code is a bit\n   * easier to read.\n   * @private\n   * @return {object} the list of parts as object with keys `tag`, `text` and `ref`.\n   */\n  function resolveReferences() {\n    // Using a linked list to segment the text.\n    var root = {\n      // root only has a next property\n      next: {\n        // The node data\n        data: {\n          tag: null,\n          ref: null\n        },\n        indices: [0, vm.activity.summary.length],\n        next: null\n      }\n    };\n\n    // flatten the list of references\n    if (vm.activity.references) {\n      for (var tag in vm.activity.references) {\n        if (Object.prototype.hasOwnProperty.call(\n            vm.activity.references, tag)) {\n          var refs = vm.activity.references[tag];\n          if (!angular.isArray(refs)) {\n            refs = [refs];\n          }\n          for (var i = 0; i < refs.length; i++) {\n            var ref = refs[i];\n            processRef(root, tag, ref.indices);\n          }\n        }\n      }\n    }\n\n    var head = root.next;\n    var parts = [];\n    while (head) {\n      head.data.text = String.prototype.substring.apply(\n        vm.activity.summary, head.indices);\n      // disable object link for 'delete' verb\n      if (vm.activity.verb === 'DELETE' &&\n          head.data.tag === 'object') {\n        head.data.tag = null;\n      }\n      parts.push(head.data);\n      head = head.next;\n    }\n    return parts;\n  }\n\n  /**\n   * Used by resolveReferences.\n   * @private\n   * @param  {object} root         The linked list root\n   * @param  {string} tag          position in the sentence (actor|object|context)\n   * @param  {array}  indices      [startIndex, endIndex]\n   */\n  function processRef(root, tag, indices) {\n    // previous -> head -> next\n\n    var previous = root;\n    var head = root.next;\n    // Find the last node which has an end index greater\n    // than the node to insert. We do not handle the case\n    // where the new node is crossing multiple existing nodes as this would\n    // be invalid data.\n    while (head.next && (\n      indices[0] >= head.indices[1] // cannot be inverted\n                                    // the head indices[1] is +1 after the\n                                    // last char\n    )) {\n      previous = head;\n      head = head.next;\n    }\n\n    // previous -> node|head -> next\n    var node = {\n      next: null,\n      indices: indices,\n      data: {\n        tag: tag,\n        ref: vm.activity[tag]\n      }\n    };\n\n    if (head.indices[0] < indices[0]) {\n      // previous -> head:before -> node\n      // head -> next\n      var before = angular.copy(head);\n      before.indices[1] = indices[0]; // stop where the new part begin\n      before.next = node;\n      previous.next = before;\n      previous = before;\n    } else if (previous) {\n      // previous -> node\n      // head -> next\n      previous.next = node;\n    }\n\n    // previous -> node\n    // head -> next\n    if (head.indices[1] > indices[1]) {\n      // previous -> node -> head -> next\n      head.indices[0] = indices[1];\n      node.next = head;\n    } else {\n      // previous -> node -> next\n      node.next = head.next;\n    }\n  }\n\n  /**\n   * init controller\n   */\n  function activate() {\n    clbResourceLocator.urlFor(vm.activity.object, vm.activity)\n    .then(function(url) {\n      vm.primaryLink = url;\n    })\n    .catch(function(err) {\n      $log.warn('unclickable activity', err);\n    });\n\n    vm.parts = resolveReferences();\n  }\n}\n","angular.module('clb-ui-stream')\n.directive('clbFeed', clbFeed);\n\n/**\n * @name clbFeed\n * @desc\n * ``clb-feed`` directive displays a feed of activity retrieved by\n * the HBP Stream service. It handles scrolling and loading of activities.\n * Each activity is rendered using the ``clb-activity`` directive.\n *\n * @memberof module:clb-ui-stream\n * @return {object} the directive\n */\nfunction clbFeed() {\n  return {\n    restrict: 'E',\n    scope: {\n      feedType: '=clbFeedType',\n      feedId: '=clbFeedId'\n    },\n    controller: FeedController,\n    controllerAs: 'vm',\n    bindToController: true,\n    templateUrl: 'feed.directive.html',\n    link: function(scope, elt) {\n      elt.addClass('clb-feed');\n      var unbind = scope.$on(\n        'clbActivity.interaction',\n        function($event, data) {\n          data.feedType = scope.feedType;\n          scope.$emit('clbFeed.interaction', data);\n        }\n      );\n      scope.$on('$destroy', unbind);\n    }\n  };\n}\n\n/**\n * ViewModel of an activity used to render the clb-activity directive\n * @param {object} $rootScope angular injection\n * @param {object} clbStream DI\n * @param {object} clbUser DI\n */\nfunction FeedController($rootScope, clbStream, clbUser) {\n  var vm = this;\n\n  if (vm.feedType === 'HBPCollab') {\n    vm.pageSize = 15;\n  }\n\n  vm.feedDate = null;\n\n  activate();\n\n  $rootScope.$on('feedDate.changed', function(event, data) {\n    vm.feedDate = data;\n    activate();\n  });\n  /* ------------- */\n\n  function hydrateActors(activities) {  // eslint-disable-line require-jsdoc\n    if (!activities || activities.length === 0) {\n      return;\n    }\n\n    var acc = [];\n    for (var i = 0; i < activities.length; i++) {\n      if (activities[i].actor.type === 'HBPUser') {\n        acc.push(activities[i].actor.id);\n      }\n    }\n    return clbUser.get(acc)\n    .then(function(users) {\n      for (var i = 0; i < activities.length; i++) {\n        var actor = activities[i].actor;\n        if (actor.type === 'HBPUser' && users[actor.id]) {\n          actor.data = users[actor.id];\n        }\n      }\n    });\n  }\n\n  /**\n   * init controller\n   */\n  function activate() {\n    vm.loadingFeed = true;\n    clbStream.getStream(vm.feedType, vm.feedId, {\n      resultsFactory: hydrateActors,\n      date: vm.feedDate,\n      pageSize: vm.pageSize\n    })\n    .then(function(rs) {\n      vm.activities = rs;\n    })\n    .catch(function(err) {\n      vm.error = err.message;\n    }).finally(function() {\n      vm.loadingFeed = false;\n    });\n  }\n}\n","angular.module('clb-identity')\n.factory('clbGroup', clbGroup);\n\n/**\n * ``clbGroup`` service let you retrieve and edit groups.\n *\n * @namespace clbGroup\n * @memberof module:clb-identity\n * @param  {object} $rootScope      Angular DI\n * @param  {object} $q              Angular DI\n * @param  {object} clbAuthHttp           Angular DI\n * @param  {object} $cacheFactory   Angular DI\n * @param  {object} lodash          Angular DI\n * @param  {object} clbEnv          Angular DI\n * @param  {object} clbError        Angular DI\n * @param  {object} clbResultSet    Angular DI\n * @param  {object} clbIdentityUtil Angular DI\n * @return {object} Angular Service\n */\nfunction clbGroup(\n  $rootScope,\n  $q,\n  clbAuthHttp,\n  $cacheFactory,\n  lodash,\n  clbEnv,\n  clbError,\n  clbResultSet,\n  clbIdentityUtil\n) {\n  var groupsCache = $cacheFactory('hbpGroupsCache');\n  var groupUrl = clbEnv.get('api.user.v1') + '/group';\n\n  var service = {\n    get: get,\n    getByName: getByName,\n    create: createGroup,\n    update: updateGroup,\n    delete: deleteGroup,\n    getMembers: getMembers,\n    getEpflSyncMembers: getEpflSyncMembers,\n    getMemberGroups: getMemberGroups,\n    getAdmins: getAdmins,\n    getAdminGroups: getAdminGroups,\n    getParentGroups: getParentGroups,\n    getManagedGroups: getManagedGroups,\n    list: list,\n    search: search\n  };\n\n  lodash.each(['members', 'admins', 'member-groups', 'admin-groups'],\n    function(rel) {\n      var batchQuery = function(groupName, relIds, method) {\n        relIds = lodash.isArray(relIds) ? relIds : [relIds];\n        return $q.all(lodash.map(relIds, function(relId) {\n          var url = [groupUrl, groupName, rel, relId].join('/');\n          return clbAuthHttp({\n            method: method,\n            url: url\n          }).then(function() {\n            return relId;\n          });\n        })).catch(clbError.rejectHttpError);\n      };\n      service[lodash.camelCase('add-' + rel)] = function(groupName, relIds) {\n        return batchQuery(groupName, relIds, 'POST');\n      };\n      service[lodash.camelCase('remove-' + rel)] = function(groupName, relIds) {\n        return batchQuery(groupName, relIds, 'DELETE');\n      };\n    }\n  );\n\n  return service;\n\n  /**\n   * Return pagination config to pass to ``clbResultSet.get``.\n   * @param  {string} pluralType Plural form to look for in the results\n   * @param  {function} factory  Factory function to use to build a batch of results\n   * @return {object}            Options to pass to ``clbResultSet.get``\n   */\n  function paginationOptions(pluralType, factory) {\n    return {\n      nextUrlKey: '_links.next.href',\n      previousUrlKey: '_links.prev.href',\n      resultKey: '_embedded.' + pluralType,\n      countKey: 'page.totalElements',\n      resultsFactory: factory\n    };\n  }\n\n  /**\n   * @name get\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Return a promise that will resolve to a group\n   * based on the given `id`.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {String} groupId name of the group\n   * @return {Promise} a promise that resolves to a group\n   */\n  function get(groupId) {\n    return clbAuthHttp.get(groupUrl + '/' + groupId).then(function(resp) {\n      return resp.data;\n    }, clbError.rejectHttpError);\n  }\n\n  /**\n   * @name getMembers\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Return a promise that will resolve to a paginatedResultSet of user\n   * representing all the members of `groupId`.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {String}  groupId name of the group\n   * @param  {object}  [options] query options\n   * @param  {function} [options.factory] a function called with a list of\n   *                    result to build\n   * @param  {string} [options.sort] sort key as ``'attributeName,DESC'`` or ``'attributeName,ASC'``\n   * @return {Promise} resolve to a ResultSet instance\n   */\n  function getMembers(groupId, options) {\n    options = angular.extend({}, options);\n    return clbResultSet.get(\n      clbAuthHttp.get(groupUrl + '/' + groupId + '/members', {\n        params: clbIdentityUtil.queryParams(options)\n      }),\n      paginationOptions('users', options.factory)\n    );\n  }\n\n  /**\n   * @name getEpflSyncMembers\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Return a promise that will resolve to a paginatedResultSet of user\n   * representing all the epfl syncronized members of a group.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {String}  groupName name of the group\n   * @param  {object}  [options] query options\n   * @param  {function} [options.factory] a function called with a list of\n   *                    result to build\n   * @return {Promise} resolve to a ResultSet instance\n   */\n  function getEpflSyncMembers(groupName, options) {\n    options = angular.extend({}, options);\n    return clbResultSet.get(\n      clbAuthHttp.get(groupUrl + '/' + groupName + '/epfl-synced-members', {\n        params: clbIdentityUtil.queryParams()\n      }),\n      paginationOptions('users', options.factory)\n    );\n  }\n\n  /**\n   * @name getMemberGroups\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Return a promise that will resolve to a paginatedResultSet of groups\n   * representing all the group members of `groupName`.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {String}  groupName name of the group\n   * @param  {object}  [options] query options\n   * @param  {function} [options.factory] a function called with a list of\n   *                    result to build\n   * @return {Promise} resolve to a ResultSet instance\n   */\n  function getMemberGroups(groupName, options) {\n    options = angular.extend({}, options);\n    return clbResultSet.get(\n      clbAuthHttp.get(groupUrl + '/' + groupName + '/member-groups', {\n        params: clbIdentityUtil.queryParams(options)\n      }),\n      paginationOptions('groups', options.factory)\n    );\n  }\n\n  /**\n   * @name getAdmins\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Return a promise that will resolve to a paginatedResultSet of groups\n   * representing all the group that can administrate `groupName`.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {String}  groupName name of the group\n   * @param  {object}  [options] query options\n   * @param  {function} [options.factory] a function called with a list of\n   *                    result to build\n   * @return {Promise} resolve to a ResultSet instance\n   */\n  function getAdmins(groupName, options) {\n    options = angular.extend({}, options);\n    return clbResultSet.get(\n      clbAuthHttp.get(groupUrl + '/' + groupName + '/admins', {\n        params: clbIdentityUtil.queryParams(options)\n      }),\n      paginationOptions('users', options.factory)\n    );\n  }\n\n  /**\n   * @name getAdminGroups\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Return a promise that will resolve to a paginatedResultSet of groups\n   * representing all the group that can administrate `groupName`.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {String}  groupName name of the group\n   * @param  {object}  [options] query options\n   * @param  {function} [options.factory] a function called with a list of\n   *                    result to build\n   * @return {Promise} resolve to a ResultSet instance\n   */\n  function getAdminGroups(groupName, options) {\n    options = angular.extend({}, options);\n    return clbResultSet.get(\n      clbAuthHttp.get(groupUrl + '/' + groupName + '/admin-groups', {\n        params: clbIdentityUtil.queryParams(options)\n      }),\n      paginationOptions('groups', options.factory)\n    );\n  }\n\n  /**\n   * @name getParentGroups\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Return a promise that will resolve to a paginatedResultSet of groups\n   * representing all the group that are parent to the current `groupName`.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {String}  groupName name of the group\n   * @param  {object}  [options] query options\n   * @param  {function} [options.factory] a function called with a list of\n   *                    result to build\n   * @return {Promise} resolve to a ResultSet instance\n   */\n  function getParentGroups(groupName, options) {\n    options = angular.extend({}, options);\n    return clbResultSet.get(\n      clbAuthHttp.get(groupUrl + '/' + groupName + '/parent-groups', {\n        params: clbIdentityUtil.queryParams()\n      }),\n      paginationOptions('groups', options.factory)\n    );\n  }\n\n  /**\n   * @name getManagedGroups\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Return a promise that will resolve to a paginatedResultSet of groups\n   * representing all the group that can be administred by `groupName`.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {String}  groupName name of the group\n   * @param  {object}  [options] query options\n   * @param  {function} [options.factory] a function called with a list of\n   *                    result to build\n   * @return {Promise} resolve to a ResultSet instance\n   */\n  function getManagedGroups(groupName, options) {\n    options = angular.extend({}, options);\n    return clbResultSet.get(\n      clbAuthHttp.get(groupUrl + '/' + groupName + '/managed-groups', {\n        params: clbIdentityUtil.queryParams(options)\n      }),\n      paginationOptions('groups', options.factory)\n    );\n  }\n\n  /**\n   * @name create\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Return a promise that will resolve when the group has been created.\n   *\n   * In case of error, the promise is rejected with an HbpError instance.\n   *\n   * @param  {string} name the group name\n   * @param {string} description the group description\n   * @return {Promise} promise of creation completion\n   */\n  function createGroup(name, description) {\n    return clbAuthHttp.post(groupUrl, {\n      name: name,\n      description: description\n    })\n    .then(function(res) {\n      return res.data;\n    })\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Update the given group.\n   *\n   * @param  {object} group a group object with a `name` and a `description`\n   * @return {Promise} resolve to the updated group once the operation is complete\n   */\n  function updateGroup(group) {\n    return clbAuthHttp.patch(groupUrl + '/' + group.name, {\n      // only description field can be updated\n      description: group.description\n    })\n    .then(function(res) {\n      return angular.extend(group, res.data);\n    })\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * @name create\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Return a promise that will resolve when the group has been created.\n   *\n   * In case of error, the promise is rejected with an HbpError instance.\n   *\n   * @param {string} groupId name the group\n   * @return {Promise} promise of creation completion\n   */\n  function deleteGroup(groupId) {\n    return clbAuthHttp.delete(groupUrl + '/' + groupId)\n    .then(function() {\n      return;\n    })\n    .catch(function(res) {\n      return $q.reject(clbError.httpError(res));\n    });\n  }\n\n  /**\n   * @name getByName\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * return the group with the given name.\n   * @param {String} groupName name of the group\n   * @param {Array}  userIds a list of user id string to add to this group\n   * @return {Promise} resolve to a group instance\n   */\n  function getByName(groupName) {\n    var group = groupsCache.get(groupName);\n    if (group) {\n      return $q.when(group);\n    }\n    return list({\n      filter: {name: groupName}\n    }).then(function(resp) {\n      var result;\n      if (resp.results.length === 1) {\n        groupsCache.put(groupName, resp.results[0]);\n        result = resp.results[0];\n      } else if (resp.results.length === 0) {\n        result = undefined;\n      } else {\n        result = $q.reject(clbError.error({\n          type: 'UnexpectedResult',\n          message: 'More than one result has been retrieved'\n        }));\n      }\n      return result;\n    });\n  }\n\n  /**\n   * @name list\n   * @memberOf module:clb-identity.clbGroup\n   * @desc\n   * Retrieves a list of users filtered, sorted and paginated according to the options.\n   *\n   * The returned promise will be resolved with the list of fetched user profiles.\n   *\n   * Available options:\n   *\n   * - sort: properties to sort on. prepend '-'' to reverse order.\n   * - page: page to be loaded (default: 0)\n   * - pageSize: max number or items to be loaded (default: 10)\n   * - filter: fiter object, wildcard admitted in the values\n   * - factory: a function to be used to create object instance from the\n   *            one result\n   * @param  {object} options query options (see `available options`)\n   * @return {Promise} resolves to a ResultSet instance\n   */\n  function list(options) {\n    options = angular.extend({}, options);\n    var params = clbIdentityUtil.queryParams(options);\n    var url = groupUrl;\n\n    if (options.filter) { // search\n      var supportedFilters = ['name', 'description'];\n      url += '/search?';\n      for (var k in options.filter) {\n        if (options.filter.hasOwnProperty(k)) {\n          if (supportedFilters.indexOf(k) === -1) {\n            return $q.reject(clbError.error({\n              type: 'FilterNotSupportedError',\n              message: 'Cannot filter on property: ' + k\n            }));\n          }\n        }\n        var v = options.filter[k];\n        if (angular.isArray(v)) {\n          for (var i = 0; i < v.length; i++) {\n            url += k + '=' + encodeURIComponent(v[i]) + '&';\n          }\n        } else {\n          url += k + '=' + encodeURIComponent(v) + '&';\n        }\n        url = url.slice(0, -1);\n      }\n    }\n\n    return clbResultSet.get(clbAuthHttp.get(url, {\n      params: lodash.omit(params, 'filter')\n    }), paginationOptions('groups', options.factory));\n  }\n\n  /**\n   * Promise a list of groups who matched the given query string.\n   *\n   * @param  {string} queryString the search query\n   * @param  {object} [options]   query options\n   * @param  {int} [options.pageSize] the number of result to retrieve\n   * @param {function} [options.factory] the factory function to use\n   * @return {Promise} will return a ResultSet containing the results\n   */\n  function search(queryString, options) {\n    options = angular.extend({}, options);\n    var params = clbIdentityUtil.queryParams(options);\n    params.str = queryString;\n    var url = groupUrl + '/searchByText';\n    return clbResultSet.get(clbAuthHttp.get(url, {\n      params: params\n    }), paginationOptions('groups', options.factory));\n  }\n}\n","/* eslint max-lines: 0 */\n\nangular.module('clb-identity')\n.factory('clbUser', clbUser);\n\n/**\n * ``clbUser`` service let you retrieve and edit user and groups.\n *\n * @namespace clbUser\n * @memberof module:clb-identity\n * @param  {object} $rootScope      Angular DI\n * @param  {object} $q              Angular DI\n * @param  {object} clbAuthHttp           Angular DI\n * @param  {object} $cacheFactory   Angular DI\n * @param  {object} $log            Angular DI\n * @param  {object} lodash          Angular DI\n * @param  {object} clbEnv          Angular DI\n * @param  {object} clbError        Angular DI\n * @param  {object} clbResultSet    Angular DI\n * @param  {object} clbIdentityUtil Angular DI\n * @return {object} Angular Service\n */\nfunction clbUser(\n  $rootScope,\n  $q,\n  clbAuthHttp,\n  $cacheFactory,\n  $log,\n  lodash,\n  clbEnv,\n  clbError,\n  clbResultSet,\n  clbIdentityUtil\n) {\n  var userCache = $cacheFactory('clbUser');\n  var userUrl = clbEnv.get('api.user.v1') + '/user';\n  // key used to store the logged in user in the cache\n  var currentUserKey = '_currentUser_';\n  activate();\n\n  return {\n    get: getPromiseId2userInfo,\n    getCurrentUserOnly: getCurrentUserOnly,\n    getCurrentUser: getCurrentUser,\n    create: create,\n    update: update,\n    list: list,\n    search: search,\n    isGroupMember: isGroupMember,\n    adminGroups: adminGroups,\n    memberGroups: groups\n  };\n\n  /**\n   * Bootstrap the service\n   * @private\n   */\n  function activate() {\n    $rootScope.$on('user:disconnected', function() {\n      userCache.removeAll();\n    });\n  }\n\n  /**\n   * Create requests with a maximum length of 2000 chars.\n   * @param  {array/any} source Array of params to generate URL for\n   * @param  {string} urlPrefix   The beginning of the URL\n   * @param  {string} destination An array to put all the URL into\n   * @param  {string} argName     Name of the argument\n   * @private\n   */\n  function splitInURl(source, urlPrefix, destination, argName) {\n    if (source.length === 0) {\n      return;\n    }\n    var url = urlPrefix + source[0];\n    var sep = '&' + argName + '=';\n    for (var i = 1; i < source.length; i++) {\n      if (url.length + source[i].length + sep.length < 2000) {\n        // If we still have enough room in the url we add the id to it\n        url += sep + source[i];\n      } else {\n        // We flush the call and start a new one\n        destination.push(url);\n        url = urlPrefix + source[i];\n      }\n    }\n    destination.push(url);\n  }\n\n  /**\n   * Add a list of user to the cache.\n   * @param {array} addedUserList Array of users to add\n   * @param {object} response A key/value store where key is the user id\n   * @private\n   */\n  function addToCache(addedUserList, response) {\n    for (var i = 0; i < addedUserList.length; i++) {\n      var addedUser = addedUserList[i];\n      if (addedUser.displayName === undefined) {\n        addedUser.displayName = addedUser.name;\n      }\n      // add to response\n      response[addedUser.id] = addedUser;\n      // add to cache\n      userCache.put(addedUser.id, addedUser);\n    }\n  }\n\n  /**\n   * @desc\n   * Return a promise that will resolve to a list of groups and users\n   * based on the given array of ``ids``.\n   *\n   * In case of error, the promise is rejected with a ``ClbError`` instance.\n   *\n   * Return a promise with an map of id->userInfo based on the\n   * provided list of IDs.\n   * @function get\n   * @memberof module:clb-identity.clbUser\n   * @param  {array|string} ids One or more ID\n   * @return {Promise}   Resolve to a map of ID/UserInfo\n   * @private\n   */\n  function getPromiseId2userInfo(ids) {\n    var deferred = $q.defer();\n\n    var uncachedUser = [];\n    var response = {};\n    var urls = [];\n    var single = false; // flag to support single user call\n\n    if (!ids) {\n      ids = [];\n    }\n\n    if (!angular.isArray(ids)) {\n      ids = [ids];\n      single = true;\n    }\n\n    var rejectDeferred = function() {\n      deferred.reject.apply(deferred, ids);\n    };\n    var processResponseAndCarryOn = function(data) {\n      // atm group and user api response data format is different\n      var items;\n      if (data.data.result) {\n        items = data.data.result;\n      } else if (data.data._embedded.users) {\n        items = data.data._embedded.users;\n      } else if (data.data._embedded.groups) {\n        items = data.data._embedded.groups;\n      } else if (data.data.content) {\n        items = data.data.content;\n      } else {\n        $log.error('Unable to find a resultset in data', data);\n      }\n      addToCache(items, response);\n      if (urls && urls.length > 0) {\n        return clbAuthHttp.get(urls.shift())\n        .then(processResponseAndCarryOn, rejectDeferred);\n      }\n      deferred.resolve(single ? response[ids[0]] : response);\n    };\n\n    angular.forEach(ids, function(id) {\n      var user = userCache.get(id);\n      if (user) { // The id is already cached\n        response[id] = user;\n      } else {\n        uncachedUser.push(id);\n      }\n    });\n\n    if (uncachedUser.length === 0) {\n      // All ids are already available -> we resolve the promise\n      deferred.resolve(single ? response[ids[0]] : response);\n    } else {\n      // Get the list of URLs to call\n      // no need to handle more that 300 results because the URL will be split in chunks\n      // of 2000 char each (and every ID is at least 6 char long + '&id=' + baseUrl).\n      var userBaseUrl = '/search?pageSize=300&id=';\n      splitInURl(uncachedUser, userUrl + userBaseUrl, urls, 'id');\n\n      // Async calls and combination of result\n      clbAuthHttp.get(urls.shift())\n      .then(processResponseAndCarryOn, rejectDeferred);\n    }\n\n    return deferred.promise;\n  }\n\n   /**\n    * @name isGroupMember\n    * @desc\n    * Return a promise that will resolve to true if the current user is a member of one of the groups in input.\n    *\n    * `groups` can be either a string or an array.\n    *\n    * @memberof module:clb-identity.clbUser\n    * @function\n    * @param  {array}  groups A list of groups\n    * @return {Promise}       Resolve to a boolean\n    */\n  function isGroupMember(groups) {\n    return this.getCurrentUser().then(function(user) {\n      var compFunc = function(group) {\n        return lodash.some(user.groups, function(g) {\n          return g.name === group;\n        });\n      };\n      var groupList = lodash.isArray(groups) ? groups : [groups];\n      return lodash.some(groupList, compFunc);\n    });\n  }\n\n  /**\n   * Promise a ResultSet containing the groups that the user is member of.\n   *\n   * @param  {string} [userId] the user id or 'me' if unspecified\n   * @param  {object} options optional request parameters\n   * @param  {int} options.pageSize the size of a result page\n   * @return {Promise}      will return a ResultSet of groups\n   */\n  function groups(userId, options) {\n    if (angular.isObject(userId)) {\n      options = userId;\n      userId = 'me';\n    }\n    userId = userId || 'me';\n    options = angular.extend({sort: 'name'}, options);\n    var params = clbIdentityUtil.queryParams(options);\n    var url = userUrl + '/' + userId + '/member-groups';\n    if (options.filter) {\n      try {\n        url += '?' + appendFilterToPath(options.filter, ['name']);\n      } catch (ex) {\n        return $q.reject(ex);\n      }\n    }\n    return clbResultSet.get(\n      clbAuthHttp.get(url, {params: params}),\n      paginationOptions('groups', options.factory)\n    );\n  }\n\n  /**\n   * Promise a ResultSet containing the groups that the user can administrate.\n   *\n   * @param  {string} [userId] the user id or 'me' if unspecified\n   * @param  {object} options optional request parameters\n   * @param  {int} options.pageSize the size of a result page\n   * @return {Promise}      will return a ResultSet of groups\n   */\n  function adminGroups(userId, options) {\n    if (angular.isObject(userId)) {\n      options = userId;\n      userId = 'me';\n    }\n    userId = userId || 'me';\n    options = angular.extend({sort: 'name'}, options);\n    var params = clbIdentityUtil.queryParams(options);\n    var url = [userUrl, userId, 'admin-groups'].join('/');\n    if (options.filter) {\n      try {\n        url += '?' + appendFilterToPath(options.filter, ['name']);\n      } catch (ex) {\n        return $q.reject(ex);\n      }\n    }\n    return clbResultSet.get(\n      clbAuthHttp.get(url, {\n        params: params\n      }),\n      paginationOptions('groups', options.factory)\n    );\n  }\n\n  /**\n   * Append a list of filters to an URL.\n   * @param  {object} [filter] Keys are filter names and value is the filter string\n   * @param  {array}  [supportedFilters] list of authorised keys for the filter property\n   * @throws {HbpError} FilterNotSupportedError\n   * @return {string}   resulting path\n   * @private\n   */\n  function appendFilterToPath(filter, supportedFilters) {\n    if (!filter) {\n      return;\n    }\n    var queryString = '';\n    var fn = function(k) {\n      return function(vi) {\n        queryString += k + '=' + encodeURIComponent(vi) + '&';\n      };\n    };\n    for (var k in filter) {\n      if (Object.prototype.hasOwnProperty.call(filter, k)) {\n        if (supportedFilters.indexOf(k) === -1) {\n          throw clbError.error({\n            type: 'FilterNotSupportedError',\n            message: 'Cannot filter on property: ' + k\n          });\n        }\n        var v = filter[k];\n        if (angular.isArray(v)) {\n          lodash.each(v, fn(k));\n        } else {\n          queryString += k + '=' + encodeURIComponent(v) + '&';\n        }\n      }\n    }\n    return queryString.slice(0, -1);\n  }\n\n  /**\n   * Return pagination config to pass to ``clbResultSet.get``.\n   * @param  {string} pluralType Plural form to look for in the results\n   * @param  {function} factory  Factory function to use to build a batch of results\n   * @return {object}            Options to pass to ``clbResultSet.get``\n   */\n  function paginationOptions(pluralType, factory) {\n    return {\n      resultKey: '_embedded.' + pluralType,\n      nextUrlKey: '_links.next.href',\n      previousUrlKey: '_links.prev.href',\n      countKey: 'page.totalElements',\n      resultsFactory: factory\n    };\n  }\n\n  /**\n   * @name getCurrentUserOnly\n   * @desc\n   * Return a promise that will resolve to the current user, NOT including group\n   * info.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @return {Promise} Resolve to the current user\n   */\n  function getCurrentUserOnly() {\n    var user = userCache.get(currentUserKey);\n    if (user) {\n      return $q.when(user);\n    }\n    // load it from user profile service\n    return clbAuthHttp.get(userUrl + '/me').then(\n      function(userData) {\n        // merge groups into user profile\n        var profile = userData.data;\n\n        // add to cache\n        userCache.put(currentUserKey, profile);\n        return profile;\n      }, clbError.rejectHttpError);\n  }\n\n  /**\n   * @name getCurrentUser\n   * @desc\n   * Return a promise that will resolve to the current user.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @function\n   * @return {Promise} Resolve to the Current User\n   */\n  function getCurrentUser() {\n    var user = userCache.get(currentUserKey);\n    if (user && user.groups) {\n      return $q.when(user);\n    }\n\n    var request = {};\n    if (!user) {\n      request.user = this.getCurrentUserOnly();\n    }\n\n    request.groups = clbResultSet.get(\n      clbAuthHttp.get(userUrl + '/me/member-groups'),\n      paginationOptions('groups')\n    ).then(function(rs) {\n      return rs.toArray();\n    });\n\n    // load it from user profile service\n    return $q.all(request).then(function(aggregatedData) {\n      // merge groups into user profile\n      var profile = aggregatedData.user || user;\n      profile.groups = aggregatedData.groups;\n\n      // add to cache\n      userCache.put(currentUserKey, profile);\n      return profile;\n    }, clbError.rejectHttpError);\n  }\n\n  /**\n   * @name create\n   * @desc\n   * Create the given `user`.\n   *\n   * The method return a promise that will resolve to the created user instance.\n   * In case of error, a `HbpError` instance is retrieved.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @function\n   * @param {object} user Data to build the user from\n   * @return {Promise} Resolve to the new User\n   */\n  function create(user) {\n    return clbAuthHttp.post(userUrl, user).then(\n      function() {\n        return user;\n      },\n      clbError.rejectHttpError\n    );\n  }\n\n  /**\n   * @name update\n   * @desc\n   * Update the described `user` with the given `data`.\n   *\n   * If data is omitted, `user` is assumed to be the updated user object that\n   * should be persisted. When data is present, user can be either a `User`\n   * instance or the user id.\n   *\n   * The method return a promise that will resolve to the updated user instance.\n   * Note that this instance is a copy of the user. If you own a user instance\n   * already, you cannot assume this method will update it.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @function\n   * @param  {object} user User to update\n   * @param  {object} [data] Data to update the user with if not already in ``user`` instance\n   * @return {Promise}       Resolve to the User instance\n   */\n  function update(user, data) {\n    data = data || user;\n    var id = (typeof user === 'string' ? user : user.id);\n    return clbAuthHttp.patch(userUrl + '/' + id, data).then(\n      function() {\n        userCache.remove(id);\n        var cachedCurrentUser = userCache.get(currentUserKey);\n        if (cachedCurrentUser && cachedCurrentUser.id === id) {\n          userCache.remove(currentUserKey);\n        }\n        return getPromiseId2userInfo([id]).then(\n          function(users) {\n            return lodash.first(lodash.values(users));\n          }\n        );\n      },\n      clbError.rejectHttpError\n    );\n  }\n\n  /**\n   * @name list\n   * @desc\n   * Retrieves a list of users filtered, sorted and paginated according to the options.\n   *\n   * The returned promise will be resolved with the list of fetched user profiles\n   * and 2 fuctions (optional) to load next page and/or previous page.\n   * {{next}} and {{prev}} returns a promise that will be resolved with an object\n   * like the one returned by the current function.\n   *\n   * Return object example:\n   * {\n   *  results: [...],\n   *  next: function() {},\n   *  prev: function() {}\n   * }\n   *\n   * Available options:\n   *\n   * * sort: property to sort on. prepend '-' to reverse order.\n   * * page: page to be loaded (default: 0)\n   * * pageSize: max number or items to be loaded (default: 10, when 0 all records are loaded)\n   * * filter: an Object containing the field name as key and\n   *       the query as a String or an Array of strings\n   * * managedOnly: returns only the users managed by the current logged in user\n   *\n   * Supported filter values:\n   *\n   * * ``'displayName'``\n   * * ``'email'``\n   * * ``'id'``\n   * * ``'username'``\n   * * ``'accountType'``\n   *\n   * @memberof module:clb-identity.clbUser\n   * @function\n   * @param {object} [options] Parameters to use\n   * @param {string} [options.sort] Attribute to sort the user with (default to ``'familyName'``)\n   * @param {string} [options.filter] Object containing query filters\n   * @param {function} [options.factory] A function that accept an array of user data and build object from them\n   * @param {int} [options.pageSize] The number of result per page ; if 0, load all results\n   * @param {int} [options.page] The result page to retrieve\n   * @return {Promise} Resolve to the user ResultSet instance\n   */\n  function list(options) {\n    var opt = angular.extend({\n      sort: 'familyName'\n    }, options);\n\n    var loadAll = false;\n    if (opt.pageSize === 0) {\n      loadAll = true;\n      opt.pageSize = 1000; // sooner or later will be all loaded, better saving on requests count\n    }\n\n    var endpoint = userUrl;\n\n    // append filter part to endpoint\n    if (opt.filter) {\n      var supportedFilters = [\n        'displayName',\n        'email',\n        'id',\n        'username',\n        'accountType'\n      ];\n      try {\n        endpoint += '/search?' + appendFilterToPath(\n          opt.filter, supportedFilters);\n      } catch (ex) {\n        return $q.reject(ex);\n      }\n    }\n\n    var pageOptions = paginationOptions('users', opt.factory);\n    var params = clbIdentityUtil.queryParams(opt);\n    var result = clbResultSet.get(clbAuthHttp.get(endpoint, {\n      params: params\n    }), pageOptions);\n\n    return (loadAll) ? result.instance.all() : result;\n  }\n\n  /**\n   * Promise a list of users who matched the given query string.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @param  {string} queryString the search query\n   * @param  {object} [options]   query options\n   * @param  {int} [options.pageSize] the number of result to retrieve\n   * @param  {function} [options.factory] the factory function to use\n   * @return {Promise} will return a ResultSet containing the results\n   */\n  function search(queryString, options) {\n    options = angular.extend({}, options);\n    var params = clbIdentityUtil.queryParams(options);\n    params.str = queryString;\n    var url = userUrl + '/searchByText';\n\n    return clbResultSet.get(clbAuthHttp.get(url, {\n      params: params\n    }), paginationOptions('users', options.factory));\n  }\n}\n","angular.module('clb-identity')\n.factory('clbIdentityUtil', clbIdentityUtil);\n\n/* ------------------ */\n\n/**\n * The ``hbpIdentityUtil`` service groups together useful function for the hbpIdentity module.\n * @namespace clbIdentityUtil\n * @memberof module:clb-identity\n * @param  {object} $log   Angular DI\n * @param  {object} lodash Angular DI\n * @return {object}        Angular Service\n */\nfunction clbIdentityUtil($log, lodash) {\n  return {\n    queryParams: queryParams\n  };\n\n  /**\n   * @name queryParams\n   * @memberof module:clb-identity.clbIdentityUtil\n   * @desc\n   * Accept an object with the following attributes:\n   *\n   * - page: the result page to load (default: 0)\n   * - pageSize: the size of a page (default: 50)\n   * - filter: an Object containing the field name as key and\n   *           the query as a String or an Array of strings\n   * - sort: the ordering column as a string. prepend with '-' to reverse order.\n   *\n   * @param  {Object} options sort and filter keys\n   * @return {Object} params suitable for $http requests\n   */\n  function queryParams(options) {\n    var defaultOptions = {\n      page: 0,\n      pageSize: 100\n    };\n    var opt = angular.extend(defaultOptions, options);\n\n    var sortStr;\n    if (opt.sort) {\n      var sortVal = opt.sort;\n      if (lodash.isArray(sortVal) && sortVal.length > 0) {\n        sortVal = sortVal[0];\n        $log.warn('Multiple field sorting not supported. Using: ' + sortVal);\n      }\n      sortStr = lodash(sortVal).toString();\n\n      if (sortStr.charAt(0) === '-') {\n        sortStr = sortStr.substring(1) + ',desc';\n      }\n    }\n\n    return {\n      page: opt.page,\n      pageSize: opt.pageSize,\n      sort: sortStr\n    };\n  }\n}\n","})();\n"]}