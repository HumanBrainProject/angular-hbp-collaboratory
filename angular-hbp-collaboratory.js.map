{"version":3,"sources":["automator/automator.js","form/form.js","services/app-store.js","services/nav-store.js","services/storage.js","automator/tasks/create-collab.js","automator/tasks/create-nav-item.js","automator/tasks/overview.js","automator/tasks/storage.js","form/directives/form-control-focus.js","form/directives/form-group-state.js","main.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA,QAAQ,OAAO,6BAA6B;EAC1C;EACA;EACA;EACA;EACA;EACA;;CAED,QAAQ,+DAA6B,SAAS;EAC7C,IAAI,MAAM;EACV;EACA,IAAI,WAAW;;;;;;;;;EASf,SAAS,gBAAgB,MAAM,IAAI;IACjC,SAAS,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BnB,SAAS,KAAK,MAAM,YAAY,SAAS;IACvC,IAAI;MACF,OAAO,IAAI,KAAK,MAAM,YAAY;MAClC,OAAO,IAAI;MACX,KAAK,MAAM,aAAa;MACxB,MAAM,gBAAgB,MAAM;QAC1B,MAAM;QACN,SAAS,kBAAkB,OAAO,OAAO;QACzC,MAAM;UACJ,OAAO;UACP,MAAM;UACN,YAAY;UACZ,SAAS;;;;;;;;;;;;;EAajB,SAAS,IAAI,YAAY,SAAS;IAChC,KAAK,IAAI,QAAQ,YAAY;MAC3B,IAAI,WAAW,eAAe,OAAO;QACnC,OAAO,KAAK,MAAM,WAAW,OAAO,SAAS;;;IAGjD,OAAO,GAAG,OAAO,gBAAgB,MAAM;MACrC,MAAM;MACN,SAAS;MACT,MAAM;;;;;;;;;;;;;EAaV,SAAS,eAAe,OAAO;IAC7B,IAAI,WAAW;IACf,IAAI,CAAC,SAAS,CAAC,MAAM,QAAQ;MAC3B,OAAO;;IAET,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;MACrC,IAAI,UAAU,MAAM;MACpB,KAAK,IAAI,QAAQ,SAAS;QACxB,IAAI,QAAQ,eAAe,OAAO;UAChC,SAAS,KAAK,KAAK,MAAM,QAAQ;;;;IAIvC,OAAO;;;;;;;;;;;;;;;;;EAiBT,SAAS,KAAK,MAAM,YAAY,SAAS;IACvC,IAAI,CAAC,SAAS,OAAO;MACnB,MAAM,IAAI,MAAM;;IAElB,aAAa,cAAc;IAC3B,UAAU,WAAW;IACrB,KAAK,QAAQ;IACb,KAAK,OAAO;IACZ,KAAK,aAAa;IAClB,KAAK,iBAAiB;IACtB,KAAK,QAAQ;IACb,KAAK,UAAU;IACf,KAAK,QAAQ;IACb,KAAK,WAAW,eAAe,WAAW;;;EAG5C,KAAK,YAAY;;;;;;;;;IASf,KAAK,SAAS,SAAS;MACrB,IAAI,OAAO;;MAEX,IAAI,KAAK,UAAU,QAAQ;QACzB,OAAO,KAAK;;MAEd,UAAU,QAAQ,OAAO,IAAI,KAAK,gBAAgB;MAClD,IAAI,YAAY,SAAS,QAAQ;QAC/B,IAAI,aAAa,QAAQ,KAAK;QAC9B,WAAW,KAAK,QAAQ;QACxB,OAAO,KAAK,YAAY;SACvB,KAAK,WAAW;UACf,KAAK,QAAQ;UACb,OAAO;;;MAGX,IAAI,UAAU,SAAS,KAAK;QAC1B,KAAK,QAAQ;;QAEb,OAAO,GAAG,OAAO,gBAAgB,MAAM;;MAEzC,KAAK,QAAQ;MACb,KAAK,UAAU,GAAG,KAAK,SAAS,KAAK,MAAM,KAAK,YAAY;SACzD,KAAK;SACL,MAAM;MACT,OAAO,KAAK;;;;;;;;;IASd,aAAa,SAAS,SAAS;MAC7B,IAAI,WAAW;MACf,QAAQ,QAAQ,KAAK,UAAU,SAAS,MAAM;QAC5C,SAAS,KAAK,KAAK,IAAI;;MAEzB,OAAO,GAAG,IAAI;;;;;;;;;;;;EAYlB,SAAS,iBAAiB,KAAK,QAAQ;IACrC,OAAO,gBAAgB;MACrB,MAAM;MACN,SAAS,cAAc,MAAM;MAC7B,MAAM;QACJ,QAAQ;;;;;;;;;;;EAWd,SAAS,iBAAiB,QAAQ;IAChC,IAAI,aAAa,MAAM,UAAU,OAAO;IACxC,KAAK,IAAI,KAAK,YAAY;MACxB,IAAI,QAAQ,YAAY,WAAW,KAAK;QACtC,OAAO,GAAG,OAAO,iBAAiB,GAAG;;;IAGzC,OAAO,GAAG,KAAK;;;;;;;;;;;;;EAajB,SAAS,kBAAkB,QAAQ,OAAO;IACxC,IAAI,IAAI;IACR,QAAQ,QAAQ,OAAO,SAAS,GAAG;MACjC,IAAI,QAAQ,UAAU,OAAO,KAAK;QAChC,EAAE,KAAK,OAAO;;;IAGlB,OAAO;;;EAGT,OAAO;IACL,KAAK;IACL,MAAM;IACN,UAAU;IACV,iBAAiB;IACjB,mBAAmB;IACnB,kBAAkB;;;AAGtB;AClWA;;;;;;AAMA,QAAQ,OAAO,wBAAwB;AACvC;ACPA;;;;;;;;;AASA,QAAQ,OAAO,4BAA4B,CAAC,aAAa;CACxD,SAAS,eAAe;CACxB,QAAQ,wGAA4B;EACnC,IAAI,OAAO;EACX,iBAAiB,WAAW;EAC5B;EACA,IAAI,YAAY,cAAc;EAC9B,IAAI,UAAU,UAAU,IAAI,mBAAmB;EAC/C,IAAI,OAAO;;;;;;;;EAQX,IAAI,MAAM,SAAS,OAAO;IACxB,IAAI,OAAO;IACX,QAAQ,QAAQ,OAAO,SAAS,GAAG,GAAG;MACpC,KAAK,KAAK;;;EAGd,IAAI,YAAY;;;;;;;;IAQd,QAAQ,WAAW;MACjB,OAAO;QACL,IAAI,KAAK;QACT,aAAa,KAAK;QAClB,UAAU,KAAK;QACf,SAAS,KAAK;QACd,OAAO,KAAK;;;;;;;;;;;EAWlB,IAAI,WAAW,SAAS,MAAM;;IAE5B,OAAO,IAAI,IAAI;MACb,IAAI,KAAK;MACT,SAAS,KAAK;MACd,aAAa,KAAK;MAClB,SAAS,KAAK;MACd,QAAQ,KAAK;MACb,OAAO,KAAK;MACZ,WAAW,KAAK;;;;EAIpB,UAAU,IAAI,qBAAqB;IACjC,IAAI;IACJ,OAAO;;;EAGT,IAAI,UAAU,SAAS,SAAS;IAC9B,OAAO,QAAQ,KAAK,SAAS,IAAI;MAC/B,IAAI,GAAG,SAAS;QACd,OAAO,QAAQ,GAAG;;MAEpB,OAAO,GAAG;MACV,OAAO;;;;;;;;EAQX,IAAI,OAAO,WAAW;IACpB,IAAI,CAAC,MAAM;MACT,OAAO,QAAQ,QAAQ,mBAAmB,MAAM,IAAI,UAAU;QAC5D,SAAS,IAAI;;;IAGjB,OAAO,GAAG,KAAK;;;;;;;;EAQjB,IAAI,UAAU,SAAS,IAAI;IACzB,IAAI,CAAC,IAAI;MACP,OAAO,GAAG,KAAK;;IAEjB,IAAI,MAAM,UAAU,IAAI;IACxB,IAAI,KAAK;MACP,OAAO,GAAG,KAAK;;IAEjB,OAAO,MAAM,IAAI,UAAU,KAAK,KAAK,KAAK,SAAS,KAAK;MACtD,UAAU,IAAI,IAAI,IAAI,SAAS,IAAI;MACnC,OAAO,UAAU,IAAI;OACpB,SAAS,KAAK;MACf,OAAO,GAAG,OAAO,gBAAgB,UAAU;;;;;;;;;EAS/C,IAAI,UAAU,SAAS,QAAQ;IAC7B,OAAO,MAAM,IAAI,SAAS,CAAC,QAAQ,SAAS,KAAK,SAAS,KAAK;MAC7D,IAAI,UAAU,IAAI,KAAK;;MAEvB,IAAI,QAAQ,SAAS,GAAG;QACtB,OAAO,GAAG,OAAO,gBAAgB,MAAM;UACrC,MAAM;UACN,SAAS;mBACA;UACT,MAAM,IAAI;;;;MAId,IAAI,QAAQ,WAAW,GAAG;QACxB,OAAO;;;MAGT,IAAI,MAAM,IAAI,SAAS,QAAQ;MAC/B,UAAU,IAAI,IAAI,IAAI;MACtB,OAAO;OACN,QAAQ;;;EAGb,OAAO;IACL,MAAM;IACN,SAAS;IACT,SAAS;;;AAGb;ACxJA;AACA;;;;;;;;AAQA,QAAQ,OAAO,4BAA4B,CAAC,aAAa;CACxD,QAAQ,mIAA4B,SAAS,IAAI,OAAO;IACrD,eAAe,UAAU,eAAe;IACxC,SAAS,WAAW;EACtB,IAAI,eAAe,UAAU,IAAI,mBAAmB;;EAEpD,IAAI,gBAAgB,cAAc;;;EAGlC,IAAI,gBAAgB,cAAc;;;;;;;;;EASlC,IAAI,UAAU,SAAS,MAAM;IAC3B,IAAI,OAAO;IACX,QAAQ,QAAQ,MAAM,SAAS,GAAG,GAAG;MACnC,KAAK,KAAK;;IAEZ,IAAI,QAAQ,YAAY,KAAK,UAAU;MACrC,KAAK,UAAU,MAAM;;IAEvB,IAAI,QAAQ,YAAY,KAAK,WAAW;MACtC,KAAK,WAAW;;;EAGpB,QAAQ,YAAY;;;;;;;;IAQlB,QAAQ,WAAW;;MAEjB,OAAO;QACL,IAAI,KAAK;QACT,QAAQ,KAAK;QACb,QAAQ,KAAK;QACb,MAAM,KAAK;QACX,SAAS,KAAK;QACd,aAAa,KAAK;QAClB,MAAM,KAAK,SAAS,KAAK,SAAS,OAAO;QACzC,QAAQ,KAAK;;;;;;;;IAQjB,QAAQ,SAAS,OAAO;MACtB,QAAQ,QAAQ;QACd,MAAM,QAAQ,YAAY;QAC1B,YAAY,SAAS,SAAS;QAC9B,YAAY;SACX,SAAS,GAAG;QACb,IAAI,QAAQ,UAAU,MAAM,KAAK;UAC/B,KAAK,KAAK,MAAM;;SAEjB;;MAEH,OAAO;;;;;;;IAOT,cAAc,WAAW;MACvB,cAAc,IAAI,IAAI,KAAK,UAAU,KAAK,KAAK;MAC/C,OAAO;;;;;;;;;;;EAWX,SAAS,iBAAiB,UAAU,WAAW,KAAK;IAClD,MAAM,OAAO;;;;IAIb,IAAI,QAAQ,YAAY,YAAY;MAClC,OAAO;;;IAGT,IAAI,SAAS;IACb,QAAQ,QAAQ,WAAW,SAAS,MAAM;MACxC,IAAI,KAAK,QAAQ,SAAS,UAAU;;IAEtC,OAAO;;;;;;;;;;EAUT,QAAQ,WAAW,SAAS,UAAU,MAAM;;IAE1C,IAAI,QAAQ;MACV,IAAI,KAAK;MACT,OAAO,KAAK;MACZ,UAAU;MACV,MAAM,KAAK;MACX,SAAS,KAAK;MACd,OAAO,KAAK;MACZ,QAAQ,KAAK,SAAS;MACtB,MAAM,KAAK;MACX,UAAU,KAAK;MACf,UAAU,iBAAiB,UAAU,KAAK;;IAE5C,IAAI,IAAI,IAAI,UAAU,MAAM;IAC5B,IAAI,SAAS,cAAc,IAAI;IAC/B,IAAI,QAAQ;MACV,OAAO,OAAO,OAAO;;IAEvB,OAAO,IAAI,QAAQ,OAAO;;;;;;;;;;EAU5B,IAAI,UAAU,SAAS,UAAU;IAC/B,IAAI,cAAc,cAAc,IAAI;;IAEpC,IAAI,CAAC,aAAa;MAChB,cAAc,MAAM,IAAI,eAAe,WAAW,aAAa;QAC7D,SAAS,MAAM;UACb,IAAI;UACJ,IAAI;UACJ,IAAI;UACJ,IAAI,OAAO,cAAc,KAAK,MAAM;;;UAGpC,KAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,EAAE,GAAG;YAClC,OAAO,QAAQ,SAAS,UAAU,KAAK;YACvC,IAAI,KAAK,YAAY,QAAQ;cAC3B,OAAO;;;;;UAKX,KAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,EAAE,GAAG;YAClC,OAAO,cAAc,IAAI,IAAI,UAAU,KAAK,GAAG;YAC/C,IAAI,KAAK,UAAU;cACjB,IAAI,SAAS,cAAc,IAAI,IAAI,UAAU,KAAK;cAClD,OAAO,SAAS,KAAK;;;;UAIzB,OAAO;;QAET,QAAQ;;;MAGV,cAAc,IAAI,UAAU;;;IAG9B,OAAO;;;;;;;;;EAST,IAAI,UAAU,SAAS,UAAU,QAAQ;IACvC,OAAO,QAAQ,UAAU,KAAK,WAAW;MACvC,IAAI,IAAI,IAAI,UAAU;MACtB,IAAI,OAAO,cAAc,IAAI;;MAE7B,IAAI,CAAC,MAAM;QACT,KAAK,MAAM,oBAAoB;;;MAGjC,OAAO;;;;;;;;;EASX,IAAI,qBAAqB,SAAS,KAAK;IACrC,IAAI,MAAM,QAAQ,OAAO,gBAAgB;MACvC,UAAU,IAAI;MACd,kBAAkB;;IAEpB,OAAO,MAAM,IAAI;KAChB,KAAK,SAAS,KAAK;MAClB,IAAI,MAAM,QAAQ,SAAS,IAAI,KAAK,OAAO,IAAI,IAAI;MACnD,IAAI,IAAI,IAAI,IAAI,UAAU,IAAI;MAC9B,IAAI,cAAc,IAAI,IAAI;QACxB,MAAM,cAAc,IAAI,GAAG,OAAO;aAC7B;QACL,cAAc,IAAI,GAAG;;MAEvB,OAAO;OACN,SAAS,KAAK;MACf,OAAO,GAAG,OAAO,QAAQ,KAAK;;;;;;;;;;EAUlC,IAAI,UAAU,SAAS,UAAU,SAAS;IACxC,OAAO,MAAM,KAAK,eAAe,WAAW,SAAS,QAAQ;KAC5D,KAAK,SAAS,MAAM;MACnB,OAAO,QAAQ,SAAS,UAAU,KAAK;OACtC,QAAQ;;;;;;;;;EASb,IAAI,aAAa,SAAS,UAAU,SAAS;IAC3C,OAAO,MAAM,OAAO,eAAe,WAAW,UAAU,QAAQ,KAAK;KACpE,KAAK,WAAW;MACf,cAAc,OAAO,IAAI,UAAU,QAAQ;OAC1C,QAAQ;;;;;;;;;EASb,IAAI,SAAS,SAAS,UAAU,SAAS;IACvC,QAAQ,WAAW;IACnB,OAAO,MAAM,IAAI,eAAe,WAAW;MACzC,QAAQ,KAAK,KAAK,QAAQ;KAC3B,KAAK,SAAS,MAAM;MACnB,OAAO,QAAQ,SAAS,UAAU,KAAK;OACtC,QAAQ;;;;EAIb,IAAI,cAAc,GAAG;;;;;;;;;;;;;;;EAerB,SAAS,WAAW,UAAU,SAAS,YAAY,UAAU;IAC3D,OAAO,YAAY,KAAK,WAAW;;MAEjC,QAAQ,SAAS,aAAa,CAAC,IAAI,IAAI,WAAW;MAClD,QAAQ,WAAW,WAAW;MAC9B,OAAO,OAAO,UAAU;;;;;;;;;;EAU5B,SAAS,IAAI,UAAU,QAAQ;IAC7B,OAAO,WAAW,OAAO;;;EAG3B,OAAO;IACL,SAAS;IACT,SAAS;IACT,SAAS;IACT,oBAAoB;IACpB,SAAS;IACT,UAAU;IACV,YAAY;IACZ,YAAY;;;AAGhB;AC9TA;;;;;;;AAOA,QAAQ,OAAO,2BAA2B,CAAC;CAC1C,QAAQ;mDACP,SAAS,wBAAwB,SAAS,gBAAgB,iBAAiB;;;;;;;;IAQzE,SAAS,YAAY,KAAK;MACxB,OAAO,SAAS;;;;;;;;;;;;;;;;;;;;IAoBlB,SAAS,mBAAmB,QAAQ,WAAW;MAC7C,IAAI,cAAc;MAClB,YAAY,YAAY,cAAc;;MAEtC,OAAO,eAAe,YAAY,QAAQ;OACzC,MAAM,gBAAgB;;;;;;;;;;;;;;IAczB,SAAS,mBAAmB,WAAW;MACrC,IAAI,cAAc;MAClB,YAAY,YAAY,cAAc;;MAEtC,OAAO,eAAe,MAAM,aAAa,KAAK,MAAM,QAAQ;;;;;;;;;;;;;;;;;;;;IAoB9D,SAAS,sBAAsB,QAAQ,WAAW;MAChD,IAAI,MAAM,YAAY;;MAEtB,OAAO,eAAe,eAAe,QAAQ,CAAC;OAC7C,KAAK,MAAM,gBAAgB;;;;;;;;;;;;;;;;;;;;;IAqB9B,SAAS,sBAAsB,WAAW,WAAW,WAAW;MAC9D,OAAO,sBAAsB,WAAW,WAAW,KAAK,WAAW;QACjE,OAAO,mBAAmB,WAAW;SACpC,MAAM,gBAAgB;;;;;;;;;;;;;;IAc3B,SAAS,mBAAmB,UAAU;MACpC,IAAI,cAAc;QAChB,mBAAmB;;MAErB,OAAO,eAAe,MAAM,aAAa,KAAK,MAAM,QAAQ;;;IAG9D,OAAO;MACL,oBAAoB;MACpB,oBAAoB;MACpB,uBAAuB;MACvB,uBAAuB;MACvB,oBAAoB;;;AAG1B;AC1IA,QAAQ,OAAO;CACd,kEAAI,SAAS;EACZ,MAAM,IAAI;EACV;EACA;EACA,0BAA0B,gBAAgB,UAAU;;;;;;;;;;;;;;;;EAgBpD,SAAS,aAAa,YAAY;IAChC,IAAI,OAAO,0BAA0B;MACnC;MACA,CAAC,SAAS,WAAW;;IAEvB,KAAK,MAAM,iBAAiB;IAC5B,OAAO,eAAe,OAAO;;;AAGjC;AC9BA,QAAQ,OAAO;CACd,+IAAI,SAAS;EACZ;EACA;EACA;EACA;EACA;EACA;EACA;EACA,0BAA0B,gBAAgB,OAAO;;;;;;;;;;;;;EAajD,SAAS,cAAc,YAAY,SAAS;IAC1C,IAAI,WAAW,WAAW;MACxB,OAAO,CAAC,cAAc,WAAW;SAC9B,WAAW,QAAQ,OAAO;;IAE/B,IAAI,UAAU,SAAS,KAAK;MAC1B,OAAO,yBAAyB,QAAQ,CAAC,OAAO;;IAElD,IAAI,YAAY,SAAS,KAAK;MAC5B,OAAO,yBAAyB,QAAQ;OACvC,KAAK,SAAS,YAAY;QACzB,OAAO,yBAAyB,QAAQ;UACtC,IAAI,yBAAyB,QAAQ;YACnC,QAAQ;YACR,MAAM,WAAW;YACjB,OAAO,IAAI;YACX,UAAU,WAAW;;;;;IAK7B,IAAI,gBAAgB,SAAS,KAAK;MAChC,IAAI,CAAC,WAAW,QAAQ;QACtB,OAAO;;MAET,IAAI,UAAU,SAAS,QAAQ;QAC7B,OAAO,wBAAwB,mBAAmB,QAAQ,IAAI;SAC7D,KAAK,WAAW;UACf,OAAO;;;;MAIX,IAAI,WAAW,QAAQ,WAAW,QAAQ,QAAQ,WAAW,SAAS;QACpE,OAAO,QAAQ,QAAQ,QAAQ,WAAW;;MAE5C,OAAO,eAAe,IAAI,WAAW,QAAQ,KAAK;;;IAGpD,KAAK,MAAM,mBAAmB,YAAY;;IAE1C,OAAO,0BAA0B,iBAAiB,YAAY,OAAO;KACpE,KAAK,WAAW;MACf,OAAO,QAAQ,WAAW;OACzB,KAAK;OACL,KAAK;;;;AAIZ;ACtEA,QAAQ,OAAO;GACZ,iKAAI,SAAS;IACZ,MAAM,IAAI,OAAO,WAAW,cAAc;IAC1C,2BAA2B;IAC3B;IACA;IACA,0BAA0B,gBAAgB,YAAY;;;;;;;;;;;;;;;;;;;;;;;IAuBtD,SAAS,SAAS,YAAY,SAAS;MACrC,KAAK,MAAM;MACX,IAAI,WAAW,WAAW,UAAU,QAAQ,OAAO;;MAEnD,IAAI,oBAAoB,SAAS,UAAU,YAAY,SAAS;QAC9D,OAAO,mBAAmB,YAAY;WACnC,KAAK,SAAS,QAAQ;YACrB,OAAO,MAAM,KAAK,UAAU,IAAI,qBAAqB,cAAc;cACjE,KAAK,SAAS;cACd,KAAK;;;;;MAKb,IAAI,cAAc,SAAS,UAAU,YAAY;QAC/C,OAAO,yBAAyB,QAAQ,CAAC,OAAO,WAAW;WACxD,KAAK,SAAS,KAAK;YAClB,SAAS,OAAO,CAAC,OAAO,IAAI;YAC5B,OAAO,yBAAyB,SAAS,UAAU;;;;MAIzD,OAAO;SACJ,QAAQ;SACR,KAAK,SAAS,SAAS;UACtB,IAAI,WAAW,QAAQ,SAAS;;UAEhC,IAAI,iBAAiB,WAAW;YAC9B,YAAY,UAAU;YACtB,kBAAkB,UAAU,YAAY;;UAE1C,OAAO,eAAe,KAAK,WAAW;YACpC,OAAO;;;;;;;;;;;;;;;;IAgBf,SAAS,mBAAmB,YAAY,SAAS;MAC/C,IAAI;MACJ,IAAI,WAAW,QAAQ,YAAY,QAAQ,SAAS,WAAW,SAAS;QACtE,OAAO,QAAQ,SAAS,WAAW,QAAQ;aACtC;QACL,OAAO,WAAW;;MAEpB,OAAO,aAAa,WAAW;;;AAGrC;ACvFA,QAAQ,OAAO;CACd,gHAAI,SAAS;EACZ,MAAM,IAAI;EACV;EACA;EACA;EACA;EACA,0BAA0B,gBAAgB,WAAW;;;;;;;;;;;;;;;;EAgBrD,SAAS,QAAQ,YAAY,SAAS;IACpC,OAAO,0BAA0B;MAC/B,YAAY;MACZ,KAAK,WAAW;MAChB,OAAO;SACJ,mBAAmB,WAAW,UAAU,QAAQ,OAAO;SACvD,KAAK,SAAS,eAAe;UAC5B,IAAI,WAAW;UACf,QAAQ,QAAQ,WAAW,UAAU,SAAS,OAAO,MAAM;YACzD,IAAI,QAAQ,SAAS,QAAQ;cAC3B,KAAK,MAAM,yBAAyB;cACpC,SAAS;gBACP,eAAe,KAAK,OAAO,cAAc;mBACtC;cACL,KAAK,KAAK,0CAA0C;;;UAGxD,OAAO,GAAG,IAAI;;;;;AAKxB;AC7CA;;;;;;;;;;;;AAYA,QAAQ,OAAO;CACd,UAAU,oCAAuB,SAAS,oBAAoB,UAAU;EACvE,OAAO;IACL,MAAM;IACN,MAAM,SAAS,qBAAqB,OAAO,KAAK;MAC9C,SAAS,WAAW;QAClB,IAAI,GAAG;SACN,GAAG;;;;AAIZ;ACvBA;;;;;;;;;;;;AAYA,QAAQ,OAAO;CACd,UAAU,qBAAqB,SAAS,iBAAiB;EACxD,OAAO;IACL,MAAM;IACN,OAAO;MACL,OAAO;;IAET,MAAM,SAAS,mBAAmB,OAAO,KAAK;MAC5C,MAAM,YAAY,CAAC,kBAAkB,iBAAiB,WAAW;QAC/D,IAAI,CAAC,MAAM,OAAO;UAChB;;QAEF,IAAI,YAAY,aAAa;QAC7B,IAAI,CAAC,MAAM,MAAM,UAAU;UACzB;;QAEF,IAAI,MAAM,MAAM,QAAQ;UACtB,IAAI,SAAS;eACR;UACL,IAAI,SAAS;;SAEd;;;;AAIT;ACrCA;;;;;AAKA,QAAQ,OAAO,oBAAoB;EACjC;EACA;EACA;EACA;;AAEF","file":"angular-hbp-collaboratory.js","sourcesContent":["/**\n * @namespace hbpCollaboratoryAutomator\n * @memberof hbpCollaboratory\n * @desc\n * hbpCollaboratoryAutomator is an AngularJS factory that\n * provide task automation to accomplish a sequence of\n * common operation in Collaboratory.\n *\n * How to add new tasks\n * --------------------\n *\n * New tasks can be added by calling ``hbpCollaboratoryAutomator.registerHandler``.\n *\n * You can see a few example of tasks in the `tasks` folder.\n *\n * Evaluate the automator\n * ----------------------\n *\n * From the root of this project, you can start a server that will let\n * you write a descriptor and run it.\n *\n * .. code-block:: bash\n *\n *    gulp example\n *\n * @param {object} $q injected dependency\n * @return {object} hbpCollaboratoryAutomator angular service\n * @example <caption>Create a Collab with a few navigation items</caption>\n * // Create a Collab with a few navigation items.\n * angular.module('MyModule', ['hbpCollaboratory'])\n * .run(function(hbpCollaboratoryAutomator, $log) {\n *   var config = {\n *     title: 'My Custom Collab',\n *     content: 'My Collab Content',\n *     private: false\n *   };\n *   hbpCollaboratoryAutomator.task(config).run().then(function(collab) {\n *   \t $log.info('Created Collab', collab);\n *   });\n * })\n * @example <caption>Create a Collab with entities and navigation items</caption>\n * hbpCollaboratoryAutomator.run({\n *   \"collab\": {\n *     \"title\": \"Test Collab Creation\",\n *     \"content\": \"My Collab Description\",\n *     \"private\": true,\n *     \"after\": [\n *       {\n *         \"storage\": {\n *           \"entities\": {\n *             // Use one of your file UUID here.\n *             \"sample.ipynb\": \"155c1bcc-ee9c-43e2-8190-50c66befa1fa\"\n *           },\n *           \"after\": [{\n *             \"nav\": {\n *               \"name\": \"Example Code\",\n *               \"app\": \"Jupyter Notebook\",\n *               \"entity\": \"sample.ipynb\"\n *             }\n *           }]\n *         }\n *       },\n *       {\n *         \"nav\": {\n *           \"name\": \"Empty Notebook\",\n *           \"app\": \"Jupyter Notebook\"\n *         }\n *       },\n *       {\n *         \"nav\": {\n *           \"name\": \"Introduction\",\n *           \"app\": \"Rich Text Editor\"\n *         }\n *       }\n *     ]\n *   }\n * }).then(function(collab) {\n *   $log.info('Created Collab', collab);\n * });\n *\n * @example <caption>Create a Collab with a pre-filled overview</caption>\n * hbpCollaboratoryAutomator.run({\n *   \"collab\": {\n *     \"title\": \"Test Collab With Pre Filled Overview\",\n *     \"content\": \"Test collab creation with  a pre filled overview\",\n *     \"private\": true,\n *     \"after\": [{\n *       \"overview\": {\n *         // Use one of your HTML file UUID here.\n *         \"entity\": \"155c1bcc-ee9c-43e2-8190-50c66befa1fa\"\n *       }\n *     }]\n *   }\n * }).then(function(collab) {\n *   $log.info('Created Collab', collab);\n * });\n */\nangular.module('hbpCollaboratoryAutomator', [\n  'bbpConfig',\n  'hbpCommon',\n  'hbpDocumentClient',\n  'hbpCollaboratoryAppStore',\n  'hbpCollaboratoryNavStore',\n  'hbpCollaboratoryStorage'\n])\n.factory('hbpCollaboratoryAutomator', function hbpCollaboratoryAutomator(\n  $q, $log, hbpErrorService\n) {\n  var handlers = {};\n\n  /**\n   * Register a handler function for the given task name.\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator\n   * @param  {string}   name handle actions with the specified name\n   * @param  {Function} fn a function that accept the current context in\n   *                       parameter.\n   */\n  function registerHandler(name, fn) {\n    handlers[name] = fn;\n  }\n\n  /**\n   * @namespace Tasks\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator\n   * @desc\n   * Available tasks.\n   */\n\n  /**\n   * Instantiate a new Task intance that will run the code describe for\n   * a handlers with the give ``name``.\n   *\n   * The descriptor is passed to the task and parametrize it.\n   * The task context is computed at the time the task is ran. A default context\n   * can be given at load time and it will be fed with the result of each parent\n   * (but not sibling) tasks as well.\n   *\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator\n   * @param {string} name the name of the task to instantiate\n   * @param {object} [descriptor] a configuration object that will determine\n   *                            which task to run and in which order\n   * @param {object} [descriptor.after] an array of task to run after this one\n   * @param {object} [context] a default context to run the task with\n   *\n   * @return {Task} - the new task instance\n   */\n  function task(name, descriptor, context) {\n    try {\n      return new Task(name, descriptor, context);\n    } catch (ex) {\n      $log.error('EXCEPTION', ex);\n      throw hbpErrorService.error({\n        type: 'InvalidTask',\n        message: 'Invalid task ' + name + ': ' + ex,\n        data: {\n          cause: ex,\n          name: name,\n          descriptor: descriptor,\n          context: context\n        }\n      });\n    }\n  }\n\n  /**\n   * Directly generate tasks from given description and run them.\n   *\n   * @param  {object} descriptor description of the tasks to run\n   * @param  {object} [context]  the initial context\n   * @return {Promise} promise of the top level task result\n   */\n  function run(descriptor, context) {\n    for (var name in descriptor) {\n      if (descriptor.hasOwnProperty(name)) {\n        return task(name, descriptor[name], context).run();\n      }\n    }\n    return $q.reject(hbpErrorService.error({\n      type: 'NoTaskFound',\n      message: 'No task found in descriptor',\n      data: descriptor\n    }));\n  }\n\n  /**\n   * Create an array of tasks given an array containing object where\n   * the key is the task name to run and the value is the descriptor\n   * parameter.\n   *\n   * @param  {object} after the content of ``descriptor.after``\n   * @return {Array/Task} array of subtasks\n   * @private\n   */\n  function createSubtasks(after) {\n    var subtasks = [];\n    if (!after || !after.length) {\n      return subtasks;\n    }\n    for (var i = 0; i < after.length; i++) {\n      var taskDef = after[i];\n      for (var name in taskDef) {\n        if (taskDef.hasOwnProperty(name)) {\n          subtasks.push(task(name, taskDef[name]));\n        }\n      }\n    }\n    return subtasks;\n  }\n\n  /**\n   * @class Task\n   * @desc\n   * Instantiate a task given the given `config`.\n   * The task can then be run using the `run()` instance method.\n   * @param {string} name the name of the task to instantiate\n   * @param {object} [descriptor] a configuration object that will determine\n   *                            which task to run and in which order\n   * @param {object} [descriptor.after] an array of task to run after this one\n   * @param {object} [context] a default context to run the task with\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator\n   * @see hbpCollaboratory.hbpCollaboratoryAutomator.task\n   *\n   */\n  function Task(name, descriptor, context) {\n    if (!handlers[name]) {\n      throw new Error('TaskNotFound');\n    }\n    descriptor = descriptor || {};\n    context = context || {};\n    this.state = 'idle';\n    this.name = name;\n    this.descriptor = descriptor;\n    this.defaultContext = context;\n    this.state = 'idle';\n    this.promise = null;\n    this.error = null;\n    this.subtasks = createSubtasks(descriptor.after);\n  }\n\n  Task.prototype = {\n    /**\n     * Launch the task.\n     *\n     * @memberof hbpCollaboratory.hbpCollaboratoryAutomator.Task\n     * @param {object} context current context will be merged into the default\n     *                         one.\n     * @return {Promise} promise to return the result of the task\n     */\n    run: function(context) {\n      var self = this;\n      // run an intance of task only once.\n      if (self.state !== 'idle') {\n        return self.promise;\n      }\n      context = angular.extend({}, this.defaultContext, context);\n      var onSuccess = function(result) {\n        var subContext = angular.copy(context);\n        subContext[self.name] = result;\n        return self.runSubtasks(subContext)\n        .then(function() {\n          self.state = 'success';\n          return result;\n        });\n      };\n      var onError = function(err) {\n        self.state = 'error';\n        // noop operation if is already one\n        return $q.reject(hbpErrorService.error(err));\n      };\n      self.state = 'progress';\n      self.promise = $q.when(handlers[self.name](self.descriptor, context))\n        .then(onSuccess)\n        .catch(onError);\n      return self.promise;\n    },\n\n    /**\n     * Run all subtasks of the this tasks.\n     *\n     * @param  {object} context the current context\n     * @return {Array}          all the results in an array\n     */\n    runSubtasks: function(context) {\n      var promises = [];\n      angular.forEach(this.subtasks, function(task) {\n        promises.push(task.run(context));\n      });\n      return $q.all(promises);\n    }\n  };\n\n  /**\n   * Return a HbpError when a parameter is missing.\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator\n   * @param  {string} key    name of the key\n   * @param  {object} config the invalid configuration object\n   * @return {HbpError}      a HbpError instance\n   * @private\n   */\n  function missingDataError(key, config) {\n    return hbpErrorService({\n      type: 'KeyError',\n      message: 'Missing `' + key + '` key in config',\n      data: {\n        config: config\n      }\n    });\n  }\n\n  /**\n   * Ensure that all parameters listed after config are presents.\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator\n   * @param  {object} config task descriptor\n   * @return {object} created entities\n   */\n  function ensureParameters(config) {\n    var parameters = Array.prototype.splice(1);\n    for (var p in parameters) {\n      if (angular.isUndefined(parameters[p])) {\n        return $q.reject(missingDataError(p, config));\n      }\n    }\n    return $q.when(config);\n  }\n\n  /**\n   * Return an object that only contains attributes\n   * from the `attrs` list.\n   *\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator\n   * @param  {object} config key-value store\n   * @param  {Array} attrs   a list of keys to extract from `config`\n   * @return {object}        key-value store containing only keys from attrs\n   *                         found in `config`\n   */\n  function extractAttributes(config, attrs) {\n    var r = {};\n    angular.forEach(attrs, function(a) {\n      if (angular.isDefined(config[a])) {\n        r[a] = config[a];\n      }\n    });\n    return r;\n  }\n\n  return {\n    run: run,\n    task: task,\n    handlers: handlers,\n    registerHandler: registerHandler,\n    extractAttributes: extractAttributes,\n    ensureParameters: ensureParameters\n  };\n});\n","/**\n * @namespace hbpCollaboratoryForm\n * @memberof hbpCollaboratory\n * @desc\n * hbpCollaboratoryForm provides directive to ease creation of forms.\n */\nangular.module('hbpCollaboratoryForm', []);\n","/* eslint camelcase: 0 */\n\n/**\n * @namespace hbpCollaboratoryAppStore\n * @memberof hbpCollaboratory\n * @desc\n * hbpCollaboratoryAppStore can be used to find and work with the\n * registered HBP Collaboratory applications.\n */\nangular.module('hbpCollaboratoryAppStore', ['bbpConfig', 'hbpCommon'])\n.constant('folderAppId', '__collab_folder__')\n.service('hbpCollaboratoryAppStore', function(\n  $q, $http, $cacheFactory,\n  hbpErrorService, bbpConfig, hbpUtil\n) {\n  var appsCache = $cacheFactory('__appsCache__');\n  var urlBase = bbpConfig.get('api.collab.v0') + '/extension/';\n  var apps = null;\n\n  /**\n   * @class App\n   * @desc client representation of an application\n   * @memberof hbpCollaboratory.hbpCollaboratoryAppStore\n   * @param  {object} [attrs] a list of attributes to set to the App instance\n   */\n  var App = function(attrs) {\n    var self = this;\n    angular.forEach(attrs, function(v, k) {\n      self[k] = v;\n    });\n  };\n  App.prototype = {\n    /**\n     * Transform an App instance into an object reprensentation compatible with\n     * the backend schema. This object can then be easily converted to a JSON\n     * string.\n     * @memberof hbpCollaboratory.hbpCollaboratoryAppStore.App\n     * @return {object} server representation of an App instance\n     */\n    toJson: function() {\n      return {\n        id: this.id,\n        description: this.description,\n        edit_url: this.editUrl,\n        run_url: this.runUrl,\n        title: this.title\n      };\n    }\n  };\n\n  /**\n   * Create an app instance from a server representation.\n   * @memberof hbpCollaboratory.hbpCollaboratoryAppStore.App\n   * @param  {object} json converted from the server JSON string\n   * @return {App} the new App instance\n   */\n  App.fromJson = function(json) {\n    /* jshint camelcase: false */\n    return new App({\n      id: json.id,\n      deleted: json.deleted,\n      description: json.description,\n      editUrl: json.edit_url,\n      runUrl: json.run_url,\n      title: json.title,\n      createdBy: json.created_by\n    });\n  };\n\n  appsCache.put('__collab_folder__', {\n    id: '__collab_folder__',\n    title: 'Folder'\n  });\n\n  var loadAll = function(promise) {\n    return promise.then(function(rs) {\n      if (rs.hasNext) {\n        return loadAll(rs.next());\n      }\n      apps = rs.results;\n      return apps;\n    });\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryAppStore\n   * @return {Promise} promise of the list of all applications\n   */\n  var list = function() {\n    if (!apps) {\n      return loadAll(hbpUtil.paginatedResultSet($http.get(urlBase), {\n        factory: App.fromJson\n      }));\n    }\n    return $q.when(apps);\n  };\n\n  /**\n   * Retrieve an App instance from its id.\n   * @param  {number} id the app id\n   * @return {Promise} promise of an app instance\n   */\n  var getById = function(id) {\n    if (!id) {\n      return $q.when(null);\n    }\n    var ext = appsCache.get(id);\n    if (ext) {\n      return $q.when(ext);\n    }\n    return $http.get(urlBase + id + '/').then(function(res) {\n      appsCache.put(id, App.fromJson(res.data));\n      return appsCache.get(id);\n    }, function(res) {\n      return $q.reject(hbpErrorService.httpError(res));\n    });\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryAppStore\n   * @param  {object} params query parameters\n   * @return {Promise} promise of an App instance\n   */\n  var findOne = function(params) {\n    return $http.get(urlBase, {params: params}).then(function(res) {\n      var results = res.data.results;\n      // Reject if more than one results\n      if (results.length > 1) {\n        return $q.reject(hbpErrorService.error({\n          type: 'TooManyResults',\n          message: 'Multiple apps has been retrieved ' +\n                   'when only one was expected.',\n          data: res.data\n        }));\n      }\n      // Null when no result\n      if (results.length === 0) {\n        return null;\n      }\n      // Build the app if exactly one result\n      var app = App.fromJson(results[0]);\n      appsCache.put(app.id, app);\n      return app;\n    }, hbpUtil.ferr);\n  };\n\n  return {\n    list: list,\n    getById: getById,\n    findOne: findOne\n  };\n});\n","/* eslint camelcase:[2, {properties: \"never\"}] */\n'use strict';\n\n/**\n * @namespace hbpCollaboratoryNavStore\n * @memberof hbpCollaboratory\n * @desc hbpCollaboratoryNavStore provides tools to create and manage\n *       navigation items.\n */\nangular.module('hbpCollaboratoryNavStore', ['hbpCommon', 'uuid4'])\n.service('hbpCollaboratoryNavStore', function($q, $http, $log,\n    $cacheFactory, $timeout, orderByFilter, uuid4,\n    hbpUtil, bbpConfig) {\n  var collabApiUrl = bbpConfig.get('api.collab.v0') + '/collab/';\n  // a cache with individual nav items\n  var cacheNavItems = $cacheFactory('navItem');\n\n  // a cache with the promises of each collab's nav tree root\n  var cacheNavRoots = $cacheFactory('navRoot');\n\n  /**\n   * @class NavItem\n   * @desc\n   * Client representation of a navigation item.\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {object} attr attributes of the new instance\n   */\n  var NavItem = function(attr) {\n    var self = this;\n    angular.forEach(attr, function(v, k) {\n      self[k] = v;\n    });\n    if (angular.isUndefined(this.context)) {\n      this.context = uuid4.generate();\n    }\n    if (angular.isUndefined(this.children)) {\n      this.children = [];\n    }\n  };\n  NavItem.prototype = {\n    /**\n     * @desc\n     * Return a server object representation that can be easily serialized\n     * to JSON and send to the backend.\n     * @memberof hbpCollaboratory.hbpCollaboratoryNavStore.NavItem\n     * @return {object} server object representation\n     */\n    toJson: function() {\n      /* jshint camelcase: false */\n      return {\n        id: this.id,\n        app_id: this.appId,\n        collab: this.collabId,\n        name: this.name,\n        context: this.context,\n        order_index: this.order,\n        type: this.type || (this.folder ? 'FO' : 'IT'),\n        parent: this.parentId\n      };\n    },\n    /**\n     * @memberof hbpCollaboratory.hbpCollaboratoryNavStore.NavItem\n     * @param  {object} attrs NavItem instance attributes\n     * @return {NavItemt} this instance\n     */\n    update: function(attrs) {\n      angular.forEach([\n        'id', 'name', 'children', 'context',\n        'collabId', 'appId', 'order', 'folder',\n        'parentId', 'type'\n      ], function(a) {\n        if (angular.isDefined(attrs[a])) {\n          this[a] = attrs[a];\n        }\n      }, this);\n\n      return this;\n    },\n    /**\n     * @memberof hbpCollaboratory.hbpCollaboratoryNavStore.NavItem\n     * @return {NavItem} this instance\n     * @private\n     */\n    ensureCached: function() {\n      cacheNavItems.put(key(this.collabId, this.id), this);\n      return this;\n    }\n  };\n  /**\n   * Manage `acc` accumulator with all the data from jsonArray and return it.\n   *\n   * @param  {int} collabId  the collab ID\n   * @param  {array} jsonArray description of the children\n   * @param  {Array} acc       the accumulator\n   * @return {Array}           the children\n   */\n  function childrenFromJson(collabId, jsonArray, acc) {\n    acc = acc || [];\n    // an undefined array means we abort the process\n    // where an empty array will ensure the resulting array\n    // is empty as well.\n    if (angular.isUndefined(jsonArray)) {\n      return acc;\n    }\n\n    acc.length = 0;\n    angular.forEach(jsonArray, function(json) {\n      acc.push(NavItem.fromJson(collabId, json));\n    });\n    return acc;\n  }\n  /**\n   * Build an instance from the server object representation.\n   *\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore.NavItem\n   * @param  {number} collabId collab ID\n   * @param  {string} json server object representation\n   * @return {NavItem} new instance of NavItem\n   */\n  NavItem.fromJson = function(collabId, json) {\n    /* jshint camelcase: false */\n    var attrs = {\n      id: json.id,\n      appId: json.app_id,\n      collabId: collabId,\n      name: json.name,\n      context: json.context,\n      order: json.order_index,\n      folder: json.type === 'FO',\n      type: json.type,\n      parentId: json.parent,\n      children: childrenFromJson(collabId, json.children)\n    };\n    var k = key(collabId, attrs.id);\n    var cached = cacheNavItems.get(k);\n    if (cached) {\n      return cached.update(attrs);\n    }\n    return new NavItem(attrs).ensureCached();\n  };\n\n  /**\n   * Retrieve the root item of the given collab.\n   *\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {number} collabId collab ID\n   * @return {Promise} promise the root nav item\n   */\n  var getRoot = function(collabId) {\n    var treePromise = cacheNavRoots.get(collabId);\n\n    if (!treePromise) {\n      treePromise = $http.get(collabApiUrl + collabId + '/nav/all/').then(\n        function(resp) {\n          var root;\n          var i;\n          var item;\n          var data = orderByFilter(resp.data, '+order_index');\n\n          // fill in the cache\n          for (i = 0; i !== data.length; ++i) {\n            item = NavItem.fromJson(collabId, data[i]);\n            if (item.context === 'root') {\n              root = item;\n            }\n          }\n\n          // link children and parents\n          for (i = 0; i !== data.length; ++i) {\n            item = cacheNavItems.get(key(collabId, data[i].id));\n            if (item.parentId) {\n              var parent = cacheNavItems.get(key(collabId, item.parentId));\n              parent.children.push(item);\n            }\n          }\n\n          return root;\n        },\n        hbpUtil.ferr\n      );\n\n      cacheNavRoots.put(collabId, treePromise);\n    }\n\n    return treePromise;\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {number} collabId collab ID\n   * @param  {number} nodeId   node ID\n   * @return {NavItem} the matching nav item\n   */\n  var getNode = function(collabId, nodeId) {\n    return getRoot(collabId).then(function() {\n      var k = key(collabId, nodeId);\n      var item = cacheNavItems.get(k);\n\n      if (!item) {\n        $log.error('unknown nav item', k);\n      }\n\n      return item;\n    });\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {str} ctx The context UUID\n   * @return {Promise}   The promise of a NavItem\n   */\n  var getNodeFromContext = function(ctx) {\n    var url = hbpUtil.format('{0}/{1}/{2}/', [\n      bbpConfig.get('api.collab.v0'),\n      'collab/context', ctx\n    ]);\n    return $http.get(url)\n    .then(function(res) {\n      var nav = NavItem.fromJson(res.data.collab.id, res.data);\n      var k = key(nav.collabId, nav.id);\n      if (cacheNavItems.get(k)) {\n        nav = cacheNavItems.get(k).update(nav);\n      } else {\n        cacheNavItems.put(k, nav);\n      }\n      return nav;\n    }, function(res) {\n      return $q.reject(hbpUtil.ferr(res));\n    });\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {number} collabId collab ID\n   * @param  {number} navItem  the NavItem instance to add to the navigation\n   * @return {Promise} promise of the added NavItem instance\n   */\n  var addNode = function(collabId, navItem) {\n    return $http.post(collabApiUrl + collabId + '/nav/', navItem.toJson())\n    .then(function(resp) {\n      return NavItem.fromJson(collabId, resp.data);\n    }, hbpUtil.ferr);\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {number} collabId collab ID\n   * @param  {NavItem} navItem the NavItem instance to remove from the navigation\n   * @return {Promise} promise of an undefined item at the end\n   */\n  var deleteNode = function(collabId, navItem) {\n    return $http.delete(collabApiUrl + collabId + '/nav/' + navItem.id + '/')\n    .then(function() {\n      cacheNavItems.remove(key(collabId, navItem.id));\n    }, hbpUtil.ferr);\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {number} collabId collab ID\n   * @param  {NavItem} navItem the instance to update\n   * @return {Promise} promise the updated instance\n   */\n  var update = function(collabId, navItem) {\n    navItem.collabId = collabId;\n    return $http.put(collabApiUrl + collabId + '/nav/' +\n      navItem.id + '/', navItem.toJson())\n    .then(function(resp) {\n      return NavItem.fromJson(collabId, resp.data);\n    }, hbpUtil.ferr);\n  };\n\n  // ordering operation needs to be globally queued to ensure consistency.\n  var insertQueue = $q.when();\n\n  /**\n   * Insert node in the three.\n   *\n   * A queue is used to ensure that the insert operation does not conflict\n   * on a single client.\n   *\n   * @param  {int} collabId   id of the collab\n   * @param  {NavItem} navItem    Nav item instance\n   * @param  {NavItem} parentItem parent item\n   * @param  {int} insertAt   add to the menu\n   * @return {Promise}        a promise that will\n   *                          return the update nav item\n   */\n  function insertNode(collabId, navItem, parentItem, insertAt) {\n    return insertQueue.then(function() {\n      // first item order_index must be 1\n      navItem.order = (insertAt === -1 ? 1 : insertAt + 1);\n      navItem.parentId = parentItem.id;\n      return update(collabId, navItem);\n    });\n  }\n\n  /**\n   * Return a unique key for chaching a nav item.\n   * @param  {int} collabId collab ID\n   * @param  {int} nodeId   NavItem ID\n   * @return {string}       the unique key\n   */\n  function key(collabId, nodeId) {\n    return collabId + '--' + nodeId;\n  }\n\n  return {\n    NavItem: NavItem,\n    getRoot: getRoot,\n    getNode: getNode,\n    getNodeFromContext: getNodeFromContext,\n    addNode: addNode,\n    saveNode: update,\n    deleteNode: deleteNode,\n    insertNode: insertNode\n  };\n});\n","/* eslint camelcase: 0 */\n/**\n * @namespace hbpCollaboratoryStorage\n * @memberof hbpCollaboratory\n * @desc\n * storageUtil provides utility functions to ease the interaction of apps with storage.\n */\nangular.module('hbpCollaboratoryStorage', ['hbpCommon'])\n.factory('hbpCollaboratoryStorage',\n  function hbpCollaboratoryStorage(hbpUtil, hbpEntityStore, hbpErrorService) {\n    /**\n     * Retrieve the key to lookup for on entities given the ctx\n     * @memberof hbpCollaboratory.hbpCollaboratoryStorage\n     * @param  {string} ctx application context UUID\n     * @return {string}     name of the entity attribute that should be used\n     * @private\n     */\n    function metadataKey(ctx) {\n      return 'ctx_' + ctx;\n    }\n\n    /**\n     * @name setContextMetadata\n     * @memberof hbpCollaboratory.hbpCollaboratoryStorage\n     * @desc\n     * the function links the contextId with the doc browser entity in input\n     * by setting a specific metadata on the entity.\n     *\n     * Entity object in input must contain the following properties:\n     * - _entityType\n     * - _uuid\n     *\n     * In case of error, the promise is rejected with a `HbpError` instance.\n     *\n     * @param  {Object} entity doc browser entity\n     * @param  {String} contextId collab app context id\n     * @return {Promise} a promise that resolves when the operation is completed\n     */\n    function setContextMetadata(entity, contextId) {\n      var newMetadata = {};\n      newMetadata[metadataKey(contextId)] = 1;\n\n      return hbpEntityStore.addMetadata(entity, newMetadata)\n      .catch(hbpErrorService.error);\n    }\n\n    /**\n     * @name getEntityByContext\n     * @memberof hbpCollaboratory.hbpCollaboratoryStorage\n     * @desc\n     * the function gets the entity linked to the contextId in input.\n     *\n     * In case of error, the promise is rejected with a `HbpError` instance.\n     *\n     * @param  {String} contextId collab app context id\n     * @return {Promise} a promise that resolves when the operation is completed\n     */\n    function getEntityByContext(contextId) {\n      var queryParams = {};\n      queryParams[metadataKey(contextId)] = 1;\n\n      return hbpEntityStore.query(queryParams).then(null, hbpUtil.ferr);\n    }\n\n    /**\n     * @name deleteContextMetadata\n     * @memberof hbpCollaboratory.hbpCollaboratoryStorage\n     * @desc\n     * the function unlink the contextId from the entity in input\n     * by deleting the context metadata.\n     *\n     * Entity object in input must contain the following properties:\n     * - _entityType\n     * - _uuid\n     *\n     * In case of error, the promise is rejected with a `HbpError` instance.\n     *\n     * @param  {Object} entity doc browser entity\n     * @param  {String} contextId collab app context id\n     * @return {Promise} a promise that resolves when the operation is completed\n     */\n    function deleteContextMetadata(entity, contextId) {\n      var key = metadataKey(contextId);\n\n      return hbpEntityStore.deleteMetadata(entity, [key])\n      .then(null, hbpErrorService.error);\n    }\n\n    /**\n     * @name updateContextMetadata\n     * @memberof hbpCollaboratory.hbpCollaboratoryStorage\n     * @desc\n     * the function delete the contextId from the `oldEntity` metadata and add\n     * it as `newEntity` metadata.\n     *\n     * Entity objects in input must contain the following properties:\n     * - _entityType\n     * - _uuid\n     *\n     * In case of error, the promise is rejected with a `HbpError` instance.\n     *\n     * @param  {Object} newEntity doc browser entity to link to the context\n     * @param  {Object} oldEntity doc browser entity to unlink from the context\n     * @param  {String} contextId collab app context id\n     * @return {Promise} a promise that resolves when the operation is completed\n     */\n    function updateContextMetadata(newEntity, oldEntity, contextId) {\n      return deleteContextMetadata(oldEntity, contextId).then(function() {\n        return setContextMetadata(newEntity, contextId);\n      }).catch(hbpErrorService.error);\n    }\n\n    /**\n     * @name getProjectByCollab\n     * @memberof hbpCollaboratory.hbpCollaboratoryStorage\n     * @desc\n     * the function returns the storage project of the collabId in input.\n     *\n     * In case of error, the promise is rejected with a `HbpError` instance.\n     *\n     * @param  {String} collabId collab id\n     * @return {Promise} a promise that resolves to the project details\n     */\n    function getProjectByCollab(collabId) {\n      var queryParams = {\n        managed_by_collab: collabId\n      };\n      return hbpEntityStore.query(queryParams).then(null, hbpUtil.ferr);\n    }\n\n    return {\n      setContextMetadata: setContextMetadata,\n      getEntityByContext: getEntityByContext,\n      deleteContextMetadata: deleteContextMetadata,\n      updateContextMetadata: updateContextMetadata,\n      getProjectByCollab: getProjectByCollab\n    };\n  });\n","angular.module('hbpCollaboratoryAutomator')\n.run(function createCollab(\n  $log, $q, hbpCollabStore,\n  hbpCollaboratoryAutomator\n) {\n  hbpCollaboratoryAutomator.registerHandler('collab', createCollab);\n\n  /**\n   * @function createCollab\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator.Tasks\n   * @desc\n   *  Create a collab defined by the given options.\n   * @param {object} descriptor - Parameters to create the collab\n   * @param {string} descriptor.name - Name of the collab\n   * @param {string} descriptor.description - Description in less than 140 characters\n   *                                       of the collab\n   * @param {string} [descriptor.privacy] - 'private' or 'public'. Notes that only\n   *                                   HBP Members can create private collab\n   * @param {Array} [after] - descriptor of subtasks\n   * @return {Promise} - promise of a collab\n   */\n  function createCollab(descriptor) {\n    var attr = hbpCollaboratoryAutomator.extractAttributes(\n      descriptor,\n      ['title', 'content', 'private']\n    );\n    $log.debug('Create collab', descriptor);\n    return hbpCollabStore.create(attr);\n  }\n});\n","angular.module('hbpCollaboratoryAutomator')\n.run(function createNavItem(\n  $log,\n  hbpCollaboratoryAppStore,\n  hbpCollaboratoryNavStore,\n  hbpCollaboratoryAutomator,\n  hbpCollaboratoryStorage,\n  hbpEntityStore\n) {\n  hbpCollaboratoryAutomator.registerHandler('nav', createNavItem);\n\n  /**\n   * Create a new nav item.\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator.Tasks\n   * @param {object} descriptor a descriptor description\n   * @param {string} descriptor.name name of the nav item\n   * @param {Collab} descriptor.collabId collab in which to add the item in.\n   * @param {string} descriptor.app app name linked to the nav item\n   * @param {object} [context] the current run context\n   * @param {object} [context.collab] a collab instance created previously\n   * @return {Promise} promise of a NavItem instance\n   */\n  function createNavItem(descriptor, context) {\n    var collabId = function() {\n      return (descriptor && descriptor.collab) ||\n        (context && context.collab.id);\n    };\n    var findApp = function(app) {\n      return hbpCollaboratoryAppStore.findOne({title: app});\n    };\n    var createNav = function(app) {\n      return hbpCollaboratoryNavStore.getRoot(collabId())\n      .then(function(parentItem) {\n        return hbpCollaboratoryNavStore.addNode(collabId(),\n          new hbpCollaboratoryNavStore.NavItem({\n            collab: collabId(),\n            name: descriptor.name,\n            appId: app.id,\n            parentId: parentItem.id\n          })\n        );\n      });\n    };\n    var linkToStorage = function(nav) {\n      if (!descriptor.entity) {\n        return nav;\n      }\n      var setLink = function(entity) {\n        return hbpCollaboratoryStorage.setContextMetadata(entity, nav.context)\n        .then(function() {\n          return nav;\n        });\n      };\n      // It might be the name used in a previous storage task.\n      if (context && context.storage && context.storage[descriptor.entity]) {\n        return setLink(context.storage[descriptor.entity]);\n      }\n      return hbpEntityStore.get(descriptor.entity).then(setLink);\n    };\n\n    $log.debug('Create nav item', descriptor, context);\n\n    return hbpCollaboratoryAutomator.ensureParameters(descriptor, 'app', 'name')\n    .then(function() {\n      return findApp(descriptor.app)\n      .then(createNav)\n      .then(linkToStorage);\n    });\n  }\n});\n","angular.module('hbpCollaboratoryAutomator')\n  .run(function createOverview(\n    $log, $q, $http, bbpConfig, hbpFileStore, hbpErrorService,\n    hbpCollaboratoryAutomator, hbpCollaboratoryNavStore,\n    hbpCollaboratoryAppStore\n  ) {\n    hbpCollaboratoryAutomator.registerHandler('overview', overview);\n\n    /**\n     * Set the content of the overview page.\n     * If an 'entity' is specified, it will use the content of that storage file\n     * If an 'app' name is specified, it will use that app for the overview page\n     *\n     * The collab is indicated either by an id in `descriptor.collab` or a\n     * collab object in `context.collab`.\n     *\n     * @memberof hbpCollaboratory.hbpCollaboratoryAutomator.Tasks\n     * @param {object} descriptor the task configuration\n     * @param {object} [descriptor.collab] id of the collab\n     * @param {string} descriptor.entity either a label that can be found in\n     *                 ``context.entities`` or a FileEntity UUID\n     * @param {string} descriptor.app the name of an application\n     * @param {object} context the current task context\n     * @param {object} [context.collab] the collab in which entities will be copied\n     * @param {object} [context.entities] a list of entities to lookup in for\n     *                   descriptor.entiry value\n     * @return {object} created entities where keys are the same as provided in\n     *                  config.storage\n     */\n    function overview(descriptor, context) {\n      $log.debug(\"Fill overview page with content from entity\");\n      var collabId = descriptor.collab || context.collab.id;\n\n      var createContentFile = function(overview, descriptor, context) {\n        return fetchSourceContent(descriptor, context)\n          .then(function(source) {\n            return $http.post(bbpConfig.get('api.richtext.v0') + '/richtext/', {\n              ctx: overview.context,\n              raw: source\n            });\n          });\n      };\n\n      var updateAppId = function(overview, descriptor) {\n        return hbpCollaboratoryAppStore.findOne({title: descriptor.app})\n          .then(function(app) {\n            overview.update({appId: app.id});\n            return hbpCollaboratoryNavStore.saveNode(collabId, overview);\n          });\n      };\n\n      return hbpCollaboratoryNavStore\n        .getRoot(collabId)\n        .then(function(rootNav) {\n          var overview = rootNav.children[0];\n\n          var updateOverview = descriptor.app ?\n            updateAppId(overview, descriptor) :\n            createContentFile(overview, descriptor, context);\n\n          return updateOverview.then(function() {\n            return overview;\n          });\n        });\n    }\n\n    /**\n     * Download file entity content.\n     *\n     * @param {object} descriptor the task configuration\n     * @param {string} descriptor.entity either the label to find in\n     *                 ``context.entities`` or a the entity UUID.\n     * @param {object} context the current task context\n     * @param {object} context.entities optional entities in which to lookup for one\n     * @return {Promise} the promise of the entity content string\n     * @private\n     */\n    function fetchSourceContent(descriptor, context) {\n      var uuid;\n      if (context && context.entities && context.entities[descriptor.entity]) {\n        uuid = context.entities[descriptor.entity]._uuid;\n      } else {\n        uuid = descriptor.entity;\n      }\n      return hbpFileStore.getContent(uuid);\n    }\n  });\n","angular.module('hbpCollaboratoryAutomator')\n.run(function createStorage(\n  $log, $q, hbpEntityStore,\n  hbpErrorService,\n  hbpCollaboratoryAutomator,\n  hbpCollaboratoryStorage\n) {\n  hbpCollaboratoryAutomator.registerHandler('storage', storage);\n\n  /**\n   * Copy files and folders to the destination collab storage.\n   *\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator.Tasks\n   * @param {object} descriptor the task configuration\n   * @param {object} descriptor.storage a object where keys are the file path in the\n   *                                new collab and value are the UUID of the\n   *                                entity to copy at this path.\n   * @param {object} [descriptor.collab] id of the collab\n   * @param {object} context the current task context\n   * @param {object} [context.collab] the collab in which entities will be copied\n   * @return {object} created entities where keys are the same as provided in\n   *                  config.storage\n   */\n  function storage(descriptor, context) {\n    return hbpCollaboratoryAutomator.ensureParameters(\n      descriptor, 'entities'\n    ).then(function() {\n      return hbpCollaboratoryStorage\n        .getProjectByCollab(descriptor.collab || context.collab.id)\n        .then(function(projectEntity) {\n          var promises = {};\n          angular.forEach(descriptor.entities, function(value, name) {\n            if (angular.isString(value)) {\n              $log.debug(\"Copy entity with UUID\", value);\n              promises[name] = (\n                hbpEntityStore.copy(value, projectEntity._uuid));\n            } else {\n              $log.warn('Invalid configuration for storage task', descriptor);\n            }\n          });\n          return $q.all(promises);\n        });\n    });\n  }\n});\n","/**\n * @namespace hcFormControlFocus\n * @memberof hbpCollaboratoryForm\n * @desc\n * The ``hcFormControlFocus`` Directive mark a form element as the one that\n * should receive the focus first.\n * @example <caption>Give the focus to the search field</caption>\n * angular.module('exampleApp', ['formControlFocus']);\n *\n * // HTML snippet:\n * // <form ng-app=\"exampleApp\"><input type=\"search\" hc-form-control-focus></form>\n */\nangular.module('hbpCollaboratoryForm')\n.directive('hcfFormControlFocus', function hcfFormControlFocus($timeout) {\n  return {\n    type: 'A',\n    link: function formControlFocusLink(scope, elt) {\n      $timeout(function() {\n        elt[0].focus();\n      }, 0, false);\n    }\n  };\n});\n","/**\n * @namespace hcFormGroupState\n * @memberof hbpCollaboratoryForm\n * @desc\n * ``hcfFormGroupState`` directive flag the current form group with\n * the class has-error or has-success depending on its form field\n * current state.\n *\n * @example\n * <caption>Track a field validity at the ``.form-group`` level</caption>\n * angular.module('exampleApp', ['hbpCollaboratory']);\n */\nangular.module('hbpCollaboratoryForm')\n.directive('hcfFormGroupState', function formGroupState() {\n  return {\n    type: 'A',\n    scope: {\n      model: '=hcfFormGroupState'\n    },\n    link: function formGroupStateLink(scope, elt) {\n      scope.$watchGroup(['model.$touched', 'model.$valid'], function() {\n        if (!scope.model) {\n          return;\n        }\n        elt.removeClass('has-error', 'has-success');\n        if (!scope.model.$touched) {\n          return;\n        }\n        if (scope.model.$valid) {\n          elt.addClass('has-success');\n        } else {\n          elt.addClass('has-error');\n        }\n      }, true);\n    }\n  };\n});\n","/**\n * @namespace hbpCollaboratory\n * @desc\n * Provides angular services to work with HBP Collaboratory.\n */\nangular.module('hbpCollaboratory', [\n  'hbpCollaboratoryAutomator',\n  'hbpCollaboratoryNavStore',\n  'hbpCollaboratoryAppStore',\n  'hbpCollaboratoryForm'\n]);\n"],"sourceRoot":"/source/"}